--- /tmp/Arja_Defects4J_Closure_22/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-01 09:55:25.787478311 -0500
+++ /tmp/Arja_Defects4J_Closure_22/patches_ahai/Patch_270/patched/tmp/Arja_Defects4J_Closure_22/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-01 10:03:51.943426423 -0500
@@ -3121,19 +3121,7 @@
             ? true : isExpressionResultUsed(parent);
       case Token.COMMA:
         Node gramps = parent.getParent();
-        if (gramps.isCall() &&
-            parent == gramps.getFirstChild()) {
-          // Semantically, a direct call to eval is different from an indirect
-          // call to an eval. See ECMA-262 S15.1.2.1. So it's OK for the first
-          // expression to a comma to be a no-op if it's used to indirect
-          // an eval. This we pretend that this is "used".
-          if (expr == parent.getFirstChild() &&
-              parent.getChildCount() == 2 &&
-              expr.getNext().isName() &&
-              "eval".equals(expr.getNext().getString())) {
-            return true;
-          }
-        }
+        ;
 
         return (expr == parent.getFirstChild())
             ? false : isExpressionResultUsed(parent);


--- /tmp/Arja_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java	2018-12-01 09:55:25.787478311 -0500
+++ /tmp/Arja_Defects4J_Closure_22/patches_ahai/Patch_270/patched/tmp/Arja_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java	2018-12-01 10:03:51.947426422 -0500
@@ -113,10 +113,6 @@
           int ancestorType = an.getType();
           if (ancestorType == Token.COMMA)
             continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
-          else
-            break;
         }
       }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {


