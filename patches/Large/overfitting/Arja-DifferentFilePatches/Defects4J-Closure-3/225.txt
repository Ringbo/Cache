--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	2018-12-01 10:04:42.028213916 -0500
+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1547/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	2018-12-01 10:29:08.494798608 -0500
@@ -402,9 +402,7 @@
                  Predicates.
                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
                  false);
-        if (pathCheck.somePathsSatisfyPredicate()) {
-          return false;
-        }
+        return false;
       }
 
       return true;


--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java	2018-12-01 10:04:38.780213842 -0500
+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1547/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java	2018-12-01 10:29:08.498798651 -0500
@@ -160,7 +160,7 @@
     List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);
     for (DiGraphEdge<Node, Branch> edge : branchEdges) {
       if (edge.getValue() == Branch.ON_EX) {
-        return true;
+        break;
       }
     }
     return false;


--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java	2018-12-01 10:04:38.760213842 -0500
+++ /tmp/Arja_Defects4J_Closure_3/patches_ft34/Patch_1547/patched/tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java	2018-12-01 10:29:08.498798651 -0500
@@ -221,9 +221,6 @@
       }
 
       DiGraphNode<N, E> next = e.getDestination();
-      if (checkSomePathsWithoutBackEdges(next, b)) {
-        return true;
-      }
     }
     return false;
   }


