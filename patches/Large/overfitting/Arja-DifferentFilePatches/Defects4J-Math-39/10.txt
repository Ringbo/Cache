--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java	2018-12-01 06:15:54.854605791 -0500
+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1459/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java	2018-12-01 07:46:29.351969985 -0500
@@ -294,7 +294,12 @@
       yDotKLast[k] = new double[dimension];
     }
 
-    v = new double[7][];
+    if (v == null) {
+		v = new double[7][];
+		for (int k = 0; k < 7; ++k) {
+			v[k] = new double[interpolatedState.length];
+		}
+	}
     for (int k = 0; k < v.length; ++k) {
       v[k]  = new double[dimension];
     }


--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	2018-12-01 06:15:58.330605737 -0500
+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1459/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	2018-12-01 07:46:29.351969985 -0500
@@ -233,7 +233,14 @@
         if (firstTime) {
           final double[] scale = new double[mainSetDimension];
           if (vecAbsoluteTolerance == null) {
-              for (int i = 0; i < scale.length; ++i) {
+              for (int j = 0; j < y0.length; ++j) {
+				double sum = b[0] * yDotK[0][j];
+				for (int l = 1; l < stages; ++l) {
+					sum += b[l] * yDotK[l][j];
+				}
+				yTmp[j] = y[j] + stepSize * sum;
+			}
+			for (int i = 0; i < scale.length; ++i) {
                 scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
               }
           } else {
@@ -251,7 +258,11 @@
         // next stages
         for (int k = 1; k < stages; ++k) {
 
-          for (int j = 0; j < y0.length; ++j) {
+          if ((forward && (stepStart + stepSize > t))
+					|| ((!forward) && (stepStart + stepSize < t))) {
+				stepSize = t - stepStart;
+			}
+		for (int j = 0; j < y0.length; ++j) {
             double sum = a[k-1][0] * yDotK[0][j];
             for (int l = 1; l < k; ++l) {
               sum += a[k-1][l] * yDotK[l][j];


