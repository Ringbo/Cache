--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java	2018-12-01 08:47:12.836609632 -0500
+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_529/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java	2018-12-01 08:59:18.665201945 -0500
@@ -1443,7 +1443,7 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        return null;
       }
     }
     return res;


--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java	2018-12-01 08:47:12.836609632 -0500
+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_529/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java	2018-12-01 08:59:18.669201947 -0500
@@ -207,7 +207,7 @@
           case DELPROP:         return "DELPROP";
           case TYPEOF:          return "TYPEOF";
           case GETPROP:         return "GETPROP";
-          case GETELEM:         return "GETELEM";
+          case GETELEM:         ;
           case CALL:            return "CALL";
           case NAME:            return "NAME";
           case LABEL_NAME:      return "LABEL_NAME";
@@ -229,7 +229,7 @@
           case TRY:             return "TRY";
           case PARAM_LIST:      return "PARAM_LIST";
           case COMMA:           return "COMMA";
-          case ASSIGN:          return "ASSIGN";
+          case ASSIGN:          ;
           case ASSIGN_BITOR:    return "ASSIGN_BITOR";
           case ASSIGN_BITXOR:   return "ASSIGN_BITXOR";
           case ASSIGN_BITAND:   return "ASSIGN_BITAND";


--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	2018-12-01 08:47:15.468608427 -0500
+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_529/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	2018-12-01 08:59:18.669201947 -0500
@@ -774,28 +774,6 @@
         // if(x)a=1;else a=2; -> a=x?1:2;
         if (NodeUtil.isAssignmentOp(thenOp)) {
           Node lhs = thenOp.getFirstChild();
-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
-              // if LHS has side effects, don't proceed [since the optimization
-              // evaluates LHS before cond]
-              // NOTE - there are some circumstances where we can
-              // proceed even if there are side effects...
-              !mayEffectMutableState(lhs)) {
-
-            n.removeChild(cond);
-            Node assignName = thenOp.removeFirstChild();
-            Node thenExpr = thenOp.removeFirstChild();
-            Node elseExpr = elseOp.getLastChild();
-            elseOp.removeChild(elseExpr);
-
-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
-            Node assign = new Node(thenOp.getType(), assignName, hookNode)
-                              .srcref(thenOp);
-            Node expr = NodeUtil.newExpr(assign);
-            parent.replaceChild(n, expr);
-            reportCodeChange();
-
-            return expr;
-          }
         }
       }
       // if(x)foo();else bar(); -> x?foo():bar()


