--- /tmp/Arja_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java	2018-12-01 06:00:06.853104067 -0500
+++ /tmp/Arja_Defects4J_Math_73/patches_pxsy/Patch_533/patched/tmp/Arja_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java	2018-12-01 06:27:11.554614820 -0500
@@ -193,7 +193,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        this.iterationCount = 0;
+		return (start < mid) && (mid < end);
     }
 
     /**
@@ -207,8 +208,8 @@
     protected void verifyInterval(final double lower, final double upper) {
         if (lower >= upper) {
             throw MathRuntimeException.createIllegalArgumentException(
-                    "endpoints do not specify an interval: [{0}, {1}]",
-                    lower, upper);
+					"endpoints do not specify an interval: [{0}, {1}]", lower,
+					upper);
         }
     }
 


--- /tmp/Arja_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-01 06:00:09.289104123 -0500
+++ /tmp/Arja_Defects4J_Math_73/patches_pxsy/Patch_533/patched/tmp/Arja_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-01 06:27:11.558614829 -0500
@@ -128,10 +128,7 @@
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
+        verifyBracketing(min, max, f);
 
 
         // full Brent algorithm starting with provided initial guess
@@ -297,7 +294,38 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                if ((Math.abs(oldDelta) < tolerance)
+						|| (Math.abs(y0) <= Math.abs(y1))) {
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				} else {
+					double r3 = y1 / y0;
+					double p;
+					double p1;
+					if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					if (p > 0.0) {
+						p1 = -p1;
+					} else {
+						p = -p;
+					}
+					if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1)
+							|| p >= Math.abs(0.5 * oldDelta * p1)) {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					} else {
+						oldDelta = delta;
+						delta = p / p1;
+					}
+				}
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }


