--- /tmp/Arja_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java	2018-12-01 06:00:06.853104067 -0500
+++ /tmp/Arja_Defects4J_Math_73/patches_pxsy/Patch_814/patched/tmp/Arja_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java	2018-12-01 06:40:50.404746199 -0500
@@ -207,8 +207,8 @@
     protected void verifyInterval(final double lower, final double upper) {
         if (lower >= upper) {
             throw MathRuntimeException.createIllegalArgumentException(
-                    "endpoints do not specify an interval: [{0}, {1}]",
-                    lower, upper);
+					"endpoints do not specify an interval: [{0}, {1}]", lower,
+					upper);
         }
     }
 


--- /tmp/Arja_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-01 06:00:09.289104123 -0500
+++ /tmp/Arja_Defects4J_Math_73/patches_pxsy/Patch_814/patched/tmp/Arja_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-01 06:40:50.404746199 -0500
@@ -111,11 +111,6 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
-
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
@@ -128,10 +123,7 @@
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
+        verifyBracketing(min, max, f);
 
 
         // full Brent algorithm starting with provided initial guess
@@ -296,11 +288,17 @@
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
-            } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
-            } else if (dx <= 0.0) {
-                x1 = x1 - 0.5 * tolerance;
-            }
+            } else {
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+			}
             y1 = f.value(x1);
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;


