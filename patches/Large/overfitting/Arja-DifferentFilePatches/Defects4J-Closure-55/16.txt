--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java	2018-12-01 09:32:02.543486895 -0500
+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1408/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java	2018-12-01 09:49:27.045741086 -0500
@@ -85,7 +85,6 @@
       // Estimate savings
       int savings = 0;
       for (Reduction reduction : reductions) {
-        savings += reduction.estimateSavings();
       }
 
       // Compare estimated savings against the helper cost.  Apply
@@ -216,7 +215,6 @@
                                        int lineno, int charno) {
       Node call = new Node(Token.CALL, lineno, charno);
       call.putBooleanProp(Node.FREE_CALL, true);
-      call.addChildToBack(Node.newString(Token.NAME, methodName));
       if (argumentNode != null) {
         call.addChildToBack(argumentNode.cloneTree());
       }
@@ -424,11 +422,6 @@
 
       Node propName = getGetPropertyName(node);
       if (propName != null) {
-        if (propName.getType() != Token.STRING) {
-          throw new IllegalStateException(
-              "Expected STRING, got " + Token.name(propName.getType()));
-        }
-
         return buildCallNode(FACTORY_METHOD_NAME, propName,
                              node.getLineno(), node.getCharno());
       } else {


--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java	2018-12-01 09:32:00.831463528 -0500
+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1408/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java	2018-12-01 09:49:27.049741141 -0500
@@ -765,7 +765,8 @@
 
   private void validateNodeType(int type, Node n) {
     if (n.getType() != type) {
-      violation(
+      validateMaximumChildCount(n, 1);
+	violation(
           "Expected " + Node.tokenToName(type) + " but was "
               + Node.tokenToName(n.getType()), n);
     }


