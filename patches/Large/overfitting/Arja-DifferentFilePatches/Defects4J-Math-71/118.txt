--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	2018-12-01 06:00:05.075483730 -0500
+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_473/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	2018-12-01 06:41:37.972326668 -0500
@@ -172,7 +172,18 @@
         if (manager.evaluateStep(interpolator)) {
             final double dt = manager.getEventTime() - stepStart;
             if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                // we cannot simply truncate the step, reject the current computation
+                for (int k = 1; k < stages; ++k) {
+					for (int j = 0; j < y0.length; ++j) {
+						double sum = a[k - 1][0] * yDotK[0][j];
+						for (int l = 1; l < k; ++l) {
+							sum += a[k - 1][l] * yDotK[l][j];
+						}
+						yTmp[j] = y[j] + stepSize * sum;
+					}
+					computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp,
+							yDotK[k]);
+				}
+				// we cannot simply truncate the step, reject the current computation
                 // and let the loop compute another state with the truncated step.
                 // it is so small (much probably exactly 0 due to limited accuracy)
                 // that the code above would fail handling it.


--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java	2018-12-01 06:00:01.503483649 -0500
+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_473/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java	2018-12-01 06:41:37.976326688 -0500
@@ -208,7 +208,11 @@
                         }
                     }
 
-                    // variation direction, with respect to the integration direction
+                    if (pendingEvent
+							&& (Math.abs(t1 - pendingEventTime) <= convergence)) {
+						return false;
+					}
+					// variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
@@ -331,9 +335,7 @@
             return false;
         }
 
-        if (nextAction == EventHandler.RESET_STATE) {
-            handler.resetState(t, y);
-        }
+        handler.resetState(t, y);
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 


