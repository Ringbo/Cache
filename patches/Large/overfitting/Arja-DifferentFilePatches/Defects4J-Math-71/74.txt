--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java	2018-12-01 06:00:01.503483649 -0500
+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_434/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java	2018-12-01 06:38:19.747349161 -0500
@@ -106,7 +106,8 @@
      * @return true if manager is empty
      */
     public boolean isEmpty() {
-        return states.isEmpty();
+        first = null;
+		return states.isEmpty();
     }
 
     /** Evaluate the impact of the proposed step on all managed


--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java	2018-12-01 06:00:01.503483649 -0500
+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_434/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java	2018-12-01 06:38:19.755349201 -0500
@@ -188,30 +188,73 @@
                 if (g0Positive ^ (gb >= 0)) {
                     // there is a sign change: an event is expected during this step
 
-                    if (ga * gb > 0) {
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                        final double epsilon = (forward ? 0.25 : -0.25) * convergence;
-                        for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {
-                            ta += epsilon;
-                            interpolator.setInterpolatedTime(ta);
-                            ga = handler.g(ta, interpolator.getInterpolatedState());
-                        }
-                        if (ga * gb > 0) {
-                            // this should never happen
-                            throw MathRuntimeException.createInternalError(null);
-                        }
-                    }
+                    if (pendingEvent
+							&& (Math.abs(t1 - pendingEventTime) <= convergence)) {
+						return false;
+					}
 
-                    // variation direction, with respect to the integration direction
+                    if (pendingEvent
+							&& (Math.abs(t1 - pendingEventTime) <= convergence)) {
+						return false;
+					}
+					// variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    if (g0Positive ^ (gb >= 0)) {
+						if (ga * gb > 0) {
+							final double epsilon = (forward ? 0.25 : -0.25)
+									* convergence;
+							for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {
+								ta += epsilon;
+								interpolator.setInterpolatedTime(ta);
+								ga = handler.g(ta,
+										interpolator.getInterpolatedState());
+							}
+							if (ga * gb > 0) {
+								throw MathRuntimeException
+										.createInternalError(null);
+							}
+						}
+						increasing = gb >= ga;
+						final UnivariateRealFunction f = new UnivariateRealFunction() {
+							public double value(final double t)
+									throws FunctionEvaluationException {
+								try {
+									interpolator.setInterpolatedTime(t);
+									return handler
+											.g(t, interpolator
+													.getInterpolatedState());
+								} catch (DerivativeException e) {
+									throw new FunctionEvaluationException(e, t);
+								} catch (EventException e) {
+									throw new FunctionEvaluationException(e, t);
+								}
+							}
+						};
+						final BrentSolver solver = new BrentSolver();
+						solver.setAbsoluteAccuracy(convergence);
+						solver.setMaximalIterationCount(maxIterationCount);
+						final double root = (ta <= tb) ? solver
+								.solve(f, ta, tb) : solver.solve(f, tb, ta);
+						if ((Math.abs(root - ta) <= convergence)
+								&& (Math.abs(root - previousEventTime) <= convergence)) {
+							ta = tb;
+							ga = gb;
+						} else if (Double.isNaN(previousEventTime)
+								|| (Math.abs(previousEventTime - root) > convergence)) {
+							pendingEventTime = root;
+							if (pendingEvent
+									&& (Math.abs(t1 - pendingEventTime) <= convergence)) {
+								return false;
+							}
+							pendingEvent = true;
+							return true;
+						}
+					} else {
+						ta = tb;
+						ga = gb;
+					}
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);


