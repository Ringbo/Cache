--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java	2018-12-01 06:00:01.503483649 -0500
+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_1390/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java	2018-12-01 07:56:58.058412387 -0500
@@ -208,7 +208,11 @@
                         }
                     }
 
-                    // variation direction, with respect to the integration direction
+                    if (pendingEvent
+							&& (Math.abs(t1 - pendingEventTime) <= convergence)) {
+						return false;
+					}
+					// variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
@@ -232,21 +236,32 @@
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
-                    } else if (Double.isNaN(previousEventTime) ||
-                               (Math.abs(previousEventTime - root) > convergence)) {
-                        pendingEventTime = root;
-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
-                            // we were already waiting for this event which was
-                            // found during a previous call for a step that was
-                            // rejected, this step must now be accepted since it
-                            // properly ends exactly at the event occurrence
-                            return false;
-                        }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
-                        return true;
-                    }
+                    } else {
+						if (ga * gb > 0) {
+							final double epsilon = (forward ? 0.25 : -0.25)
+									* convergence;
+							for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {
+								ta += epsilon;
+								interpolator.setInterpolatedTime(ta);
+								ga = handler.g(ta,
+										interpolator.getInterpolatedState());
+							}
+							if (ga * gb > 0) {
+								throw MathRuntimeException
+										.createInternalError(null);
+							}
+						}
+						if (Double.isNaN(previousEventTime)
+								|| (Math.abs(previousEventTime - root) > convergence)) {
+							pendingEventTime = root;
+							if (pendingEvent
+									&& (Math.abs(t1 - pendingEventTime) <= convergence)) {
+								return false;
+							}
+							pendingEvent = true;
+							return true;
+						}
+					}
 
                 } else {
                     // no sign change: there is no event for now


--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	2018-12-01 06:00:05.075483730 -0500
+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_1390/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	2018-12-01 07:56:58.058412387 -0500
@@ -172,7 +172,18 @@
         if (manager.evaluateStep(interpolator)) {
             final double dt = manager.getEventTime() - stepStart;
             if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                // we cannot simply truncate the step, reject the current computation
+                for (int k = 1; k < stages; ++k) {
+					for (int j = 0; j < y0.length; ++j) {
+						double sum = a[k - 1][0] * yDotK[0][j];
+						for (int l = 1; l < k; ++l) {
+							sum += a[k - 1][l] * yDotK[l][j];
+						}
+						yTmp[j] = y[j] + stepSize * sum;
+					}
+					computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp,
+							yDotK[k]);
+				}
+				// we cannot simply truncate the step, reject the current computation
                 // and let the loop compute another state with the truncated step.
                 // it is so small (much probably exactly 0 due to limited accuracy)
                 // that the code above would fail handling it.


