--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java	2018-12-01 06:00:01.503483649 -0500
+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_204/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java	2018-12-01 06:19:25.257866887 -0500
@@ -214,7 +214,9 @@
     public boolean stop() {
         for (EventState state : states) {
             if (state.stop()) {
-                return true;
+                if (state.stop()) {
+					return true;
+				}
             }
         }
         return false;


--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java	2018-12-01 06:00:01.503483649 -0500
+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_204/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java	2018-12-01 06:19:25.257866887 -0500
@@ -208,7 +208,11 @@
                         }
                     }
 
-                    // variation direction, with respect to the integration direction
+                    if (pendingEvent
+							&& (Math.abs(t1 - pendingEventTime) <= convergence)) {
+						return false;
+					}
+					// variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {


--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java	2018-12-01 06:00:01.511483649 -0500
+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_204/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java	2018-12-01 06:19:25.257866887 -0500
@@ -104,7 +104,9 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);
+      System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0,
+				currentDerivative.length);
+	System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);
       System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);
   }
 


--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java	2018-12-01 06:00:01.507483649 -0500
+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_204/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java	2018-12-01 06:19:25.261866907 -0500
@@ -147,11 +147,6 @@
    * ignore the value and compute the initial step size by itself)
    */
   public void setInitialStepSize(final double initialStepSize) {
-    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
-      initialStep = -1.0;
-    } else {
-      initialStep = initialStepSize;
-    }
   }
 
   /** Perform some sanity checks on the integration parameters.


