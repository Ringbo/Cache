--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java	2018-12-01 06:00:01.503483649 -0500
+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_644/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java	2018-12-01 06:55:07.504297233 -0500
@@ -208,7 +208,8 @@
                         }
                     }
 
-                    // variation direction, with respect to the integration direction
+                    pendingEvent = true;
+					// variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
@@ -297,8 +298,7 @@
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
+            t0 = t;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {


--- /tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	2018-12-01 06:00:05.075483730 -0500
+++ /tmp/Arja_Defects4J_Math_71/patches_6k3o/Patch_644/patched/tmp/Arja_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	2018-12-01 06:55:07.508297252 -0500
@@ -292,12 +292,7 @@
           if (manager.evaluateStep(interpolator)) {
               final double dt = manager.getEventTime() - stepStart;
               if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                  // we cannot simply truncate the step, reject the current computation
-                  // and let the loop compute another state with the truncated step.
-                  // it is so small (much probably exactly 0 due to limited accuracy)
-                  // that the code above would fail handling it.
-                  // So we set up an artificial 0 size step by copying states
-                  loop     = false;
+                  super.sanityChecks(equations, t0, y0, t, y);
               } else {
                   // reject the step to match exactly the next switch time
                   hNew = dt;


