--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	2018-12-01 07:02:49.219241695 -0500
+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1657/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	2018-12-01 08:06:43.001127549 -0500
@@ -318,7 +318,11 @@
      * @return upper bound of the support
      */
     public int getSupportUpperBound() {
-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());
+        if (sampleSize <= 0) {
+			throw new NotStrictlyPositiveException(
+					LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
+		}
+		return FastMath.min(getNumberOfSuccesses(), getSampleSize());
     }
 
     /**


--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-01 07:02:45.423249176 -0500
+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1657/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-01 08:06:43.005127540 -0500
@@ -134,9 +134,6 @@
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


