--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-01 07:02:45.423249176 -0500
+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_619/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-01 07:38:33.525589007 -0500
@@ -98,20 +98,22 @@
      * </ul>
      */
     public int inverseCumulativeProbability(final double p) throws OutOfRangeException {
-        if (p < 0.0 || p > 1.0) {
-            throw new OutOfRangeException(p, 0, 1);
-        }
-
         int lower = getSupportLowerBound();
         if (p == 0.0) {
             return lower;
         }
-        if (lower == Integer.MIN_VALUE) {
+        if (p < 0.0 || p > 1.0) {
+			throw new OutOfRangeException(p, 0, 1);
+		}
+		if (lower == Integer.MIN_VALUE) {
             if (checkedCumulativeProbability(lower) >= p) {
                 return lower;
             }
         } else {
-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which
+            if (p == 0.0) {
+				return lower;
+			}
+			lower -= 1; // this ensures cumulativeProbability(lower) < p, which
                         // is important for the solving step
         }
 
@@ -134,9 +136,6 @@
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


