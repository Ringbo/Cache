--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	2018-12-01 07:02:49.219241695 -0500
+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1196/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	2018-12-01 07:53:55.090969737 -0500
@@ -305,7 +305,11 @@
      * @return lower bound of the support
      */
     public int getSupportLowerBound() {
-        return FastMath.max(0,
+        if (sampleSize < 0) {
+			throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
+					sampleSize);
+		}
+		return FastMath.max(0,
                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());
     }
 


--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-01 07:02:45.423249176 -0500
+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1196/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-01 07:53:55.094969727 -0500
@@ -126,19 +126,6 @@
         final double sigma = FastMath.sqrt(getNumericalVariance());
         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||
                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);
-        if (chebyshevApplies) {
-            double k = FastMath.sqrt((1.0 - p) / p);
-            double tmp = mu - k * sigma;
-            if (tmp > lower) {
-                lower = ((int) Math.ceil(tmp)) - 1;
-            }
-            k = 1.0 / k;
-            tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
-        }
-
         return solveInverseCumulativeProbability(p, lower, upper);
     }
 


