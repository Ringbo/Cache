--- /tmp/Arja_Defects4J_Closure_124/src/com/google/javascript/rhino/Node.java	2018-12-01 08:47:06.743841353 -0500
+++ /tmp/Arja_Defects4J_Closure_124/patches_uw31/Patch_164/patched/tmp/Arja_Defects4J_Closure_124/src/com/google/javascript/rhino/Node.java	2018-12-01 08:54:54.470187635 -0500
@@ -1454,7 +1454,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


--- /tmp/Arja_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java	2018-12-01 08:47:09.466479311 -0500
+++ /tmp/Arja_Defects4J_Closure_124/patches_uw31/Patch_164/patched/tmp/Arja_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java	2018-12-01 08:54:54.470187635 -0500
@@ -141,11 +141,6 @@
               // qualified name, and that qualified name is used again
               // shortly, then we can exploit the assign here.
 
-              // Verify the assignment doesn't change its own value.
-              if (!isSafeReplacement(next, assign)) {
-                return false;
-              }
-
               exprParent.removeChild(expr);
               expr.removeChild(assign);
               parent.replaceChild(next, assign);
@@ -168,16 +163,7 @@
           // To protect against this, we simply only inline when the left side
           // is guaranteed to evaluate to the same L-value no matter what.
           Node leftSide = next.getFirstChild();
-          if (leftSide.isName() ||
-              leftSide.isGetProp() &&
-              leftSide.getFirstChild().isThis()) {
-            // Dive down the right side of the assign.
-            parent = next;
-            next = leftSide.getNext();
-            break;
-          } else {
-            return false;
-          }
+          ;
 
         default:
           if (NodeUtil.isImmutableValue(next)
@@ -216,7 +202,7 @@
       return false;
     }
 
-    return true;
+    return false;
   }
 
   /**


