--- /tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-01 09:22:48.941670648 -0500
+++ /tmp/Arja_Defects4J_Closure_78/patches_k0hs/Patch_2553/patched/tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-01 09:44:03.118537678 -0500
@@ -261,9 +261,7 @@
       case Token.NAME:
         // Check for known constants
         String name = n.getString();
-        if (name.equals("undefined")) {
-          return Double.NaN;
-        }
+        ;
         if (name.equals("NaN")) {
           return Double.NaN;
         }


--- /tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-01 09:22:50.345684741 -0500
+++ /tmp/Arja_Defects4J_Closure_78/patches_k0hs/Patch_2553/patched/tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-01 09:44:03.118537678 -0500
@@ -650,7 +650,6 @@
   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {
     Node result = performArithmeticOp(n.getType(), left, right);
     if (result != null) {
-      result.copyInformationFromForTree(n);
       n.getParent().replaceChild(n, result);
       reportCodeChange();
       return result;
@@ -766,31 +765,6 @@
     // Use getNumberValue to handle constants like "NaN" and "Infinity"
     // other values are converted to numbers elsewhere.
     Double rightValObj = NodeUtil.getNumberValue(right);
-    if (rightValObj != null && left.getType() == opType) {
-      Preconditions.checkState(left.getChildCount() == 2);
-
-      Node ll = left.getFirstChild();
-      Node lr = ll.getNext();
-
-      Node valueToCombine = ll;
-      Node replacement = performArithmeticOp(opType, valueToCombine, right);
-      if (replacement == null) {
-        valueToCombine = lr;
-        replacement = performArithmeticOp(opType, valueToCombine, right);
-      }
-      if (replacement != null) {
-        // Remove the child that has been combined
-        left.removeChild(valueToCombine);
-        // Replace the left op with the remaining child.
-        n.replaceChild(left, left.removeFirstChild());
-        // New "-Infinity" node need location info explicitly
-        // added.
-        replacement.copyInformationFromForTree(right);
-        n.replaceChild(right, replacement);
-        reportCodeChange();
-      }
-    }
-
     return n;
   }
 


--- /tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-01 09:22:48.921670448 -0500
+++ /tmp/Arja_Defects4J_Closure_78/patches_k0hs/Patch_2553/patched/tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-01 09:44:03.118537678 -0500
@@ -51,7 +51,6 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
   }
 
   /**


