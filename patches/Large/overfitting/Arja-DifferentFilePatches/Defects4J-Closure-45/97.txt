--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-01 09:37:41.704746508 -0500
+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_557/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-01 09:48:56.471927784 -0500
@@ -591,7 +591,7 @@
             return false;
           }
         }
-        return true;
+        return false;
 
       case Token.REGEXP:
         // Return true only if all children are const.


--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-12-01 09:37:43.388746547 -0500
+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_557/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-12-01 09:48:56.471927784 -0500
@@ -947,19 +947,6 @@
       Node parent = assignNode.getParent();
       if (mayHaveSecondarySideEffects) {
         Node replacement = assignNode.getLastChild().detachFromParent();
-
-        // Aggregate any expressions in GETELEMs.
-        for (Node current = assignNode.getFirstChild();
-             !current.isName();
-             current = current.getFirstChild()) {
-          if (current.isGetElem()) {
-            replacement = IR.comma(
-                current.getLastChild().detachFromParent(), replacement);
-            replacement.copyInformationFrom(current);
-          }
-        }
-
-        parent.replaceChild(assignNode, replacement);
       } else {
         Node gramps = parent.getParent();
         if (parent.isExprResult()) {


