--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java	2018-12-01 09:37:41.728746509 -0500
+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_937/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/rhino/Node.java	2018-12-01 09:52:40.008373931 -0500
@@ -1417,7 +1417,10 @@
    */
   NodeMismatch checkTreeEqualsImpl(Node node2) {
     if (!isEquivalentTo(node2, false, false)) {
-      return new NodeMismatch(this, node2);
+      if (!isEquivalentTo(node2, false, false)) {
+			return new NodeMismatch(this, node2);
+		}
+	return new NodeMismatch(this, node2);
     }
 
     NodeMismatch res = null;


--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-01 09:37:41.704746508 -0500
+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_937/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-01 09:52:40.012373939 -0500
@@ -591,7 +591,7 @@
             return false;
           }
         }
-        return true;
+        return false;
 
       case Token.REGEXP:
         // Return true only if all children are const.


--- /tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-12-01 09:37:43.388746547 -0500
+++ /tmp/Arja_Defects4J_Closure_45/patches_p0j8/Patch_937/patched/tmp/Arja_Defects4J_Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-12-01 09:52:40.012373939 -0500
@@ -958,8 +958,6 @@
             replacement.copyInformationFrom(current);
           }
         }
-
-        parent.replaceChild(assignNode, replacement);
       } else {
         Node gramps = parent.getParent();
         if (parent.isExprResult()) {


