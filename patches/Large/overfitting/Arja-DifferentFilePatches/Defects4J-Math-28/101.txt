--- /tmp/Arja_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2018-12-01 06:29:49.227599214 -0500
+++ /tmp/Arja_Defects4J_Math_28/patches_1aw5/Patch_577/patched/tmp/Arja_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2018-12-01 07:01:58.248684159 -0500
@@ -117,13 +117,6 @@
 
             // 1. check if there's an artificial variable that can be forced out of the basis
                 for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
-                        }
-                    }
                 }
 
             // 2. apply Bland's rule to prevent cycling:


--- /tmp/Arja_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	2018-12-01 06:29:45.583618730 -0500
+++ /tmp/Arja_Defects4J_Math_28/patches_1aw5/Patch_577/patched/tmp/Arja_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	2018-12-01 07:01:58.252684142 -0500
@@ -228,7 +228,10 @@
             if (constraint.getRelationship() == Relationship.LEQ) {
                 matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack
             } else if (constraint.getRelationship() == Relationship.GEQ) {
-                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess
+                if (constraint.getRelationship() == Relationship.GEQ) {
+					matrix.setEntry(row, getSlackVariableOffset() + slackVar++,
+							-1);
+				}
             }
 
             // artificial variables


