--- /tmp/Arja_Bug_dot_jar_Flink_45fb6d82/flink-compiler/src/main/java/org/apache/flink/compiler/operators/GroupReduceWithCombineProperties.java	2018-12-29 12:17:32.039750000 -0500
+++ /tmp/Arja_Bug_dot_jar_Flink_45fb6d82/patches_dbhn/Patch_1898/patched/tmp/Arja_Bug_dot_jar_Flink_45fb6d82/flink-compiler/src/main/java/org/apache/flink/compiler/operators/GroupReduceWithCombineProperties.java	2018-12-29 12:32:52.390310332 -0500
@@ -91,9 +91,6 @@
 		if (in.getShipStrategy() == ShipStrategyType.FORWARD) {
 			// adjust a sort (changes grouping, so it must be for this driver to combining sort
 			if (in.getLocalStrategy() == LocalStrategy.SORT) {
-				if (!in.getLocalStrategyKeys().isValidUnorderedPrefix(this.keys)) {
-					throw new RuntimeException("Bug: Inconsistent sort for group strategy.");
-				}
 				in.setLocalStrategy(LocalStrategy.COMBININGSORT, in.getLocalStrategyKeys(), in.getLocalStrategySortOrder());
 			}
 			return new SingleInputPlanNode(node, "Reduce("+node.getPactContract().getName()+")", in, DriverStrategy.SORTED_GROUP_REDUCE, this.keyList);


--- /tmp/Arja_Bug_dot_jar_Flink_45fb6d82/flink-compiler/src/main/java/org/apache/flink/compiler/dag/OptimizerNode.java	2018-12-29 12:17:32.019749000 -0500
+++ /tmp/Arja_Bug_dot_jar_Flink_45fb6d82/patches_dbhn/Patch_1898/patched/tmp/Arja_Bug_dot_jar_Flink_45fb6d82/flink-compiler/src/main/java/org/apache/flink/compiler/dag/OptimizerNode.java	2018-12-29 12:32:52.394310323 -0500
@@ -1178,8 +1178,6 @@
 		StringBuilder bld = new StringBuilder();
 
 		bld.append(getName());
-		bld.append(" (").append(getPactContract().getName()).append(") ");
-
 		int i = 1; 
 		for (PactConnection conn : getIncomingConnections()) {
 			bld.append('(').append(i++).append(":").append(conn.getShipStrategy() == null ? "null" : conn.getShipStrategy().name()).append(')');


--- /tmp/Arja_Bug_dot_jar_Flink_45fb6d82/flink-compiler/src/main/java/org/apache/flink/compiler/dag/PartitionNode.java	2018-12-29 12:17:32.019749000 -0500
+++ /tmp/Arja_Bug_dot_jar_Flink_45fb6d82/patches_dbhn/Patch_1898/patched/tmp/Arja_Bug_dot_jar_Flink_45fb6d82/flink-compiler/src/main/java/org/apache/flink/compiler/dag/PartitionNode.java	2018-12-29 12:32:52.394310323 -0500
@@ -115,7 +115,7 @@
 				rgps.setForceRebalancing();
 				break;
 			case CUSTOM:
-				rgps.setCustomPartitioned(this.keys, this.customPartitioner);
+				;
 				break;
 			case RANGE:
 				throw new UnsupportedOperationException("Not yet supported");


--- /tmp/Arja_Bug_dot_jar_Flink_45fb6d82/flink-compiler/src/main/java/org/apache/flink/compiler/costs/Costs.java	2018-12-29 12:17:32.007749000 -0500
+++ /tmp/Arja_Bug_dot_jar_Flink_45fb6d82/patches_dbhn/Patch_1898/patched/tmp/Arja_Bug_dot_jar_Flink_45fb6d82/flink-compiler/src/main/java/org/apache/flink/compiler/costs/Costs.java	2018-12-29 12:32:52.398310315 -0500
@@ -418,9 +418,6 @@
 		
 		// next, check the disk cost. again, if we have actual costs on both, use them, otherwise use the heuristic costs.
 		if (this.diskCost != UNKNOWN && o.diskCost != UNKNOWN) {
-			if (this.diskCost != o.diskCost) {
-				return this.diskCost < o.diskCost ? -1 : 1;
-			}
 		} else if (this.heuristicDiskCost < o.heuristicDiskCost) {
 			return -1;
 		} else if (this.heuristicDiskCost > o.heuristicDiskCost) {


