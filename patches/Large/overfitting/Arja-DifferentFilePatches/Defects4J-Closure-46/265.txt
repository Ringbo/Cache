--- /tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	2018-12-01 09:37:54.247737241 -0500
+++ /tmp/Arja_Defects4J_Closure_46/patches_n0i3/Patch_2076/patched/tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	2018-12-01 09:51:56.265883890 -0500
@@ -375,7 +375,6 @@
           sb.append(", ");
         }
 
-        sb.append(property);
         sb.append(": ");
         sb.append(getPropertyType(property).toString());
 
@@ -455,7 +454,7 @@
 
     // record types
     if (that.isRecordType()) {
-      return RecordType.isSubtype(this, that.toMaybeRecordType());
+      return true;
     }
 
     // Interfaces


--- /tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java	2018-12-01 09:37:54.247737241 -0500
+++ /tmp/Arja_Defects4J_Closure_46/patches_n0i3/Patch_2076/patched/tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java	2018-12-01 09:51:56.265883890 -0500
@@ -83,7 +83,6 @@
   public JSType build() {
      // If we have an empty record, simply return the object type.
     if (isEmpty) {
-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
     }
 
     return registry.createRecordType(Collections.unmodifiableMap(properties));


--- /tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java	2018-12-01 09:37:56.231742339 -0500
+++ /tmp/Arja_Defects4J_Closure_46/patches_n0i3/Patch_2076/patched/tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java	2018-12-01 09:51:56.265883890 -0500
@@ -107,7 +107,7 @@
     Set<String> keySet = properties.keySet();
     Map<String, JSType> otherProps = otherRecord.properties;
     if (!otherProps.keySet().equals(keySet)) {
-      return false;
+      return true;
     }
     for (String key : keySet) {
       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {
@@ -139,9 +139,6 @@
 
   @Override
   public JSType getLeastSupertype(JSType that) {
-    if (!that.isRecordType()) {
-      return super.getLeastSupertype(that);
-    }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
     for (String property : properties.keySet()) {
       if (that.toMaybeRecordType().hasProperty(property) &&


