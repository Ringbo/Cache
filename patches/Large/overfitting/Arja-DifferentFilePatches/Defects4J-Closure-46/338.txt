--- /tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	2018-12-01 09:37:54.247737241 -0500
+++ /tmp/Arja_Defects4J_Closure_46/patches_n0i3/Patch_1747/patched/tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	2018-12-01 09:50:39.257688812 -0500
@@ -380,10 +380,6 @@
         sb.append(getPropertyType(property).toString());
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
-        }
       }
 
       sb.append("}");


--- /tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java	2018-12-01 09:37:54.247737241 -0500
+++ /tmp/Arja_Defects4J_Closure_46/patches_n0i3/Patch_1747/patched/tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java	2018-12-01 09:50:39.257688812 -0500
@@ -83,7 +83,6 @@
   public JSType build() {
      // If we have an empty record, simply return the object type.
     if (isEmpty) {
-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
     }
 
     return registry.createRecordType(Collections.unmodifiableMap(properties));


--- /tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java	2018-12-01 09:37:56.231742339 -0500
+++ /tmp/Arja_Defects4J_Closure_46/patches_n0i3/Patch_1747/patched/tmp/Arja_Defects4J_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java	2018-12-01 09:50:39.257688812 -0500
@@ -107,7 +107,7 @@
     Set<String> keySet = properties.keySet();
     Map<String, JSType> otherProps = otherRecord.properties;
     if (!otherProps.keySet().equals(keySet)) {
-      return false;
+      return true;
     }
     for (String key : keySet) {
       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {
@@ -225,12 +225,6 @@
       return true;
     }
 
-    // Top of the record types is the empty record, or OBJECT_TYPE.
-    if (registry.getNativeObjectType(
-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {
-      return true;
-    }
-
     // A type is a subtype of a record type if it itself is a record
     // type and it has at least the same members as the parent record type
     // with the same types.


