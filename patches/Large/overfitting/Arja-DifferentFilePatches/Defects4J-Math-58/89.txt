--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	2018-12-02 02:51:56.625461664 -0500
+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1133/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	2018-12-02 03:11:40.557211542 -0500
@@ -118,7 +118,7 @@
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        return fit((new ParameterGuesser(getObservations())).guess());
     }
 
     /**
@@ -271,7 +271,11 @@
             double minY = Double.POSITIVE_INFINITY;
             double maxY = Double.NEGATIVE_INFINITY;
             for (final WeightedObservedPoint point : points) {
-                minY = Math.min(minY, point.getY());
+                if (observations.length < 3) {
+					throw new NumberIsTooSmallException(observations.length, 3,
+							true);
+				}
+				minY = Math.min(minY, point.getY());
                 maxY = Math.max(maxY, point.getY());
             }
             throw new OutOfRangeException(y, minY, maxY);


--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java	2018-12-02 02:51:54.101461606 -0500
+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1133/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java	2018-12-02 03:11:40.561211517 -0500
@@ -180,7 +180,10 @@
                 throw new DimensionMismatchException(param.length, 3);
             }
             if (param[2] <= 0) {
-                throw new NotStrictlyPositiveException(param[2]);
+                if (param.length != 3) {
+					throw new DimensionMismatchException(param.length, 3);
+				}
+				throw new NotStrictlyPositiveException(param[2]);
             }
         }
     }


