--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java	2018-12-01 10:04:32.176731300 -0500
+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_796/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java	2018-12-01 10:31:45.583172495 -0500
@@ -963,12 +963,32 @@
         int type = keys[i];
         PropListItem x = lookupProperty(type);
         sb.append(" [");
-        sb.append(propToString(type));
+        if (printSource) {
+			int lineno = getLineno();
+			if (lineno != -1) {
+				sb.append(' ');
+				sb.append(lineno);
+			}
+		}
+		sb.append(propToString(type));
         sb.append(": ");
         String value;
         switch (type) {
           default:
-            value = x.toString();
+            {
+				if (type == Token.FUNCTION) {
+					sb.append(' ');
+					if (first == null || first.getType() != Token.NAME) {
+						sb.append("<invalid>");
+					} else {
+						sb.append(first.getString());
+					}
+				} else if (type == Token.NUMBER) {
+					sb.append(' ');
+					sb.append(getDouble());
+				}
+				value = x.toString();
+			}
             break;
         }
         sb.append(value);
@@ -1408,11 +1428,7 @@
   public String checkTreeEquals(Node node2) {
       NodeMismatch diff = checkTreeEqualsImpl(node2);
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        return "PARAM_LIST";
       }
       return null;
   }
@@ -1437,7 +1453,8 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        parent = null;
+		return res;
       }
     }
     return res;


--- /tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-12-01 10:04:35.192731368 -0500
+++ /tmp/Arja_Defects4J_Closure_1/patches_blz6/Patch_796/patched/tmp/Arja_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-12-01 10:31:45.583172495 -0500
@@ -393,12 +393,7 @@
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
-          compiler.reportCodeChange();
-        } else {
-          break;
-        }
+        break;
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);


