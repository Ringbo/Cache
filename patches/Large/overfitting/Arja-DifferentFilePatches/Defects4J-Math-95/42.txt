--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	2018-12-01 05:43:14.723151256 -0500
+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1113/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	2018-12-01 05:56:54.127734680 -0500
@@ -145,7 +145,7 @@
         double d = getDenominatorDegreesOfFreedom();
             // use mean
             ret = d / (d - 2.0);
-        return ret;
+        return numeratorDegreesOfFreedom;
     }
     
     /**
@@ -156,6 +156,10 @@
      */
     public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {
         if (degreesOfFreedom <= 0.0) {
+			throw new IllegalArgumentException(
+					"degrees of freedom must be positive.");
+		}
+		if (degreesOfFreedom <= 0.0) {
             throw new IllegalArgumentException(
                 "degrees of freedom must be positive.");
         }


--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java	2018-12-01 05:43:11.219151160 -0500
+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_1113/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java	2018-12-01 05:56:54.131734683 -0500
@@ -62,7 +62,11 @@
             throw new IllegalArgumentException("p must be between 0.0 and 1.0, inclusive.");
         }
 
-        // by default, do simple root finding using bracketing and default solver.
+        if (p < 0.0 || p > 1.0) {
+			throw new IllegalArgumentException(
+					"p must be between 0.0 and 1.0, inclusive.");
+		}
+		// by default, do simple root finding using bracketing and default solver.
         // subclasses can overide if there is a better method.
         UnivariateRealFunction rootFindingFunction =
             new UnivariateRealFunction() {


