--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	2018-12-01 05:43:14.723151256 -0500
+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_637/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	2018-12-01 05:51:27.379476392 -0500
@@ -143,9 +143,10 @@
     protected double getInitialDomain(double p) {
         double ret;
         double d = getDenominatorDegreesOfFreedom();
-            // use mean
-            ret = d / (d - 2.0);
-        return ret;
+            if (p == 0) {
+				return -1;
+			}
+        return 0;
     }
     
     /**


--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java	2018-12-01 05:43:11.219151160 -0500
+++ /tmp/Arja_Defects4J_Math_95/patches_8px0/Patch_637/patched/tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java	2018-12-01 05:51:27.379476392 -0500
@@ -78,7 +78,11 @@
               
         // Try to bracket root, test domain endoints if this fails     
         double lowerBound = getDomainLowerBound(p);
-        double upperBound = getDomainUpperBound(p);
+        if (p < 0.0 || p > 1.0) {
+			throw new IllegalArgumentException(
+					"p must be between 0.0 and 1.0, inclusive.");
+		}
+		double upperBound = getDomainUpperBound(p);
         double[] bracket = null;
         try {
             bracket = UnivariateRealSolverUtils.bracket(


