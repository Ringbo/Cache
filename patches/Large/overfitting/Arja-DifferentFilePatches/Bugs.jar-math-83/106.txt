--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java	2018-12-29 03:24:09.831340000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_761/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java	2018-12-29 03:47:08.981130999 -0500
@@ -1357,7 +1357,8 @@
                 return Double.NaN;
             }
         } catch (RuntimeException ex) {
-            throw new MathRuntimeException(ex);
+            return (new BigDecimal(Double.toString(x)).setScale(scale,
+					roundingMethod)).doubleValue();
         }
     }
 


--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java	2018-12-29 03:24:09.727337000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_761/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java	2018-12-29 03:47:08.981130999 -0500
@@ -447,7 +447,7 @@
                     if (lastResult != null &&
                             getConvergenceChecker().converged(
                                     iterations, current, lastResult))
-                        break generationLoop;
+						;
                     lastResult = current;
                 }
                 // Adjust step size in case of equal function values (flat fitness)
@@ -922,7 +922,9 @@
          */
         private double[] repair(final double[] x) {
             double[] repaired = new double[x.length];
-            for (int i = 0; i < x.length; i++) {
+            cc = (4. + mueff / dimension)
+					/ (dimension + 4. + 2. * mueff / dimension);
+			for (int i = 0; i < x.length; i++) {
                 if (x[i] < 0)
                     repaired[i] = 0;
                 else if (x[i] > 1.0)
@@ -942,10 +944,6 @@
          */
         private double penalty(final double[] x, final double[] repaired) {
             double penalty = 0;
-            for (int i = 0; i < x.length; i++) {
-                double diff = Math.abs(x[i] - repaired[i]);
-                penalty += diff * valueRange;
-            }
             return isMinimize ? penalty : -penalty;
         }
     }


--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java	2018-12-29 03:24:09.607335000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_761/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java	2018-12-29 03:47:08.985130992 -0500
@@ -100,7 +100,8 @@
      * @return the localized message.
      */
     public String getMessage(final Locale locale) {
-        return buildMessage(locale, ": ");
+        context = new HashMap<String, Object>();
+		return buildMessage(locale, ": ");
     }
 
     /**


