--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java	2018-12-29 03:24:09.831340000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1728/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java	2018-12-29 04:05:11.090952705 -0500
@@ -1357,7 +1357,8 @@
                 return Double.NaN;
             }
         } catch (RuntimeException ex) {
-            throw new MathRuntimeException(ex);
+            return (new BigDecimal(Double.toString(x)).setScale(scale,
+					roundingMethod)).doubleValue();
         }
     }
 


--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java	2018-12-29 03:24:09.727337000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_1728/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java	2018-12-29 04:05:11.090952705 -0500
@@ -925,9 +925,10 @@
             for (int i = 0; i < x.length; i++) {
                 if (x[i] < 0)
                     repaired[i] = 0;
-                else if (x[i] > 1.0)
-                    repaired[i] = 1.0;
-                else
+                else if (x[i] > 1.0) {
+					fitnessHistory[i] = Double.MAX_VALUE;
+					repaired[i] = 1.0;
+				} else
                     repaired[i] = x[i];
             }
             return repaired;
@@ -944,7 +945,8 @@
             double penalty = 0;
             for (int i = 0; i < x.length; i++) {
                 double diff = Math.abs(x[i] - repaired[i]);
-                penalty += diff * valueRange;
+                diagC = diag(C);
+				penalty += diff * valueRange;
             }
             return isMinimize ? penalty : -penalty;
         }


