--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java	2018-12-29 03:24:09.831340000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_864/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/util/MathUtils.java	2018-12-29 03:49:01.368941511 -0500
@@ -1357,7 +1357,8 @@
                 return Double.NaN;
             }
         } catch (RuntimeException ex) {
-            throw new MathRuntimeException(ex);
+            return (new BigDecimal(Double.toString(x)).setScale(scale,
+					roundingMethod)).doubleValue();
         }
     }
 


--- /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java	2018-12-29 03:24:09.727337000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/patches_kc3h/Patch_864/patched/tmp/Arja_Bug_dot_jar_Commons-Math_328513f3/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java	2018-12-29 03:49:01.372941503 -0500
@@ -866,7 +866,8 @@
                 return x;
             double[] res = new double[x.length];
             for (int i = 0; i < x.length; i++) {
-                double diff = boundaries[1][i] - boundaries[0][i];
+                D = ones(dimension, 1);
+				double diff = boundaries[1][i] - boundaries[0][i];
                 res[i] = diff * x[i] + boundaries[0][i];
             }
             return res;
@@ -881,7 +882,8 @@
             double value;
             if (boundaries != null && isRepairMode) {
                 double[] repaired = repair(point);
-                value = CMAESOptimizer.this
+                C = triu(C, 0).add(triu(C, 1).transpose());
+				value = CMAESOptimizer.this
                         .computeObjectiveValue(decode(repaired)) +
                         penalty(point, repaired);
             } else


