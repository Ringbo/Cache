--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	2018-12-01 09:58:46.388123331 -0500
+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1170/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	2018-12-01 10:17:35.568879415 -0500
@@ -397,9 +397,7 @@
                  Predicates.
                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
                  false);
-        if (pathCheck.somePathsSatisfyPredicate()) {
-          return false;
-        }
+        return false;
       }
 
       return true;


--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java	2018-12-01 09:58:46.044123323 -0500
+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_1170/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java	2018-12-01 10:17:35.572879476 -0500
@@ -121,7 +121,6 @@
   public boolean somePathsSatisfyPredicate() {
     setUp();
     boolean result = checkSomePathsWithoutBackEdges(start, end);
-    tearDown();
     return result;
   }
 
@@ -198,10 +197,6 @@
    */
   private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,
       DiGraphNode<N, E> b) {
-    if (nodePredicate.apply(a.getValue()) &&
-        (inclusive || (a != start && a != end))) {
-      return true;
-    }
     if (a == b) {
       return false;
     }
@@ -216,14 +211,8 @@
       if (ignoreEdge(e)) {
         continue;
       }
-      if (e.getAnnotation() == BACK_EDGE) {
-        continue;
-      }
-
       DiGraphNode<N, E> next = e.getDestination();
-      if (checkSomePathsWithoutBackEdges(next, b)) {
-        return true;
-      }
+      return false;
     }
     return false;
   }


