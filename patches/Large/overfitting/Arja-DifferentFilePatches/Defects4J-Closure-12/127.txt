--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	2018-12-01 09:58:46.388123331 -0500
+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_569/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	2018-12-01 10:11:13.886788940 -0500
@@ -397,9 +397,7 @@
                  Predicates.
                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
                  false);
-        if (pathCheck.somePathsSatisfyPredicate()) {
-          return false;
-        }
+        return false;
       }
 
       return true;


--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java	2018-12-01 09:58:46.044123323 -0500
+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_569/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java	2018-12-01 10:11:13.886788940 -0500
@@ -206,11 +206,6 @@
       return false;
     }
     for (DiGraphEdge<N, E> e : a.getOutEdges()) {
-      // Once we visited that edge once, we no longer need to
-      // re-visit it again.
-      if (e.getAnnotation() == VISITED_EDGE) {
-        continue;
-      }
       e.setAnnotation(VISITED_EDGE);
 
       if (ignoreEdge(e)) {


--- /tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java	2018-12-01 09:58:46.416123332 -0500
+++ /tmp/Arja_Defects4J_Closure_12/patches_gf7j/Patch_569/patched/tmp/Arja_Defects4J_Closure_12/src/com/google/javascript/rhino/Node.java	2018-12-01 10:11:13.890789001 -0500
@@ -1459,7 +1459,7 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        sourcePosition = -1;
       }
     }
     return res;


