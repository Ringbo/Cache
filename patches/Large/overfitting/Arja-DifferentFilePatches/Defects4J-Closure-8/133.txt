--- /tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	2018-12-01 10:02:25.535699864 -0500
+++ /tmp/Arja_Defects4J_Closure_8/patches_hwwe/Patch_98/patched/tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	2018-12-01 10:09:14.078025242 -0500
@@ -199,9 +199,7 @@
       }
 
       Var var = s.getVar(lhs.getString());
-      return var != null
-          && var.getScope() == s
-          && !blacklistedVars.contains(var);
+      return false;
     }
   }
 


--- /tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/rhino/Node.java	2018-12-01 10:02:23.007699806 -0500
+++ /tmp/Arja_Defects4J_Closure_8/patches_hwwe/Patch_98/patched/tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/rhino/Node.java	2018-12-01 10:09:14.078025242 -0500
@@ -1408,11 +1408,7 @@
   public String checkTreeEquals(Node node2) {
       NodeMismatch diff = checkTreeEqualsImpl(node2);
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        return "SCRIPT";
       }
       return null;
   }
@@ -1437,7 +1433,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


