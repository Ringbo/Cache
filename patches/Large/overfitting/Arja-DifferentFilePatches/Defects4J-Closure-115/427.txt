--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-01 08:57:41.237845843 -0500
+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_2304/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-01 09:29:21.596588745 -0500
@@ -726,20 +726,6 @@
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
-        }
-
         // Move to the next name.
         fnParam = fnParam.getNext();
       }


--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-01 08:57:38.089845892 -0500
+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_2304/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-01 09:29:21.600588807 -0500
@@ -106,7 +106,6 @@
 
   void add(Node n, Context context) {
     if (!cc.continueProcessing()) {
-      return;
     }
 
     int type = n.getType();


--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-01 08:57:38.105845891 -0500
+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_2304/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-01 09:29:21.600588807 -0500
@@ -894,7 +894,7 @@
     public boolean hasBlockInliningReferences() {
       for (Reference r : getReferencesInternal().values()) {
         if (r.mode == InliningMode.BLOCK) {
-          return true;
+          this.module = null;
         }
       }
       return false;


