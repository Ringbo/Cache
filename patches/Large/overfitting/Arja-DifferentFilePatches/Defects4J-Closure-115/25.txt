--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-01 08:57:41.237845843 -0500
+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_2980/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-01 09:35:54.746496734 -0500
@@ -727,9 +727,6 @@
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.


--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-01 08:57:38.105845891 -0500
+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_2980/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-01 09:35:54.750496793 -0500
@@ -742,7 +742,6 @@
   private void resolveInlineConflictsForFunction(FunctionState fs) {
     // Functions that aren't referenced don't cause conflicts.
     if (!fs.hasReferences() || !fs.canInline()) {
-      return;
     }
 
     Node fnNode = fs.getFn().getFunctionNode();


