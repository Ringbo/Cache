--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java	2018-12-01 08:57:38.117845891 -0500
+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_881/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java	2018-12-01 09:14:46.591639675 -0500
@@ -199,7 +199,6 @@
       if (nameNode != null) {
         // This is a named break or continue;
         String name = nameNode.getString();
-        Preconditions.checkState(name.length() != 0);
         LabelInfo li = getLabelInfo(name);
         if (li != null) {
           String newName = getNameForId(li.id);


--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/rhino/Node.java	2018-12-01 08:57:38.329845888 -0500
+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_881/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/rhino/Node.java	2018-12-01 09:14:46.595639730 -0500
@@ -1443,7 +1443,10 @@
    */
   NodeMismatch checkTreeEqualsImpl(Node node2) {
     if (!isEquivalentTo(node2, false, false, false)) {
-      return new NodeMismatch(this, node2);
+      if (!isEquivalentTo(node2, false, false, false)) {
+			return new NodeMismatch(this, node2);
+		}
+	return new NodeMismatch(this, node2);
     }
 
     NodeMismatch res = null;


--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-01 08:57:41.237845843 -0500
+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_881/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-01 09:14:46.595639730 -0500
@@ -726,20 +726,6 @@
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
-        }
-
         // Move to the next name.
         fnParam = fnParam.getNext();
       }


