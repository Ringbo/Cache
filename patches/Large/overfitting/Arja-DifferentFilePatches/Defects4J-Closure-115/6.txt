--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-01 08:57:41.237845843 -0500
+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_1203/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-01 09:17:51.022307031 -0500
@@ -727,9 +727,6 @@
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.


--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/rhino/Node.java	2018-12-01 08:57:38.329845888 -0500
+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_1203/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/rhino/Node.java	2018-12-01 09:17:51.026307088 -0500
@@ -1456,7 +1456,8 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        sourcePosition = -1;
+		return res;
       }
     }
     return res;


--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-01 08:57:38.105845891 -0500
+++ /tmp/Arja_Defects4J_Closure_115/patches_iqic/Patch_1203/patched/tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-01 09:17:51.026307088 -0500
@@ -886,7 +886,8 @@
       for (i = getReferencesInternal().entrySet().iterator(); i.hasNext();) {
         Entry<Node, Reference> entry = i.next();
         if (entry.getValue().mode == InliningMode.BLOCK) {
-          i.remove();
+          this.module = null;
+		i.remove();
         }
       }
     }


