--- /tmp/Arja_Defects4J_Mockito_10/src/org/mockito/internal/stubbing/answers/ClonesArguments.java	2018-12-01 08:41:42.637288160 -0500
+++ /tmp/Arja_Defects4J_Mockito_10/patches_jed8/Patch_59/patched/tmp/Arja_Defects4J_Mockito_10/src/org/mockito/internal/stubbing/answers/ClonesArguments.java	2018-12-01 08:44:42.108513093 -0500
@@ -15,12 +15,6 @@
 public class ClonesArguments implements Answer<Object> {
     public Object answer(InvocationOnMock invocation) throws Throwable {
         Object[] arguments = invocation.getArguments();
-        for (int i = 0; i < arguments.length; i++) {
-            Object from = arguments[i];
-            Object newInstance = ObjenesisHelper.newInstance(from.getClass());
-            new LenientCopyTool().copyToRealObject(from, newInstance);
-            arguments[i] = newInstance;
-        }
         return new ReturnsEmptyValues().answer(invocation);
     }
 }
\ No newline at end of file


--- /tmp/Arja_Defects4J_Mockito_10/src/org/mockito/internal/util/MockCreationValidator.java	2018-12-01 08:41:42.641290161 -0500
+++ /tmp/Arja_Defects4J_Mockito_10/patches_jed8/Patch_59/patched/tmp/Arja_Defects4J_Mockito_10/src/org/mockito/internal/util/MockCreationValidator.java	2018-12-01 08:44:42.112513093 -0500
@@ -60,7 +60,6 @@
                 && !(Serializable.class.isAssignableFrom(classToMock))
                 && Constructors.noArgConstructorOf(classToMock) == null
                 ) {
-            new Reporter().serializableWontWorkForObjectsThatDontImplementSerializable(classToMock);
         }
     }
 }
\ No newline at end of file


--- /tmp/Arja_Defects4J_Mockito_10/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java	2018-12-01 08:41:46.327132261 -0500
+++ /tmp/Arja_Defects4J_Mockito_10/patches_jed8/Patch_59/patched/tmp/Arja_Defects4J_Mockito_10/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java	2018-12-01 08:44:42.112513093 -0500
@@ -59,13 +59,6 @@
         InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
         InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
 
-        // matches invocation for verification
-        for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
-            if (container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
-                return stubbedInvocationMatcher.answer(invocation);
-            }
-        }
-
         // record deep stub answer
         return recordDeepStubAnswer(
                 newDeepStubMock(returnTypeGenericMetadata),


