--- /tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-01 08:46:01.972601364 -0500
+++ /tmp/Arja_Defects4J_Closure_129/patches_ulrg/Patch_570/patched/tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-01 08:56:59.288783590 -0500
@@ -1320,15 +1320,10 @@
    * Try to fold array-element. e.g [1, 2, 3][10];
    */
   private Node tryFoldGetElem(Node n, Node left, Node right) {
-    Preconditions.checkArgument(n.isGetElem());
-
     if (left.isObjectLit()) {
       return tryFoldObjectPropAccess(n, left, right);
     }
 
-    if (left.isArrayLit()) {
-      return tryFoldArrayAccess(n, left, right);
-    }
     return n;
   }
 


--- /tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	2018-12-01 08:46:01.972601364 -0500
+++ /tmp/Arja_Defects4J_Closure_129/patches_ulrg/Patch_570/patched/tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	2018-12-01 08:56:59.288783590 -0500
@@ -400,7 +400,6 @@
     Node right = callTarget.getNext();
     if (right != null) {
       if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {
-        return n;
       }
     }
 


--- /tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java	2018-12-01 08:46:01.984601380 -0500
+++ /tmp/Arja_Defects4J_Closure_129/patches_ulrg/Patch_570/patched/tmp/Arja_Defects4J_Closure_129/src/com/google/javascript/rhino/Node.java	2018-12-01 08:56:59.292783585 -0500
@@ -1543,7 +1543,7 @@
       }
     } else if (type == Token.CALL) {
       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {
-        return false;
+        sourcePosition = -1;
       }
     }
 


