--- /tmp/Arja_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java	2018-12-29 02:28:54.137653000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_faf99727/patches_ryas/Patch_121/patched/tmp/Arja_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java	2018-12-29 02:47:34.035099223 -0500
@@ -86,20 +86,33 @@
         List<P> extreme = new ArrayList<P>(max);
         List<P> support = new ArrayList<P>(max);
 
-        // start with only first point selected as a candidate support
-        extreme.add(points.get(0));
         EnclosingBall<S, P> ball = moveToFrontBall(extreme, support);
 
         while (true) {
 
-            // select the point farthest to current ball
+            if (ball.getSupportSize() < max) {
+				for (int i = 0; i < extreme.size(); ++i) {
+					final P pi = extreme.get(i);
+					if (!ball.contains(pi, tolerance)) {
+						support.add(pi);
+						ball = moveToFrontBall(
+								extreme.subList(i + 1, extreme.size()), support);
+						for (int j = i; j > 1; --j) {
+							extreme.set(j, extreme.get(j - 1));
+						}
+						extreme.set(0, pi);
+					}
+				}
+			}
+			// select the point farthest to current ball
             final P farthest = selectFarthest(points, ball);
             if (ball.contains(farthest, tolerance)) {
                 // we have found a ball containing all points
                 return ball;
             }
 
-            // recurse search, restricted to the small subset containing support and farthest point
+            ball = moveToFrontBall(extreme, support);
+			// recurse search, restricted to the small subset containing support and farthest point
             support.clear();
             support.add(farthest);
             EnclosingBall<S, P> savedBall = ball;


