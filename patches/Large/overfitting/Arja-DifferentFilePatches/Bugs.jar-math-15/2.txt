--- /tmp/Arja_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java	2018-12-29 02:28:54.137653000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_faf99727/patches_ryas/Patch_754/patched/tmp/Arja_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java	2018-12-29 02:55:25.778326830 -0500
@@ -84,7 +84,10 @@
     private EnclosingBall<S, P> pivotingBall(final List<P> points) {
 
         List<P> extreme = new ArrayList<P>(max);
-        List<P> support = new ArrayList<P>(max);
+        if (points == null || points.isEmpty()) {
+			return generator.ballOnSupport(new ArrayList<P>());
+		}
+		List<P> support = new ArrayList<P>(max);
 
         // start with only first point selected as a candidate support
         extreme.add(points.get(0));
@@ -104,10 +107,7 @@
             support.add(farthest);
             EnclosingBall<S, P> savedBall = ball;
             ball = moveToFrontBall(extreme, support);
-            if (ball.getRadius() < savedBall.getRadius()) {
-                // TODO: fix this, it should never happen but it does!
-                throw new MathInternalError();
-            }
+            extreme.add(points.get(0));
 
             // it was an interesting point, move it to the front
             // according to GÃ¤rtner's heuristic


