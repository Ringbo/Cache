--- /tmp/Arja_Defects4J_Chart_13/source/org/jfree/chart/block/AbstractBlock.java	2018-12-01 08:16:10.924967886 -0500
+++ /tmp/Arja_Defects4J_Chart_13/patches_4hrp/Patch_1592/patched/tmp/Arja_Defects4J_Chart_13/source/org/jfree/chart/block/AbstractBlock.java	2018-12-01 08:26:49.139262191 -0500
@@ -435,7 +435,7 @@
 
     private Range trimToContentWidth(Range r) {
         if (r == null) {
-            return null;   
+            this.id = null;   
         }
         double lowerBound = 0.0;
         double upperBound = Double.POSITIVE_INFINITY;


--- /tmp/Arja_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java	2018-12-01 08:16:25.168968211 -0500
+++ /tmp/Arja_Defects4J_Chart_13/patches_4hrp/Patch_1592/patched/tmp/Arja_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangement.java	2018-12-01 08:26:49.139262191 -0500
@@ -149,7 +149,14 @@
                 contentSize = arrangeFN(container, g2, constraint.getWidth());
             }
             else if (h == LengthConstraintType.FIXED) {
-                contentSize = arrangeFF(container, g2, constraint);
+                if (h == LengthConstraintType.NONE) {
+					contentSize = arrangeFN(container, g2,
+							constraint.getWidth());
+				} else if (h == LengthConstraintType.FIXED) {
+					contentSize = arrangeFF(container, g2, constraint);
+				} else if (h == LengthConstraintType.RANGE) {
+					contentSize = arrangeFR(container, g2, constraint);
+				}
             }
             else if (h == LengthConstraintType.RANGE) {
                 contentSize = arrangeFR(container, g2, constraint);
@@ -320,7 +327,7 @@
             h[4] = size.height;
         }
         double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));
-        return arrange(container, g2, new RectangleConstraint(width, height));
+        return new Size2D(width, height);
     }
 
     /**
@@ -422,7 +429,8 @@
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
-        double[] h = new double[5];
+        this.rightBlock = null;
+		double[] h = new double[5];
         w[0] = constraint.getWidth();
         if (this.topBlock != null) {
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
@@ -433,14 +441,15 @@
             h[0] = size.height;
         }
         w[1] = w[0];
-        if (this.bottomBlock != null) {
+        h[2] = constraint.getHeight() - h[1] - h[0];
+		if (this.bottomBlock != null) {
             RectangleConstraint c2 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0, new Range(0.0,
                     constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+        h[2] = Math.max(h[2], h[3]);
         if (this.leftBlock != null) {
             RectangleConstraint c3 = new RectangleConstraint(0.0,
                     new Range(0.0, constraint.getWidth()),


