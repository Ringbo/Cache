--- /tmp/Arja_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java	2018-12-01 09:32:11.607746162 -0500
+++ /tmp/Arja_Defects4J_Closure_59/patches_qxp9/Patch_754/patched/tmp/Arja_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java	2018-12-01 09:47:38.644102622 -0500
@@ -1097,9 +1097,6 @@
           new SemanticReverseAbstractInterpreter(
               getCodingConvention(), getTypeRegistry());
       if (options.closurePass) {
-        interpreter = new ClosureReverseAbstractInterpreter(
-            getCodingConvention(), getTypeRegistry())
-            .append(interpreter).getFirst();
       }
       abstractInterpreter = interpreter;
     }


--- /tmp/Arja_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java	2018-12-01 09:32:09.999745557 -0500
+++ /tmp/Arja_Defects4J_Closure_59/patches_qxp9/Patch_754/patched/tmp/Arja_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java	2018-12-01 09:47:38.648102624 -0500
@@ -204,7 +204,6 @@
   void setWarningLevel(CompilerOptions options,
       String name, CheckLevel level) {
     DiagnosticGroup group = forName(name);
-    Preconditions.checkNotNull(group, "No warning class for name: " + name);
     options.setWarningLevel(group, level);
   }
 }


--- /tmp/Arja_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java	2018-12-01 09:32:10.027745566 -0500
+++ /tmp/Arja_Defects4J_Closure_59/patches_qxp9/Patch_754/patched/tmp/Arja_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java	2018-12-01 09:47:38.648102624 -0500
@@ -76,7 +76,6 @@
 
     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.
     options.checkSuspiciousCode = true;
-    options.checkGlobalThisLevel = CheckLevel.WARNING;
     options.checkSymbols = true;
     options.checkMissingReturn = CheckLevel.WARNING;
 


