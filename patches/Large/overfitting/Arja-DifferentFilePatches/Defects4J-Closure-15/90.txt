--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	2018-12-01 09:57:35.447088269 -0500
+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_892/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	2018-12-01 10:14:55.885149880 -0500
@@ -394,7 +394,6 @@
       } else if (defParent.isVar()) {
         Node rhs = def.getLastChild();
         def.removeChild(rhs);
-        useParent.replaceChild(use, rhs);
       } else {
         Preconditions.checkState(false, "No other definitions can be inlined.");
       }


--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java	2018-12-01 09:57:33.379088222 -0500
+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_892/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java	2018-12-01 10:14:55.885149880 -0500
@@ -205,26 +205,6 @@
     if (a == b) {
       return false;
     }
-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {
-      // Once we visited that edge once, we no longer need to
-      // re-visit it again.
-      if (e.getAnnotation() == VISITED_EDGE) {
-        continue;
-      }
-      e.setAnnotation(VISITED_EDGE);
-
-      if (ignoreEdge(e)) {
-        continue;
-      }
-      if (e.getAnnotation() == BACK_EDGE) {
-        continue;
-      }
-
-      DiGraphNode<N, E> next = e.getDestination();
-      if (checkSomePathsWithoutBackEdges(next, b)) {
-        return true;
-      }
-    }
     return false;
   }
 }


--- /tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java	2018-12-01 09:57:33.791088231 -0500
+++ /tmp/Arja_Defects4J_Closure_15/patches_tche/Patch_892/patched/tmp/Arja_Defects4J_Closure_15/src/com/google/javascript/rhino/Node.java	2018-12-01 10:14:55.885149880 -0500
@@ -1456,7 +1456,7 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        return null;
       }
     }
     return res;


