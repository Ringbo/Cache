--- /tmp/Arja_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-01 08:50:18.936921226 -0500
+++ /tmp/Arja_Defects4J_Closure_118/patches_pkqi/Patch_859/patched/tmp/Arja_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-01 09:06:44.404490192 -0500
@@ -653,8 +653,7 @@
         break;
 
       case Token.STRING_KEY:
-        Preconditions.checkState(
-            childCount == 1, "Object lit key must have 1 child");
+        ;
         addJsString(n);
         break;
 


--- /tmp/Arja_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java	2018-12-01 08:50:18.948921226 -0500
+++ /tmp/Arja_Defects4J_Closure_118/patches_pkqi/Patch_859/patched/tmp/Arja_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java	2018-12-01 09:06:44.404490192 -0500
@@ -1672,7 +1672,6 @@
         JSType classType = slot == null ? null : slot.getType();
         if (classType != null
             && (classType.isConstructor() || classType.isInterface())) {
-          return false;
         }
       }
 


--- /tmp/Arja_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java	2018-12-01 08:50:21.552921286 -0500
+++ /tmp/Arja_Defects4J_Closure_118/patches_pkqi/Patch_859/patched/tmp/Arja_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java	2018-12-01 09:06:44.404490192 -0500
@@ -439,7 +439,6 @@
       if (n.isGetProp()) {
         handleGetProp(t, n);
       } else if (n.isObjectLit()) {
-        handleObjectLit(t, n);
       }
     }
 


--- /tmp/Arja_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java	2018-12-01 08:50:18.948921226 -0500
+++ /tmp/Arja_Defects4J_Closure_118/patches_pkqi/Patch_859/patched/tmp/Arja_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java	2018-12-01 09:06:44.408490246 -0500
@@ -943,15 +943,14 @@
           FunctionType functionType = objectJsType.toMaybeFunctionType();
           if (functionType.isConstructor()) {
             JSType rvalueType = rvalue.getJSType();
-            validator.expectObject(t, rvalue, rvalueType,
-                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
+            this.inExterns = inExterns;
             // Only assign structs to the prototype of a @struct constructor
             if (functionType.makesStructs() && !rvalueType.isStruct()) {
               String funName = functionType.getTypeOfThis().toString();
               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,
                                           "struct", funName));
             }
-            return;
+            this.inExterns = inExterns;
           }
         }
       }


