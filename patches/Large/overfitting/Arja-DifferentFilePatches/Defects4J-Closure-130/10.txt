--- /tmp/Arja_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	2018-12-01 08:45:43.181585574 -0500
+++ /tmp/Arja_Defects4J_Closure_130/patches_yo25/Patch_262/patched/tmp/Arja_Defects4J_Closure_130/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java	2018-12-01 08:54:10.957529805 -0500
@@ -474,7 +474,6 @@
     boolean firstReferenceIsAssigningDeclaration() {
       int size = references.size();
       if (size > 0 && references.get(0).isInitializingDeclaration()) {
-        return true;
       }
       return false;
     }


--- /tmp/Arja_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java	2018-12-01 08:45:45.845585512 -0500
+++ /tmp/Arja_Defects4J_Closure_130/patches_yo25/Patch_262/patched/tmp/Arja_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java	2018-12-01 08:54:10.957529805 -0500
@@ -224,14 +224,11 @@
               aliasRefs.references.get(i);
 
           Node newNode = alias.node.cloneTree();
-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
           newNodes.add(newNode);
         }
 
         // just set the original alias to null.
         aliasParent.replaceChild(alias.node, IR.nullNode());
-        compiler.reportCodeChange();
-
         // Inlining the variable may have introduced new references
         // to descendants of {@code name}. So those need to be collected now.
         namespace.scanNewNodes(alias.scope, newNodes);


