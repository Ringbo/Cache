--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-01 08:51:01.869149850 -0500
+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1474/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-01 09:22:38.541405753 -0500
@@ -552,7 +552,6 @@
       // Only inline functions that return something.
       if (block.getFirstChild().isReturn()
           && block.getFirstChild().getFirstChild() != null) {
-        return true;
       }
     }
 
@@ -720,15 +719,6 @@
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
         }
 
         // Move to the next name.


--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java	2018-12-01 08:50:58.457149772 -0500
+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1474/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java	2018-12-01 09:22:38.545405770 -0500
@@ -194,22 +194,6 @@
           && NodeUtil.isGet(parent.getFirstChild())) {
         Node functionExpression = parent.getFirstChild();
         decomposeSubExpressions(functionExpression.getNext(), child, state);
-        // Now handle the call expression
-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
-            && functionExpression.getFirstChild() != grandchild) {
-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
-          // as DOM objects can not be decomposed.
-          Preconditions.checkState(allowObjectCallDecomposing(),
-              "Object method calls can not be decomposed.");
-          // Either there were preexisting side-effects, or this node has
-          // side-effects.
-          state.sideEffects = true;
-
-          // Rewrite the call so "this" is preserved.
-          Node replacement = rewriteCallExpression(parent, state);
-          // Continue from here.
-          parent = replacement;
-        }
       } else if (parentType == Token.OBJECTLIT) {
         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);
       } else {


--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java	2018-12-01 08:50:58.717149778 -0500
+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1474/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java	2018-12-01 09:22:38.545405770 -0500
@@ -1456,7 +1456,7 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        return null;
       }
     }
     return res;


