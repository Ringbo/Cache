--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-01 08:51:01.869149850 -0500
+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1453/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-01 09:22:21.597334851 -0500
@@ -278,7 +278,6 @@
       Node safeReturnNode = returnNode.cloneTree();
       Node inlineResult = FunctionArgumentInjector.inject(
           null, safeReturnNode, null, argMap);
-      Preconditions.checkArgument(safeReturnNode == inlineResult);
       newExpression = safeReturnNode.removeFirstChild();
     }
 
@@ -552,7 +551,7 @@
       // Only inline functions that return something.
       if (block.getFirstChild().isReturn()
           && block.getFirstChild().getFirstChild() != null) {
-        return true;
+        return false;
       }
     }
 


--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java	2018-12-01 08:50:58.457149772 -0500
+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1453/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionArgumentInjector.java	2018-12-01 09:22:21.601334868 -0500
@@ -70,7 +70,6 @@
         // The name may need to be replaced more than once,
         // so we need to clone the node.
         Node replacement = replacementTemplate.cloneTree();
-        parent.replaceChild(node, replacement);
         return replacement;
       }
     } else if (replaceThis && node.isThis()) {


--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java	2018-12-01 08:50:58.717149778 -0500
+++ /tmp/Arja_Defects4J_Closure_116/patches_186s/Patch_1453/patched/tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java	2018-12-01 09:22:21.601334868 -0500
@@ -1456,7 +1456,7 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        return null;
       }
     }
     return res;


