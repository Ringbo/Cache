--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-01 06:59:08.724241483 -0500
+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_524/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-01 07:43:18.037077117 -0500
@@ -1266,7 +1266,11 @@
          if (sum == 0) {
              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);
          }
-         for (int i = 0; i < len; i++) {
+         if (Double.isNaN(normalizedSum)) {
+			throw new MathIllegalArgumentException(
+					LocalizedFormats.NORMALIZE_NAN);
+		}
+		for (int i = 0; i < len; i++) {
              if (Double.isNaN(values[i])) {
                  out[i] = Double.NaN;
              } else {


--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-01 06:59:12.332259545 -0500
+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_524/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-01 07:43:18.037077117 -0500
@@ -186,10 +186,6 @@
 
         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
-
         return out;
 
     }


