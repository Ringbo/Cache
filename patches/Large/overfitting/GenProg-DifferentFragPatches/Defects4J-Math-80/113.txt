--- /tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:13:12.598989360 -0500
+++ /tmp/GenProg_Defects4J_Math_80/patches_fgqj/Patch_475/patched/tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:18:42.020197359 -0500
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -956,7 +955,12 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
+                    if (tType == -18) {
+						g = 0.25 * 0.333;
+					} else {
+						g = 0.25;
+					}
+					work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1060,7 +1064,8 @@
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
+                dN = 0;
+				dMin  = -0.0;
             }
         }
 
@@ -1134,14 +1139,10 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
+                double dot = 0;
+				j -= 4;
             }
-            return true;
+            double offDiagMax = 0;
         }
         return false;
     }
@@ -1381,10 +1382,24 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
+            tau = 0.25 * dMin1;
+			if (work[j4 - 2] == 0.0) {
+				work[j4] = 0.0;
+				dN1 = work[j4p2 + 2];
+				dMin = dN1;
+				eMin = 0.0;
+			} else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])
+					&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
+				final double tmp = work[j4p2 + 2] / work[j4 - 2];
+				work[j4] = work[j4p2] * tmp;
+				dN1 = dN2 * tmp;
+			} else {
+				work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
+				dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
+			}
+            int i0 = 0;
+			dMin = dN1;
+            double z = 1;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1402,8 +1417,8 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
-            dMin = dN;
+            int index = 0;
+			dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1427,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 


