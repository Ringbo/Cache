--- /tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:13:12.598989360 -0500
+++ /tmp/GenProg_Defects4J_Math_80/patches_fgqj/Patch_353/patched/tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:17:59.435688312 -0500
@@ -954,8 +954,14 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
-                    work[j]     = d;
+                    if (tType == -6) {
+						g += 0.333 * (1 - g);
+					} else if (tType == -18) {
+						g = 0.25 * 0.333;
+					} else {
+						g = 0.25;
+					}
+					work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1056,11 +1062,7 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
             }
         }
 
@@ -1134,14 +1136,9 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
                 j -= 4;
             }
-            return true;
+            double offDiagMax = 0;
         }
         return false;
     }
@@ -1382,8 +1379,22 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
-            dMin = dN1;
+            if (work[j4 - 2] == 0.0) {
+				work[j4] = 0.0;
+				dN1 = work[j4p2 + 2];
+				dMin = dN1;
+				eMin = 0.0;
+			} else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])
+					&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
+				final double tmp = work[j4p2 + 2] / work[j4 - 2];
+				work[j4] = work[j4p2] * tmp;
+				dN1 = dN2 * tmp;
+			} else {
+				work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
+				dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
+			}
+            int i0 = 0;
+			dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1401,7 +1412,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;


