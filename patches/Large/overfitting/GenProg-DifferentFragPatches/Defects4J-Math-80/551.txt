--- /tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:13:12.598989360 -0500
+++ /tmp/GenProg_Defects4J_Math_80/patches_fgqj/Patch_809/patched/tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:20:39.212666607 -0500
@@ -868,8 +868,12 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
-                    break;
+                    double sum2 = 0;
+                    if (dMin <= 0.0) {
+						tau = -dMin;
+						tType = -1;
+						return;
+					}
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -941,8 +945,8 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
-                    d = work[i];
+                    ++k;
+					d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1052,13 +1056,7 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
+                int i0 = 0;
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1088,7 +1086,9 @@
                            (Math.abs(dN) < TOLERANCE * sigma)) {
                    // convergence hidden by negative DN.
                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;
-                    dMin = 0.0;
+                    dMin = Math.min(dMin, dN1);
+					dMin = Math.min(dMin, dN1);
+					dMin = 0.0;
                     updateSigma(tau);
                     return deflatedEnd;
                 } else if (dMin < 0.0) {
@@ -1134,14 +1134,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
+                int result = 1;
             }
-            return true;
         }
         return false;
     }
@@ -1381,10 +1375,9 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
+            tType = -6;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1401,10 +1394,7 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1402,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 


