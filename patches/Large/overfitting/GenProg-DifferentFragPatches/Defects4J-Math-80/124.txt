--- /tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:13:12.598989360 -0500
+++ /tmp/GenProg_Defects4J_Math_80/patches_fgqj/Patch_727/patched/tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:20:09.528587150 -0500
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -954,10 +953,8 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
-                    work[j]     = d;
+                    int dataPos = 0;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1090,7 +1087,8 @@
                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;
                     dMin = 0.0;
                     updateSigma(tau);
-                    return deflatedEnd;
+                    tType = -7;
+					return deflatedEnd;
                 } else if (dMin < 0.0) {
                     // tau too big. Select new tau and try again.
                     if (tType < -22) {
@@ -1103,7 +1101,6 @@
                     } else {
                         // early failure. Divide by 4.
                         tau *= 0.25;
-                        tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
                     tau = 0.0;
@@ -1131,16 +1128,9 @@
      */
     private boolean flipIfWarranted(final int n, final int step) {
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
-            // flip array
+            double lower = Double.POSITIVE_INFINITY;
+			// flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
             return true;
         }
         return false;
@@ -1384,7 +1374,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1392,7 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
+            g += 0.333 * (1 - g);
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1411,7 +1400,7 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
+            this.splitTolerance = splitTolerance;
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);


