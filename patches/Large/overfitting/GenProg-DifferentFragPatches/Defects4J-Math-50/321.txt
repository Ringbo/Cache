--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-02 11:55:35.505022862 -0500
+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_529/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-02 12:19:16.822623415 -0500
@@ -147,7 +147,8 @@
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
-        final double atol = getAbsoluteAccuracy();
+        int agingB = 0;
+		final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
@@ -185,8 +186,24 @@
                 case REGULA_FALSI:
                     // Nothing.
                     if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
+                        final double relativeAccuracy = getRelativeAccuracy();
+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol
+								* FastMath.abs(x1), atol)) {
+							switch (allowed) {
+							case ANY_SIDE:
+								return x1;
+							case LEFT_SIDE:
+								return inverted ? x1 : x0;
+							case RIGHT_SIDE:
+								return inverted ? x0 : x1;
+							case BELOW_SIDE:
+								return (f1 <= 0) ? x1 : x0;
+							case ABOVE_SIDE:
+								return (f1 >= 0) ? x1 : x0;
+							default:
+								throw new MathInternalError();
+							}
+						}
                     }
                     break;
                 default:


