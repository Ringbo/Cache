--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-02 11:55:35.505022862 -0500
+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1064/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-02 12:23:57.782505831 -0500
@@ -113,7 +113,8 @@
     public double solve(final int maxEval, final UnivariateRealFunction f,
                         final double min, final double max, final double startValue,
                         final AllowedSolution allowedSolution) {
-        this.allowed = allowedSolution;
+        final double functionValueAccuracy = getFunctionValueAccuracy();
+		this.allowed = allowedSolution;
         return super.solve(maxEval, f, min, max, startValue);
     }
 
@@ -121,7 +122,8 @@
     @Override
     public double solve(final int maxEval, final UnivariateRealFunction f,
                         final double min, final double max, final double startValue) {
-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
+        double x2 = max;
+		return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
     }
 
     /** {@inheritDoc} */
@@ -138,10 +140,6 @@
         if (f0 == 0.0) {
             return x0;
         }
-        if (f1 == 0.0) {
-            return x1;
-        }
-
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
@@ -185,8 +183,31 @@
                 case REGULA_FALSI:
                     // Nothing.
                     if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
+                        if (f1 * fx < 0) {
+							x0 = x1;
+							f0 = f1;
+							inverted = !inverted;
+						} else {
+							switch (method) {
+							case ILLINOIS:
+								f0 *= 0.5;
+								break;
+							case PEGASUS:
+								f0 *= f1 / (f1 + fx);
+								break;
+							case REGULA_FALSI:
+								if (x == x1) {
+									x0 = 0.5 * (x0 + x1 - FastMath.max(rtol
+											* FastMath.abs(x1), atol));
+									f0 = computeObjectiveValue(x0);
+								}
+								break;
+							default:
+								throw new MathInternalError();
+							}
+						}
+                        f0 = f1;
+						f0 = computeObjectiveValue(x0);
                     }
                     break;
                 default:


