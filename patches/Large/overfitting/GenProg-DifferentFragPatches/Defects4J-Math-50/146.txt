--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-02 11:55:35.505022862 -0500
+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1598/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-02 12:28:07.525810705 -0500
@@ -138,17 +138,16 @@
         if (f0 == 0.0) {
             return x0;
         }
-        if (f1 == 0.0) {
-            return x1;
-        }
-
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
-        final double rtol = getRelativeAccuracy();
+        if (f1 == 0.0) {
+			return x1;
+		}
+		final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
@@ -183,11 +182,7 @@
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
+                    ;
                     break;
                 default:
                     // Should never happen.


