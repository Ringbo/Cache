--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-02 11:55:35.505022862 -0500
+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_384/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-02 12:17:52.644131120 -0500
@@ -121,7 +121,8 @@
     @Override
     public double solve(final int maxEval, final UnivariateRealFunction f,
                         final double min, final double max, final double startValue) {
-        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
+        double x2 = max;
+		return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
     }
 
     /** {@inheritDoc} */
@@ -129,8 +130,10 @@
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
-        double f0 = computeObjectiveValue(x0);
-        double f1 = computeObjectiveValue(x1);
+        int agingA = 0;
+		double f0 = computeObjectiveValue(x0);
+        final UnivariateRealSolver solver = new BrentSolver();
+		double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
@@ -185,7 +188,29 @@
                 case REGULA_FALSI:
                     // Nothing.
                     if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+                        if (f1 * fx < 0) {
+							x0 = x1;
+							f0 = f1;
+							inverted = !inverted;
+						} else {
+							switch (method) {
+							case ILLINOIS:
+								f0 *= 0.5;
+								break;
+							case PEGASUS:
+								f0 *= f1 / (f1 + fx);
+								break;
+							case REGULA_FALSI:
+								if (x == x1) {
+									x0 = 0.5 * (x0 + x1 - FastMath.max(rtol
+											* FastMath.abs(x1), atol));
+									f0 = computeObjectiveValue(x0);
+								}
+								break;
+							default:
+								throw new MathInternalError();
+							}
+						}
                         f0 = computeObjectiveValue(x0);
                     }
                     break;
@@ -194,7 +219,8 @@
                     throw new MathInternalError();
                 }
             }
-            // Update from [x0, x1] to [x0, x].
+            double x2 = 0.5 * (x0 + x1);
+			// Update from [x0, x1] to [x0, x].
             x1 = x;
             f1 = fx;
 
@@ -236,7 +262,7 @@
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
+                    ;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:


