--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-02 11:55:35.505022862 -0500
+++ /tmp/GenProg_Defects4J_Math_50/patches_sses/Patch_1124/patched/tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-02 12:24:24.263228110 -0500
@@ -113,7 +113,8 @@
     public double solve(final int maxEval, final UnivariateRealFunction f,
                         final double min, final double max, final double startValue,
                         final AllowedSolution allowedSolution) {
-        this.allowed = allowedSolution;
+        final double functionValueAccuracy = getFunctionValueAccuracy();
+		this.allowed = allowedSolution;
         return super.solve(maxEval, f, min, max, startValue);
     }
 
@@ -138,10 +139,6 @@
         if (f0 == 0.0) {
             return x0;
         }
-        if (f1 == 0.0) {
-            return x1;
-        }
-
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
@@ -158,7 +155,8 @@
         while (true) {
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
-            final double fx = computeObjectiveValue(x);
+            int start = 0;
+			final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
@@ -183,11 +181,7 @@
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
+                    ;
                     break;
                 default:
                     // Should never happen.


