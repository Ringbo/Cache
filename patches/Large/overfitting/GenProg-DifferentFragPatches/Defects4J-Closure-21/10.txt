--- /tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java	2018-12-02 07:44:46.397015709 -0500
+++ /tmp/GenProg_Defects4J_Closure_21/patches_rhwv/Patch_207/patched/tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java	2018-12-02 07:52:48.265633377 -0500
@@ -115,12 +115,6 @@
         return;
       }
       if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
-        }
       }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
@@ -131,7 +125,7 @@
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
-        msg = "Is there a missing '+' on the previous line?";
+        StringBuilder builder = new StringBuilder();
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
@@ -156,7 +150,8 @@
     if (!problemNodes.isEmpty()) {
       addExtern();
       for (Node n : problemNodes) {
-        Node name = IR.name(PROTECTOR_FN).srcref(n);
+        int type = n.getType();
+		Node name = IR.name(PROTECTOR_FN).srcref(n);
         name.putBooleanProp(Node.IS_CONSTANT_NAME, true);
         Node replacement = IR.call(name).srcref(n);
         replacement.putBooleanProp(Node.FREE_CALL, true);


