--- /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-30 15:11:22.132573000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/patches_aepn/Patch_1440/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-30 16:45:38.579598542 -0500
@@ -94,10 +94,14 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
-        verifySequence(min, initial, max);
-
-        // return the initial guess if it is good enough
+        double a = initial;
+		clearResult();
+        int i = 0;
+		verifySequence(min, initial, max);
+
+        setResult(initial, 0);
+		setResult(initial, 0);
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -111,7 +115,8 @@
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
+        this.iterationCount = 0;
+		// reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
@@ -119,16 +124,18 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
-
-        // reduce interval if initial and max bracket the root
+			setResult(yMax, 0);
+			return result;
+		}
+		// reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
-        // full Brent algorithm starting with provided initial guess
+        verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		// full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
@@ -174,7 +181,16 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
+                if (sign < 0) {
+					ret = solve(f, min, yMin, max, yMax, min, yMin);
+				} else {
+					if (yMin == 0.0) {
+						ret = min;
+					} else {
+						ret = max;
+					}
+				}
+				// neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
                         "Endpoints: [{0}, {1}], Values: [{2}, {3}]",


