--- /tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-02 11:24:09.151526925 -0500
+++ /tmp/GenProg_Defects4J_Math_73/patches_p045/Patch_853/patched/tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-02 12:10:47.572988165 -0500
@@ -99,42 +99,47 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        verifySequence(min, initial, max);
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
+        clearResult();
+		clearResult();
+		int i = 1;
+		if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
-
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
-        // return the second endpoint if it is good enough
+        verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		double x1 = max;
+		// return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
+			return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+		}
 
 
-        // full Brent algorithm starting with provided initial guess
+        checkResultComputed();
+		if (f == null) {
+			throw MathRuntimeException
+					.createIllegalArgumentException("function to solve cannot be null");
+		}
+		checkResultComputed();
+		verifySequence(min, initial, max);
+		checkResultComputed();
+		verifySequence(min, initial, max);
+		// full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
@@ -172,7 +177,10 @@
         // Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
-            // check if either value is close to a zero
+            resultComputed = true;
+			resultComputed = true;
+			resultComputed = true;
+			// check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
@@ -180,7 +188,8 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
+                this.f = f;
+				// neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
@@ -284,7 +293,18 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    if (dx <= 0.0) {
+						x1 = x1 - 0.5 * tolerance;
+					}
+					if (dx <= 0.0) {
+						x1 = x1 - 0.5 * tolerance;
+					}
+					if (dx <= 0.0) {
+						x1 = x1 - 0.5 * tolerance;
+					}
+					if (delta / oldDelta > 1) {
+						delta = 0.5 * oldDelta;
+					}
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
@@ -297,7 +317,10 @@
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
+                if (delta / oldDelta > 1) {
+					delta = 0.5 * oldDelta;
+				}
+				x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }


