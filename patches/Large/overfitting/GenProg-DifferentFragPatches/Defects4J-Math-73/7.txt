--- /tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-02 11:24:09.151526925 -0500
+++ /tmp/GenProg_Defects4J_Math_73/patches_p045/Patch_847/patched/tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-02 12:10:33.928955661 -0500
@@ -104,24 +104,28 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
+        clearResult();
+		if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
-
-        // reduce interval if min and initial bracket the root
+        verifyBracketing(min, max, f);
+		if (f.value(min) == 0.0) {
+			return min;
+		}
+		setResult(initial, 0);
+		// reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
-        // return the second endpoint if it is good enough
+        if (yInitial * yMin < 0) {
+			return solve(f, min, yMin, initial, yInitial, min, yMin);
+		}
+		// return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
@@ -134,7 +138,8 @@
         }
 
 
-        // full Brent algorithm starting with provided initial guess
+        checkResultComputed();
+		// full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
@@ -172,7 +177,8 @@
         // Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
-            // check if either value is close to a zero
+            resultComputed = true;
+			// check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;


