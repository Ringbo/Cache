--- /tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-02 11:24:09.151526925 -0500
+++ /tmp/GenProg_Defects4J_Math_73/patches_p045/Patch_642/patched/tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-02 12:00:01.395646847 -0500
@@ -111,12 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
-
-        // reduce interval if min and initial bracket the root
+        verifyBracketing(min, max, f);
+		// reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
@@ -134,7 +130,8 @@
         }
 
 
-        // full Brent algorithm starting with provided initial guess
+        verifySequence(min, initial, max);
+		// full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
@@ -284,7 +281,15 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    if (dx <= 0.0) {
+						x1 = x1 - 0.5 * tolerance;
+					}
+					if (dx <= 0.0) {
+						x1 = x1 - 0.5 * tolerance;
+					}
+					if (delta / oldDelta > 1) {
+						delta = 0.5 * oldDelta;
+					}
                 } else {
                     oldDelta = delta;
                     delta = p / p1;


