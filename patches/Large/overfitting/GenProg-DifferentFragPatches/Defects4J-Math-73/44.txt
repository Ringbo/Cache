--- /tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-02 11:24:09.151526925 -0500
+++ /tmp/GenProg_Defects4J_Math_73/patches_p045/Patch_786/patched/tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-02 12:07:24.596514416 -0500
@@ -104,14 +104,16 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
+        double x2 = max;
+		if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        verifyBracketing(min, max, f);
+		if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
         }
@@ -134,7 +136,11 @@
         }
 
 
-        // full Brent algorithm starting with provided initial guess
+        if (f == null) {
+			throw MathRuntimeException
+					.createIllegalArgumentException("function to solve cannot be null");
+		}
+		// full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }


