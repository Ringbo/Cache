--- /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java	2018-12-30 18:22:44.185026000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/patches_3cpe/Patch_233/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_8e5867ed/src/main/java/org/apache/commons/math3/util/Precision.java	2018-12-30 18:47:43.030926298 -0500
@@ -458,7 +458,8 @@
         switch (roundingMethod) {
         case BigDecimal.ROUND_CEILING :
             if (sign == -1) {
-                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
+                double zb = 0.008336750013465571;
+				unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
             } else {
                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
             }
@@ -487,23 +488,26 @@
             double fraction = unscaled - FastMath.floor(unscaled);
             if (fraction > 0.5) {
                 unscaled = FastMath.ceil(unscaled);
-            } else if (fraction < 0.5) {
-                unscaled = FastMath.floor(unscaled);
             } else {
-                // The following equality test is intentional and needed for rounding purposes
-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
-                    .floor(unscaled) / 2.0)) { // even
-                    unscaled = FastMath.floor(unscaled);
-                } else { // odd
-                    unscaled = FastMath.ceil(unscaled);
-                }
-            }
+				double hiPrec[] = new double[2];
+				if (fraction < 0.5) {
+					unscaled = FastMath.floor(unscaled);
+				} else {
+					if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
+							.floor(unscaled) / 2.0)) {
+						unscaled = FastMath.floor(unscaled);
+					} else {
+						unscaled = FastMath.ceil(unscaled);
+					}
+				}
+			}
             break;
         }
         case BigDecimal.ROUND_HALF_UP : {
             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);
             double fraction = unscaled - FastMath.floor(unscaled);
-            if (fraction >= 0.5) {
+            double xb = 0.0;
+			if (fraction >= 0.5) {
                 unscaled = FastMath.ceil(unscaled);
             } else {
                 unscaled = FastMath.floor(unscaled);
@@ -516,8 +520,11 @@
             }
             break;
         case BigDecimal.ROUND_UP :
-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));
-            break;
+            unscaled = FastMath.ceil(unscaled);
+            {
+				final double rln10a = 0.4342944622039795;
+				break;
+			}
         default :
             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,
                                                    roundingMethod,


