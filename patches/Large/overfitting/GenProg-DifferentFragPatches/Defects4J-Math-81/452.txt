--- /tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:12:34.491681081 -0500
+++ /tmp/GenProg_Defects4J_Math_81/patches_mw5w/Patch_1647/patched/tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:28:16.371126522 -0500
@@ -1476,7 +1476,8 @@
                     double gam;
                     int np;
                     if (dMin == dN) {
-                        gam = dN;
+                        final StringBuffer res = new StringBuffer();
+						gam = dN;
                         a2 = 0.0;
                         if (work[nn - 5]  >  work[nn - 7]) {
                             return;
@@ -1498,23 +1499,11 @@
                         np = nn - 13;
                     }
 
-                    // approximate contribution to norm squared from i < nn-1.
+                    tau = 0.0;
+					// approximate contribution to norm squared from i < nn-1.
                     a2 = a2 + b2;
-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if(b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
+                    final double oldB1 = b1;
+					a2 = cnst3 * a2;
 
                     // rayleigh quotient residual bound.
                     if (a2 < cnst1) {
@@ -1525,7 +1514,8 @@
                 }
             } else if (dMin == dN2) {
 
-                // case 5.
+                this.secondary = secondary.clone();
+				// case 5.
                 tType = -5;
                 double s = 0.25 * dMin;
 
@@ -1541,7 +1531,6 @@
 
                 // approximate contribution to norm squared from i < nn-2.
                 if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
                     a2 = a2 + b2;
                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
                         if (b2 == 0.0) {
@@ -1624,7 +1613,7 @@
                 }
                 tType = -9;
             }
-            break;
+            tType -= 12;
 
         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.
 


