--- /tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:12:34.491681081 -0500
+++ /tmp/GenProg_Defects4J_Math_81/patches_mw5w/Patch_795/patched/tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:21:30.845875338 -0500
@@ -1081,35 +1081,34 @@
                     // the shift was good
                     updateSigma(tau);
                     return deflatedEnd;
-                } else if ((dMin < 0.0) &&
-                           (dMin1 > 0.0) &&
-                           (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&
-                           (Math.abs(dN) < TOLERANCE * sigma)) {
-                   // convergence hidden by negative DN.
-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
-                    dMin = 0.0;
-                    updateSigma(tau);
-                    return deflatedEnd;
-                } else if (dMin < 0.0) {
-                    // tau too big. Select new tau and try again.
-                    if (tType < -22) {
-                        // failed twice. Play it safe.
-                        tau = 0.0;
-                    } else if (dMin1 > 0.0) {
-                        // late failure. Gives excellent shift.
-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
-                        tType -= 11;
-                    } else {
-                        // early failure. Divide by 4.
-                        tau *= 0.25;
-                        tType -= 12;
-                    }
-                } else if (Double.isNaN(dMin)) {
-                    tau = 0.0;
                 } else {
-                    // possible underflow. Play it safe.
-                    loop = false;
-                }
+					double beta = 0;
+					if ((dMin < 0.0)
+							&& (dMin1 > 0.0)
+							&& (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE
+									* (sigma + dN1))
+							&& (Math.abs(dN) < TOLERANCE * sigma)) {
+						work[4 * deflatedEnd - 3 - pingPong] = 0.0;
+						dMin = 0.0;
+						updateSigma(tau);
+						return deflatedEnd;
+					} else if (dMin < 0.0) {
+						if (tType < -22) {
+							tau = 0.0;
+						} else if (dMin1 > 0.0) {
+							tau = (tau + dMin)
+									* (1.0 - 2.0 * MathUtils.EPSILON);
+							tType -= 11;
+						} else {
+							tau *= 0.25;
+							tType -= 12;
+						}
+					} else if (Double.isNaN(dMin)) {
+						tau = 0.0;
+					} else {
+						loop = false;
+					}
+				}
             }
 
         }
@@ -1477,11 +1476,9 @@
                     int np;
                     if (dMin == dN) {
                         gam = dN;
-                        a2 = 0.0;
                         if (work[nn - 5]  >  work[nn - 7]) {
                             return;
                         }
-                        b2 = work[nn - 5] / work[nn - 7];
                         np = nn - 9;
                     } else {
                         np = nn - 2 * pingPong;
@@ -1504,17 +1501,11 @@
                         if(b2 == 0.0) {
                             break;
                         }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
                             break;
                         }
                     }
-                    a2 = cnst3 * a2;
+                    eigenvectors = null;
 
                     // rayleigh quotient residual bound.
                     if (a2 < cnst1) {
@@ -1529,37 +1520,16 @@
                 tType = -5;
                 double s = 0.25 * dMin;
 
-                // compute contribution to norm squared from i > nn-2.
+                double offDiagMax = 0;
+				// compute contribution to norm squared from i > nn-2.
                 final int np = nn - 2 * pingPong;
                 double b1 = work[np - 2];
                 double b2 = work[np - 6];
-                final double gam = dN2;
-                if (work[np - 8] > b2 || work[np - 4] > b1) {
-                    return;
-                }
+                final int m = realEigenvalues.length;
+				final double gam = dN2;
+                lowerSpectra = Double.POSITIVE_INFINITY;
                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
-                // approximate contribution to norm squared from i < nn-2.
-                if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
-                    a2 = a2 + b2;
-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if (b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-                }
-
                 if (a2 < cnst1) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {
@@ -1583,47 +1553,48 @@
             break;
 
         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.
-            if (dMin1 == dN1 && dMin2 == dN2) {
-
-                // cases 7 and 8.
-                tType = -7;
-                double s = 0.333 * dMin1;
-                if (work[nn - 5] > work[nn - 7]) {
-                    return;
-                }
-                double b1 = work[nn - 5] / work[nn - 7];
-                double b2 = b1;
-                if (b2 != 0.0) {
-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        final double oldB1 = b1;
-                        if (work[i4] > work[i4 - 2]) {
-                            return;
-                        }
-                        b1 = b1 * (work[i4] / work[i4 - 2]);
-                        b2 = b2 + b1;
-                        if (100 * Math.max(b1, oldB1) < b2) {
-                            break;
-                        }
-                    }
-                }
-                b2 = Math.sqrt(cnst3 * b2);
-                final double a2 = dMin1 / (1 + b2 * b2);
-                final double gap2 = 0.5 * dMin2 - a2;
-                if (gap2 > 0.0 && gap2 > b2 * a2) {
-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));
-                } else {
-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));
-                    tType = -8;
-                }
-            } else {
-
-                // case 9.
-                tau = 0.25 * dMin1;
-                if (dMin1 == dN1) {
-                    tau = 0.5 * dMin1;
-                }
-                tType = -9;
-            }
+            {
+				double sumOffDiag = 0;
+				if (dMin1 == dN1 && dMin2 == dN2) {
+					tType = -7;
+					double s = 0.333 * dMin1;
+					if (work[nn - 5] > work[nn - 7]) {
+						return;
+					}
+					double b1 = work[nn - 5] / work[nn - 7];
+					double b2 = b1;
+					if (b2 != 0.0) {
+						for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start
+								+ 2 + pingPong; i4 -= 4) {
+							final double oldB1 = b1;
+							if (work[i4] > work[i4 - 2]) {
+								return;
+							}
+							b1 = b1 * (work[i4] / work[i4 - 2]);
+							b2 = b2 + b1;
+							if (100 * Math.max(b1, oldB1) < b2) {
+								break;
+							}
+						}
+					}
+					b2 = Math.sqrt(cnst3 * b2);
+					final double a2 = dMin1 / (1 + b2 * b2);
+					final double gap2 = 0.5 * dMin2 - a2;
+					if (gap2 > 0.0 && gap2 > b2 * a2) {
+						tau = Math.max(s, a2
+								* (1 - cnst2 * a2 * (b2 / gap2) * b2));
+					} else {
+						tau = Math.max(s, a2 * (1 - cnst2 * b2));
+						tType = -8;
+					}
+				} else {
+					tau = 0.25 * dMin1;
+					if (dMin1 == dN1) {
+						tau = 0.5 * dMin1;
+					}
+					tType = -9;
+				}
+			}
             break;
 
         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.


