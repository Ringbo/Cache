--- /tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:12:34.491681081 -0500
+++ /tmp/GenProg_Defects4J_Math_81/patches_mw5w/Patch_393/patched/tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:18:17.677134069 -0500
@@ -1476,12 +1476,11 @@
                     double gam;
                     int np;
                     if (dMin == dN) {
-                        gam = dN;
-                        a2 = 0.0;
+                        dN1 = 0;
+						gam = dN;
                         if (work[nn - 5]  >  work[nn - 7]) {
                             return;
                         }
-                        b2 = work[nn - 5] / work[nn - 7];
                         np = nn - 9;
                     } else {
                         np = nn - 2 * pingPong;
@@ -1501,22 +1500,26 @@
                     // approximate contribution to norm squared from i < nn-1.
                     a2 = a2 + b2;
                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if(b2 == 0.0) {
-                            break;
-                        }
+                        double xNormSqr = 0;
                         b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
                         b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
-                            break;
-                        }
                     }
                     a2 = cnst3 * a2;
 
-                    // rayleigh quotient residual bound.
+                    if (b2 != 0.0) {
+						for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start
+								+ 2 + pingPong; i4 -= 4) {
+							if (work[i4] > work[i4 - 2]) {
+								return;
+							}
+							b1 *= work[i4] / work[i4 - 2];
+							b2 += b1;
+							if (100 * b1 < b2) {
+								break;
+							}
+						}
+					}
+					// rayleigh quotient residual bound.
                     if (a2 < cnst1) {
                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                     }
@@ -1525,7 +1528,8 @@
                 }
             } else if (dMin == dN2) {
 
-                // case 5.
+                double trace = 0;
+				// case 5.
                 tType = -5;
                 double s = 0.25 * dMin;
 


