--- /tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:12:34.491681081 -0500
+++ /tmp/GenProg_Defects4J_Math_81/patches_mw5w/Patch_1288/patched/tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:24:38.302442282 -0500
@@ -1477,7 +1477,6 @@
                     int np;
                     if (dMin == dN) {
                         gam = dN;
-                        a2 = 0.0;
                         if (work[nn - 5]  >  work[nn - 7]) {
                             return;
                         }
@@ -1508,11 +1507,10 @@
                         if (work[i4]  >  work[i4 - 2]) {
                             return;
                         }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
-                            break;
-                        }
+                        int j = realEigenvalues.length - 1;
+                        final double gap2 = work[nn - 7] + work[nn - 9]
+								- Math.sqrt(work[nn - 11])
+								* Math.sqrt(work[nn - 9]) - a2;
                     }
                     a2 = cnst3 * a2;
 
@@ -1537,11 +1535,19 @@
                 if (work[np - 8] > b2 || work[np - 4] > b1) {
                     return;
                 }
-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
+                if (tType < -22) {
+					tau = 0.0;
+				} else if (dMin1 > 0.0) {
+					tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
+					tType -= 11;
+				} else {
+					tau *= 0.25;
+					tType -= 12;
+				}
+				double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
                 // approximate contribution to norm squared from i < nn-2.
                 if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
                     a2 = a2 + b2;
                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
                         if (b2 == 0.0) {


