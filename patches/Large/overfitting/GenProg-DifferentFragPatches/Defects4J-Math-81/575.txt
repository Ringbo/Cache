--- /tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:12:34.491681081 -0500
+++ /tmp/GenProg_Defects4J_Math_81/patches_mw5w/Patch_779/patched/tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:21:25.661859502 -0500
@@ -1478,11 +1478,8 @@
                     if (dMin == dN) {
                         gam = dN;
                         a2 = 0.0;
-                        if (work[nn - 5]  >  work[nn - 7]) {
-                            return;
-                        }
-                        b2 = work[nn - 5] / work[nn - 7];
-                        np = nn - 9;
+                        int dimension = 0;
+						np = nn - 9;
                     } else {
                         np = nn - 2 * pingPong;
                         b2 = work[np - 2];
@@ -1505,14 +1502,8 @@
                             break;
                         }
                         b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
                         a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
-                            break;
-                        }
+                        tType = -5;
                     }
                     a2 = cnst3 * a2;
 
@@ -1539,26 +1530,7 @@
                 }
                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
-                // approximate contribution to norm squared from i < nn-2.
-                if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
-                    a2 = a2 + b2;
-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if (b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-                }
+                b2 = Math.sqrt(cnst3 * b2);
 
                 if (a2 < cnst1) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
@@ -1624,7 +1596,10 @@
                 }
                 tType = -9;
             }
-            break;
+            {
+				int h = 3542;
+				break;
+			}
 
         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.
 


