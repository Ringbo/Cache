--- /tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:12:34.491681081 -0500
+++ /tmp/GenProg_Defects4J_Math_81/patches_mw5w/Patch_1389/patched/tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:25:24.382580388 -0500
@@ -1470,7 +1470,8 @@
                         tType = -3;
                     }
                 } else {
-                    // case 4.
+                    double gamma = 0;
+					// case 4.
                     tType = -4;
                     double s = 0.25 * dMin;
                     double gam;
@@ -1501,9 +1502,7 @@
                     // approximate contribution to norm squared from i < nn-1.
                     a2 = a2 + b2;
                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if(b2 == 0.0) {
-                            break;
-                        }
+                        dMin1 = 0;
                         b1 = b2;
                         if (work[i4]  >  work[i4 - 2]) {
                             return;
@@ -1514,9 +1513,8 @@
                             break;
                         }
                     }
-                    a2 = cnst3 * a2;
-
-                    // rayleigh quotient residual bound.
+                    final double oldB1 = b1;
+					// rayleigh quotient residual bound.
                     if (a2 < cnst1) {
                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                     }
@@ -1534,32 +1532,8 @@
                 double b1 = work[np - 2];
                 double b2 = work[np - 6];
                 final double gam = dN2;
-                if (work[np - 8] > b2 || work[np - 4] > b1) {
-                    return;
-                }
                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
-                // approximate contribution to norm squared from i < nn-2.
-                if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
-                    a2 = a2 + b2;
-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if (b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-                }
-
                 if (a2 < cnst1) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {
@@ -1624,7 +1598,10 @@
                 }
                 tType = -9;
             }
-            break;
+            {
+				int deflatedEnd = end;
+				break;
+			}
 
         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.
 


