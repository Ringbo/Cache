--- /tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:12:34.491681081 -0500
+++ /tmp/GenProg_Defects4J_Math_81/patches_mw5w/Patch_455/patched/tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:18:58.397404086 -0500
@@ -1098,7 +1098,35 @@
                     } else if (dMin1 > 0.0) {
                         // late failure. Gives excellent shift.
                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
-                        tType -= 11;
+                        if ((dMin >= 0) && (dMin1 > 0)) {
+							updateSigma(tau);
+							return deflatedEnd;
+						} else if ((dMin < 0.0)
+								&& (dMin1 > 0.0)
+								&& (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE
+										* (sigma + dN1))
+								&& (Math.abs(dN) < TOLERANCE * sigma)) {
+							work[4 * deflatedEnd - 3 - pingPong] = 0.0;
+							dMin = 0.0;
+							updateSigma(tau);
+							return deflatedEnd;
+						} else if (dMin < 0.0) {
+							if (tType < -22) {
+								tau = 0.0;
+							} else if (dMin1 > 0.0) {
+								tau = (tau + dMin)
+										* (1.0 - 2.0 * MathUtils.EPSILON);
+								tType -= 11;
+							} else {
+								tau *= 0.25;
+								tType -= 12;
+							}
+						} else if (Double.isNaN(dMin)) {
+							tau = 0.0;
+						} else {
+							loop = false;
+						}
+						tType -= 11;
                     } else {
                         // early failure. Divide by 4.
                         tau *= 0.25;
@@ -1477,11 +1505,9 @@
                     int np;
                     if (dMin == dN) {
                         gam = dN;
-                        a2 = 0.0;
                         if (work[nn - 5]  >  work[nn - 7]) {
                             return;
                         }
-                        b2 = work[nn - 5] / work[nn - 7];
                         np = nn - 9;
                     } else {
                         np = nn - 2 * pingPong;
@@ -1509,7 +1535,6 @@
                             return;
                         }
                         b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
                             break;
                         }
@@ -1539,27 +1564,6 @@
                 }
                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
-                // approximate contribution to norm squared from i < nn-2.
-                if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
-                    a2 = a2 + b2;
-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if (b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-                }
-
                 if (a2 < cnst1) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {


