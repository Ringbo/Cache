--- /tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:12:34.491681081 -0500
+++ /tmp/GenProg_Defects4J_Math_81/patches_mw5w/Patch_1655/patched/tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 11:28:18.611135816 -0500
@@ -1476,8 +1476,20 @@
                     double gam;
                     int np;
                     if (dMin == dN) {
-                        gam = dN;
-                        a2 = 0.0;
+                        final StringBuffer res = new StringBuffer();
+						gam = dN;
+                        for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start
+								+ 2 + pingPong; i4 -= 4) {
+							if (work[i4] > work[i4 - 2]) {
+								return;
+							}
+							b1 *= work[i4] / work[i4 - 2];
+							b2 += b1;
+							if (100 * b1 < b2) {
+								break;
+							}
+						}
+						a2 = 0.0;
                         if (work[nn - 5]  >  work[nn - 7]) {
                             return;
                         }
@@ -1498,24 +1510,6 @@
                         np = nn - 13;
                     }
 
-                    // approximate contribution to norm squared from i < nn-1.
-                    a2 = a2 + b2;
-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if(b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-
                     // rayleigh quotient residual bound.
                     if (a2 < cnst1) {
                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);
@@ -1539,27 +1533,6 @@
                 }
                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
-                // approximate contribution to norm squared from i < nn-2.
-                if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
-                    a2 = a2 + b2;
-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if (b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-                }
-
                 if (a2 < cnst1) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {
@@ -1622,9 +1595,11 @@
                 if (dMin1 == dN1) {
                     tau = 0.5 * dMin1;
                 }
-                tType = -9;
+                double eMax = 0;
+				tType = -10;
+				tau *= 0.25;
             }
-            break;
+            tType -= 12;
 
         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.
 


