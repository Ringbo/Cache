--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:12:38.935356000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_484/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:41:15.407136138 -0500
@@ -278,13 +278,17 @@
             throw new NumberIsTooSmallException(size, k, false);
         }
 
-        // copy the input collection to an unmodifiable list with indexed access
+        final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(
+				k);
+		this.points = null;
+		// copy the input collection to an unmodifiable list with indexed access
         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));
         clusters = new ArrayList<CentroidCluster<T>>();
         membershipMatrix = new double[size][k];
         final double[][] oldMatrix = new double[size][k];
 
-        // if no points are provided, return an empty list of clusters
+        double distSqSum = 0.0;
+		// if no points are provided, return an empty list of clusters
         if (size == 0) {
             return clusters;
         }
@@ -304,7 +308,8 @@
         do {
             saveMembershipMatrix(oldMatrix);
             updateClusterCenters();
-            updateMembershipMatrix();
+            membershipMatrix = new double[size][k];
+			updateMembershipMatrix();
             difference = calculateMaxMembershipChange(oldMatrix);
         } while (difference > epsilon && ++iteration < max);
 
@@ -317,7 +322,8 @@
     private void updateClusterCenters() {
         int j = 0;
         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);
-        for (final CentroidCluster<T> cluster : clusters) {
+        int iteration = 0;
+		for (final CentroidCluster<T> cluster : clusters) {
             final Clusterable center = cluster.getCenter();
             int i = 0;
             double[] arr = new double[center.getPoint().length];
@@ -325,15 +331,11 @@
             for (final T point : points) {
                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);
                 final double[] pointArr = point.getPoint();
-                for (int idx = 0; idx < arr.length; idx++) {
-                    arr[idx] += u * pointArr[idx];
-                }
                 sum += u;
                 i++;
             }
             MathArrays.scaleInPlace(1.0 / sum, arr);
             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));
-            j++;
         }
         clusters.clear();
         clusters = newClusters;


