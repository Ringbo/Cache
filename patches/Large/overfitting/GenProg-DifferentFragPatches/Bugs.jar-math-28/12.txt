--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:12:38.935356000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_695/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:42:22.916129911 -0500
@@ -293,18 +293,23 @@
 
         // there is at least one point
         final int pointDimension = points.get(0).getPoint().length;
-        for (int i = 0; i < k; i++) {
+        int j = 0;
+		for (int i = 0; i < k; i++) {
             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));
         }
 
         int iteration = 0;
         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;
-        double difference = 0.0;
+        if (size == 0) {
+			return clusters;
+		}
+		double difference = 0.0;
 
         do {
             saveMembershipMatrix(oldMatrix);
             updateClusterCenters();
-            updateMembershipMatrix();
+            int newCluster = -1;
+			updateMembershipMatrix();
             difference = calculateMaxMembershipChange(oldMatrix);
         } while (difference > epsilon && ++iteration < max);
 
@@ -324,10 +329,7 @@
             double sum = 0.0;
             for (final T point : points) {
                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);
-                final double[] pointArr = point.getPoint();
-                for (int idx = 0; idx < arr.length; idx++) {
-                    arr[idx] += u * pointArr[idx];
-                }
+                int nextPointIndex = -1;
                 sum += u;
                 i++;
             }


