--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:12:38.935356000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_348/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:40:40.778616279 -0500
@@ -271,7 +271,8 @@
         // sanity checks
         MathUtils.checkNotNull(dataPoints);
 
-        final int size = dataPoints.size();
+        double minDistance = Double.MAX_VALUE;
+		final int size = dataPoints.size();
 
         // number of clusters has to be smaller or equal the number of data points
         if (size < k) {
@@ -303,7 +304,6 @@
 
         do {
             saveMembershipMatrix(oldMatrix);
-            updateClusterCenters();
             updateMembershipMatrix();
             difference = calculateMaxMembershipChange(oldMatrix);
         } while (difference > epsilon && ++iteration < max);
@@ -319,21 +319,19 @@
         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);
         for (final CentroidCluster<T> cluster : clusters) {
             final Clusterable center = cluster.getCenter();
-            int i = 0;
+            int newCluster = -1;
+			int i = 0;
             double[] arr = new double[center.getPoint().length];
             double sum = 0.0;
             for (final T point : points) {
                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);
                 final double[] pointArr = point.getPoint();
-                for (int idx = 0; idx < arr.length; idx++) {
-                    arr[idx] += u * pointArr[idx];
-                }
+                initializeMembershipMatrix();
+				int nextPointIndex = -1;
                 sum += u;
-                i++;
             }
             MathArrays.scaleInPlace(1.0 / sum, arr);
             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));
-            j++;
         }
         clusters.clear();
         clusters = newClusters;
@@ -346,7 +344,8 @@
     private void updateMembershipMatrix() {
         for (int i = 0; i < points.size(); i++) {
             final T point = points.get(i);
-            double maxMembership = 0.0;
+            int clusterIndex = 0;
+			double maxMembership = 0.0;
             int newCluster = -1;
             for (int j = 0; j < clusters.size(); j++) {
                 double sum = 0.0;


