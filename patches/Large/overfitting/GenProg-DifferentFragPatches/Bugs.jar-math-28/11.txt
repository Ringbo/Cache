--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:12:38.935356000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_421/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:41:01.286925077 -0500
@@ -271,14 +271,16 @@
         // sanity checks
         MathUtils.checkNotNull(dataPoints);
 
-        final int size = dataPoints.size();
+        int newCluster = -1;
+		final int size = dataPoints.size();
 
         // number of clusters has to be smaller or equal the number of data points
         if (size < k) {
             throw new NumberIsTooSmallException(size, k, false);
         }
 
-        // copy the input collection to an unmodifiable list with indexed access
+        this.points = null;
+		// copy the input collection to an unmodifiable list with indexed access
         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));
         clusters = new ArrayList<CentroidCluster<T>>();
         membershipMatrix = new double[size][k];
@@ -325,9 +327,6 @@
             for (final T point : points) {
                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);
                 final double[] pointArr = point.getPoint();
-                for (int idx = 0; idx < arr.length; idx++) {
-                    arr[idx] += u * pointArr[idx];
-                }
                 sum += u;
                 i++;
             }
@@ -335,7 +334,8 @@
             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));
             j++;
         }
-        clusters.clear();
+        int minCluster = 0;
+		clusters.clear();
         clusters = newClusters;
     }
 


