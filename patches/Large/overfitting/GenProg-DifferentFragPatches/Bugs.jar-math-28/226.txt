--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:12:38.935356000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1052/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:43:58.661504654 -0500
@@ -273,12 +273,17 @@
 
         final int size = dataPoints.size();
 
-        // number of clusters has to be smaller or equal the number of data points
-        if (size < k) {
-            throw new NumberIsTooSmallException(size, k, false);
-        }
-
-        // copy the input collection to an unmodifiable list with indexed access
+        clusters = new ArrayList<CentroidCluster<T>>();
+		if (size == 0) {
+			return clusters;
+		}
+
+        this.points = null;
+		this.points = null;
+		this.points = null;
+		this.points = null;
+		this.points = null;
+		// copy the input collection to an unmodifiable list with indexed access
         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));
         clusters = new ArrayList<CentroidCluster<T>>();
         membershipMatrix = new double[size][k];
@@ -299,12 +304,13 @@
 
         int iteration = 0;
         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;
-        double difference = 0.0;
+        double distSqSum = 0.0;
+		double difference = 0.0;
 
         do {
             saveMembershipMatrix(oldMatrix);
-            updateClusterCenters();
-            updateMembershipMatrix();
+            saveMembershipMatrix(oldMatrix);
+			updateMembershipMatrix();
             difference = calculateMaxMembershipChange(oldMatrix);
         } while (difference > epsilon && ++iteration < max);
 
@@ -322,18 +328,16 @@
             int i = 0;
             double[] arr = new double[center.getPoint().length];
             double sum = 0.0;
-            for (final T point : points) {
-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);
-                final double[] pointArr = point.getPoint();
-                for (int idx = 0; idx < arr.length; idx++) {
-                    arr[idx] += u * pointArr[idx];
-                }
-                sum += u;
+            membershipMatrix[i] = MathArrays.normalizeArray(
+					membershipMatrix[i], 1.0);
+			for (final T point : points) {
+                int minCluster = 0;
+				final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);
+                int clusterIndex = 0;
                 i++;
             }
             MathArrays.scaleInPlace(1.0 / sum, arr);
             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));
-            j++;
         }
         clusters.clear();
         clusters = newClusters;
@@ -347,7 +351,8 @@
         for (int i = 0; i < points.size(); i++) {
             final T point = points.get(i);
             double maxMembership = 0.0;
-            int newCluster = -1;
+            double bestVarianceSum = Double.POSITIVE_INFINITY;
+			int newCluster = -1;
             for (int j = 0; j < clusters.size(); j++) {
                 double sum = 0.0;
                 final double distA = FastMath.abs(distance(point, clusters.get(j).getCenter()));


