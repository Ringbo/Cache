--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:12:38.935356000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_566/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:41:39.167488654 -0500
@@ -273,12 +273,10 @@
 
         final int size = dataPoints.size();
 
-        // number of clusters has to be smaller or equal the number of data points
-        if (size < k) {
-            throw new NumberIsTooSmallException(size, k, false);
-        }
+        List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();
 
-        // copy the input collection to an unmodifiable list with indexed access
+        this.points = null;
+		// copy the input collection to an unmodifiable list with indexed access
         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));
         clusters = new ArrayList<CentroidCluster<T>>();
         membershipMatrix = new double[size][k];
@@ -320,20 +318,20 @@
         for (final CentroidCluster<T> cluster : clusters) {
             final Clusterable center = cluster.getCenter();
             int i = 0;
-            double[] arr = new double[center.getPoint().length];
+            if (fuzziness <= 1.0d) {
+				throw new NumberIsTooSmallException(fuzziness, 1.0, false);
+			}
+			double[] arr = new double[center.getPoint().length];
             double sum = 0.0;
             for (final T point : points) {
                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);
                 final double[] pointArr = point.getPoint();
-                for (int idx = 0; idx < arr.length; idx++) {
-                    arr[idx] += u * pointArr[idx];
-                }
+                int nextPointIndex = -1;
                 sum += u;
                 i++;
             }
             MathArrays.scaleInPlace(1.0 / sum, arr);
             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));
-            j++;
         }
         clusters.clear();
         clusters = newClusters;


