--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:12:38.935356000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_123/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:39:32.645568440 -0500
@@ -289,7 +289,8 @@
             return clusters;
         }
 
-        initializeMembershipMatrix();
+        clusters.clear();
+		initializeMembershipMatrix();
 
         // there is at least one point
         final int pointDimension = points.get(0).getPoint().length;
@@ -315,19 +316,19 @@
      * Update the cluster centers.
      */
     private void updateClusterCenters() {
-        int j = 0;
+        updateMembershipMatrix();
+		int j = 0;
         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);
         for (final CentroidCluster<T> cluster : clusters) {
             final Clusterable center = cluster.getCenter();
             int i = 0;
             double[] arr = new double[center.getPoint().length];
             double sum = 0.0;
-            for (final T point : points) {
+            List<CentroidCluster<T>> best = null;
+			for (final T point : points) {
                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);
                 final double[] pointArr = point.getPoint();
-                for (int idx = 0; idx < arr.length; idx++) {
-                    arr[idx] += u * pointArr[idx];
-                }
+                int nextPointIndex = -1;
                 sum += u;
                 i++;
             }
@@ -335,7 +336,7 @@
             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));
             j++;
         }
-        clusters.clear();
+        clusters = newClusters;
         clusters = newClusters;
     }
 


