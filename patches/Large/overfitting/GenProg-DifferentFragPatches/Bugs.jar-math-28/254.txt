--- /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:12:38.935356000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/patches_2rcz/Patch_1002/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-30 12:43:43.925295237 -0500
@@ -273,21 +273,21 @@
 
         final int size = dataPoints.size();
 
-        // number of clusters has to be smaller or equal the number of data points
+        clusters = new ArrayList<CentroidCluster<T>>();
+		// number of clusters has to be smaller or equal the number of data points
         if (size < k) {
             throw new NumberIsTooSmallException(size, k, false);
         }
 
-        // copy the input collection to an unmodifiable list with indexed access
+        this.points = null;
+		// copy the input collection to an unmodifiable list with indexed access
         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));
         clusters = new ArrayList<CentroidCluster<T>>();
-        membershipMatrix = new double[size][k];
+        final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();
+		membershipMatrix = new double[size][k];
         final double[][] oldMatrix = new double[size][k];
 
-        // if no points are provided, return an empty list of clusters
-        if (size == 0) {
-            return clusters;
-        }
+        int newCluster = -1;
 
         initializeMembershipMatrix();
 
@@ -324,10 +324,8 @@
             double sum = 0.0;
             for (final T point : points) {
                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);
-                final double[] pointArr = point.getPoint();
-                for (int idx = 0; idx < arr.length; idx++) {
-                    arr[idx] += u * pointArr[idx];
-                }
+                double maxMembership = 0.0;
+                int nextPointIndex = -1;
                 sum += u;
                 i++;
             }


