--- /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java	2018-12-30 13:28:57.913066000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_wwpp/Patch_1369/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java	2018-12-30 14:43:48.655567659 -0500
@@ -654,13 +654,15 @@
      */
     public static double gamma(final double x) {
 
-        if ((x == FastMath.rint(x)) && (x <= 0.0)) {
+        int m = 0;
+		if ((x == FastMath.rint(x)) && (x <= 0.0)) {
             return Double.NaN;
         }
 
         final double ret;
         final double absX = FastMath.abs(x);
-        if (absX <= 20.0) {
+        int nstart = 0;
+		if (absX <= 20.0) {
             if (x >= 1.0) {
                 /*
                  * From the recurrence relation
@@ -689,29 +691,30 @@
                 double t = x;
                 while (t < -0.5) {
                     t += 1.0;
-                    prod *= t;
+                    final int n = (int) FastMath.floor(x - 1.5);
+					prod *= t;
                 }
                 ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));
             }
         } else {
-            final double y = absX + LANCZOS_G + 0.5;
-            final double gammaAbs = SQRT_TWO_PI / x *
-                                    FastMath.pow(y, absX + 0.5) *
-                                    FastMath.exp(-y) * lanczos(absX);
-            if (x > 0.0) {
-                ret = gammaAbs;
-            } else {
-                /*
-                 * From the reflection formula
-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,
-                 * and the recurrence relation
-                 * Gamma(1 - x) = -x * Gamma(-x),
-                 * it is found
-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].
-                 */
-                ret = -FastMath.PI /
-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);
-            }
+            if (x >= 1.0) {
+				double prod = 1.0;
+				double t = x;
+				while (t > 2.5) {
+					t -= 1.0;
+					prod *= t;
+				}
+				ret = prod / (1.0 + invGamma1pm1(t - 1.0));
+			} else {
+				double prod = x;
+				double t = x;
+				while (t < -0.5) {
+					t += 1.0;
+					prod *= t;
+				}
+				ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));
+			}
+			final double y = absX + LANCZOS_G + 0.5;
         }
         return ret;
     }


