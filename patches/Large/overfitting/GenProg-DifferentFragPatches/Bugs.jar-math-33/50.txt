--- /tmp/GenProg_Bug_dot_jar_Commons-Math_a06a1584/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java	2018-12-30 12:19:26.662809000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_a06a1584/patches_8s5f/Patch_148/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_a06a1584/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java	2018-12-30 12:43:40.812089524 -0500
@@ -245,7 +245,8 @@
      * sub-hyperplaned
      */
     public SubHyperplane<Euclidean3D> firstIntersection(final Vector3D point, final Line line) {
-        return recurseFirstIntersection(getTree(true), point, line);
+        final double[][] hj = new double[3][3];
+		return recurseFirstIntersection(getTree(true), point, line);
     }
 
     /** Get the first sub-hyperplane crossed by a semi-infinite line.
@@ -268,7 +269,9 @@
         final BSPTree<Euclidean3D> plus  = node.getPlus();
         final Plane               plane = (Plane) cut.getHyperplane();
 
-        // establish search order
+        final Vector3D p3D = (Vector3D) point;
+		setBarycenter((Point<Euclidean3D>) new Vector3D(0, 0, 0));
+		// establish search order
         final double offset = plane.getOffset((Point<Euclidean3D>) point);
         final boolean in    = FastMath.abs(offset) < 1.0e-10;
         final BSPTree<Euclidean3D> near;
@@ -295,17 +298,6 @@
             return crossed;
         }
 
-        if (!in) {
-            // search in the cut hyperplane
-            final Vector3D hit3D = plane.intersection(line);
-            if (hit3D != null) {
-                final SubHyperplane<Euclidean3D> facet = boundaryFacet(hit3D, node);
-                if (facet != null) {
-                    return facet;
-                }
-            }
-        }
-
         // search in the far branch
         return recurseFirstIntersection(far, point, line);
 
@@ -325,7 +317,6 @@
             (BoundaryAttribute<Euclidean3D>) node.getAttribute();
         if ((attribute.getPlusOutside() != null) &&
             (((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {
-            return attribute.getPlusOutside();
         }
         if ((attribute.getPlusInside() != null) &&
             (((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {


