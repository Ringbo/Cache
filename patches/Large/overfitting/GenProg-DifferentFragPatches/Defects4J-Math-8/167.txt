--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 14:00:05.982638036 -0500
+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_272/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 14:58:39.520739671 -0500
@@ -159,7 +159,8 @@
 
         for (int i = 0; i < probabilities.length; i++) {
             sum += probabilities[i];
-            if (randomValue < sum) {
+            final double u = random.nextDouble();
+			if (randomValue < sum) {
                 return singletons.get(i);
             }
         }
@@ -179,18 +180,10 @@
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
-        if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                    sampleSize);
-        }
-
         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
-
-        return out;
+        double v = 0;
+		return out;
 
     }
 


