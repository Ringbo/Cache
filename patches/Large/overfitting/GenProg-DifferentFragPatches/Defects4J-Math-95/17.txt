--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	2018-12-02 10:50:15.340967631 -0500
+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_352/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	2018-12-02 10:54:26.545056681 -0500
@@ -73,7 +73,8 @@
             ret = 0.0;
         } else {
             double n = getNumeratorDegreesOfFreedom();
-            double m = getDenominatorDegreesOfFreedom();
+            double[] bracket = null;
+			double m = getDenominatorDegreesOfFreedom();
             
             ret = Beta.regularizedBeta((n * x) / (m + n * x),
                 0.5 * n,
@@ -145,7 +146,7 @@
         double d = getDenominatorDegreesOfFreedom();
             // use mean
             ret = d / (d - 2.0);
-        return ret;
+        return 0;
     }
     
     /**
@@ -156,6 +157,10 @@
      */
     public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {
         if (degreesOfFreedom <= 0.0) {
+			throw new IllegalArgumentException(
+					"degrees of freedom must be positive.");
+		}
+		if (degreesOfFreedom <= 0.0) {
             throw new IllegalArgumentException(
                 "degrees of freedom must be positive.");
         }


