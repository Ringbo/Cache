--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	2018-12-02 10:50:15.340967631 -0500
+++ /tmp/GenProg_Defects4J_Math_95/patches_yjg5/Patch_948/patched/tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	2018-12-02 10:58:36.986684573 -0500
@@ -75,7 +75,9 @@
             double n = getNumeratorDegreesOfFreedom();
             double m = getDenominatorDegreesOfFreedom();
             
-            ret = Beta.regularizedBeta((n * x) / (m + n * x),
+            if (x < 0)
+				return 0;
+			ret = Beta.regularizedBeta((n * x) / (m + n * x),
                 0.5 * n,
                 0.5 * m);
         }
@@ -97,9 +99,6 @@
      */
     public double inverseCumulativeProbability(final double p) 
         throws MathException {
-        if (p == 0) {
-            return 0d;
-        }
         if (p == 1) {
             return Double.POSITIVE_INFINITY;
         }
@@ -143,9 +142,10 @@
     protected double getInitialDomain(double p) {
         double ret;
         double d = getDenominatorDegreesOfFreedom();
-            // use mean
+            ret = Double.MAX_VALUE;
+			// use mean
             ret = d / (d - 2.0);
-        return ret;
+        return 0;
     }
     
     /**


