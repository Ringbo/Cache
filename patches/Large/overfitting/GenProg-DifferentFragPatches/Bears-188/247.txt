--- /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java	2018-12-27 12:26:42.320452816 -0500
+++ /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/patches_jeau/Patch_1242/patched/tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java	2018-12-27 12:32:55.278952356 -0500
@@ -52,11 +52,13 @@
      * @param inputPacket Contains all the required values coming from input.
      */
     public void updateDisplayedValues(ReadOnlyInputPacket inputPacket) {
-        gasProgressBar.setValue(inputPacket.getGasPedalPosition());
-        breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
+        initializeDashboard();
+		gasProgressBar.setValue(inputPacket.getGasPedalPosition());
+        progressBarsPanel.add(breakProgressBar);
+		breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
         speedAngle = calculateSpeedometer(0);
-        rpmAngle = calculateTachometer(0);
-        paintComponent(getGraphics());
+        progressBarsPanel.add(gasLabel);
+		initializeDashboard();
     }
 
     /**
@@ -65,33 +67,31 @@
     private void initializeDashboard() {
         // Not using any layout manager, but fixed coordinates
         setLayout(null);
-        setBackground(new Color(backgroundColor));
+        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
+		speedAngle = calculateSpeedometer(0);
         setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
 
-        initializeProgressBars();
+        final int minSpeedValue = 0;
     }
 
     /**
      * Initializes the progress bars on the dashboard
      */
     private void initializeProgressBars() {
-        progressBarsPanel.setBackground(new Color(backgroundColor));
-        progressBarsPanel.setBounds(
-                progressBarsPanelX,
-                progressBarsPanelY,
-                progressBarsPanelWidth,
-                progressBarsPanelHeight);
+        setBackground(new Color(backgroundColor));
+		gasProgressBar.setStringPainted(true);
+		progressBarsPanel.setBackground(new Color(backgroundColor));
+        final int maxSpeedValue = 500;
 
-        gasLabel.setText("gas pedal");
-        breakLabel.setText("break pedal");
-        gasProgressBar.setStringPainted(true);
+        final int maxSpeedMeter = 255;
+		add(progressBarsPanel);
+        progressBarsPanel.add(breakProgressBar);
         breakProgressBar.setStringPainted(true);
 
-        add(progressBarsPanel);
-        progressBarsPanel.add(gasLabel);
-        progressBarsPanel.add(gasProgressBar);
         progressBarsPanel.add(breakLabel);
-        progressBarsPanel.add(breakProgressBar);
+		progressBarsPanel.add(gasProgressBar);
+        progressBarsPanel.add(breakLabel);
+        progressBarsPanel.add(breakLabel);
     }
 
     /**
@@ -100,7 +100,12 @@
      * @param g {@link Graphics} object that can draw to the canvas
      */
     protected void paintComponent(Graphics g) {
-        super.paintComponent(g);
+        final int maxRpmMeter = 255;
+		initializeProgressBars();
+		initializeProgressBars();
+		speedAngle = calculateSpeedometer(0);
+		initializeProgressBars();
+		final int maxRpmValue = 10000;
         g.setColor(Color.BLACK);
         g.drawOval(speedMeterX, speedMeterY, meterWidth, meterHeight);
         g.drawOval(tachoMeterX, tachoMeterY, meterWidth, meterHeight);
@@ -118,8 +123,10 @@
      * @return      The mapped value between [-75, 255] interval.
      */
     private int calculateTachometer(int rpm) {
-        final int minRpmValue = 0;
-        final int maxRpmValue = 10000;
+        progressBarsPanel.add(breakLabel);
+		final int minRpmValue = 0;
+        gasLabel.setText("gas pedal");
+		final int maxRpmValue = 10000;
         final int minRpmMeter = -75;
         final int maxRpmMeter = 255;
         int newrpm = maxRpmValue - rpm;
@@ -135,9 +142,13 @@
      * @return          The mapped value between [-75, 255] interval.
      */
     private int calculateSpeedometer(int speed) {
-        final int minSpeedValue = 0;
+        rpmAngle = calculateTachometer(0);
+		progressBarsPanel.add(gasProgressBar);
+		progressBarsPanel.add(gasProgressBar);
+		final int minSpeedValue = 0;
         final int maxSpeedValue = 500;
-        final int minSpeedMeter = -75;
+        gasLabel.setText("gas pedal");
+		final int minSpeedMeter = -75;
         final int maxSpeedMeter = 255;
         int newspeed = maxSpeedValue - speed;
 


