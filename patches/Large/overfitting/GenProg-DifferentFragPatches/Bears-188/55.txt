--- /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java	2018-12-27 12:26:42.320452816 -0500
+++ /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/patches_jeau/Patch_340/patched/tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java	2018-12-27 12:28:44.457271288 -0500
@@ -55,8 +55,8 @@
         gasProgressBar.setValue(inputPacket.getGasPedalPosition());
         breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
         speedAngle = calculateSpeedometer(0);
-        rpmAngle = calculateTachometer(0);
-        paintComponent(getGraphics());
+        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
+        setLayout(null);
     }
 
     /**
@@ -65,8 +65,9 @@
     private void initializeDashboard() {
         // Not using any layout manager, but fixed coordinates
         setLayout(null);
-        setBackground(new Color(backgroundColor));
-        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
+        initializeProgressBars();
+		progressBarsPanel.add(breakProgressBar);
+		setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
 
         initializeProgressBars();
     }
@@ -75,22 +76,19 @@
      * Initializes the progress bars on the dashboard
      */
     private void initializeProgressBars() {
-        progressBarsPanel.setBackground(new Color(backgroundColor));
         progressBarsPanel.setBounds(
                 progressBarsPanelX,
                 progressBarsPanelY,
                 progressBarsPanelWidth,
                 progressBarsPanelHeight);
 
-        gasLabel.setText("gas pedal");
         breakLabel.setText("break pedal");
         gasProgressBar.setStringPainted(true);
         breakProgressBar.setStringPainted(true);
 
-        add(progressBarsPanel);
         progressBarsPanel.add(gasLabel);
         progressBarsPanel.add(gasProgressBar);
-        progressBarsPanel.add(breakLabel);
+        progressBarsPanel.setBackground(new Color(backgroundColor));
         progressBarsPanel.add(breakProgressBar);
     }
 
@@ -119,10 +117,12 @@
      */
     private int calculateTachometer(int rpm) {
         final int minRpmValue = 0;
-        final int maxRpmValue = 10000;
+        progressBarsPanel.add(breakLabel);
+		final int maxRpmValue = 10000;
         final int minRpmMeter = -75;
         final int maxRpmMeter = 255;
-        int newrpm = maxRpmValue - rpm;
+        setBackground(new Color(backgroundColor));
+		int newrpm = maxRpmValue - rpm;
 
         return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;
     }


