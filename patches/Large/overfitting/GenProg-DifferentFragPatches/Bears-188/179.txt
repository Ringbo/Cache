--- /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java	2018-12-27 12:26:42.320452816 -0500
+++ /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/patches_jeau/Patch_334/patched/tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java	2018-12-27 12:28:42.449257830 -0500
@@ -55,20 +55,23 @@
         gasProgressBar.setValue(inputPacket.getGasPedalPosition());
         breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
         speedAngle = calculateSpeedometer(0);
-        rpmAngle = calculateTachometer(0);
-        paintComponent(getGraphics());
+        initializeDashboard();
+        setLayout(null);
     }
 
     /**
      * Initializes the dashboard components
      */
     private void initializeDashboard() {
-        // Not using any layout manager, but fixed coordinates
         setLayout(null);
         setBackground(new Color(backgroundColor));
-        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
+        progressBarsPanel.add(breakProgressBar);
+		setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
 
-        initializeProgressBars();
+        progressBarsPanel.add(breakLabel);
+		progressBarsPanel.add(breakLabel);
+		progressBarsPanel.add(breakLabel);
+		progressBarsPanel.add(breakLabel);
     }
 
     /**
@@ -76,22 +79,20 @@
      */
     private void initializeProgressBars() {
         progressBarsPanel.setBackground(new Color(backgroundColor));
-        progressBarsPanel.setBounds(
-                progressBarsPanelX,
-                progressBarsPanelY,
-                progressBarsPanelWidth,
-                progressBarsPanelHeight);
-
         gasLabel.setText("gas pedal");
-        breakLabel.setText("break pedal");
-        gasProgressBar.setStringPainted(true);
         breakProgressBar.setStringPainted(true);
+		breakLabel.setText("break pedal");
+        progressBarsPanel.setBounds(progressBarsPanelX, progressBarsPanelY,
+				progressBarsPanelWidth, progressBarsPanelHeight);
+        progressBarsPanel.setBackground(new Color(backgroundColor));
+		breakProgressBar.setStringPainted(true);
 
-        add(progressBarsPanel);
-        progressBarsPanel.add(gasLabel);
-        progressBarsPanel.add(gasProgressBar);
-        progressBarsPanel.add(breakLabel);
-        progressBarsPanel.add(breakProgressBar);
+        breakLabel.setText("break pedal");
+		add(progressBarsPanel);
+        setBackground(new Color(backgroundColor));
+        progressBarsPanel.setBackground(new Color(backgroundColor));
+        progressBarsPanel.setBounds(progressBarsPanelX, progressBarsPanelY,
+				progressBarsPanelWidth, progressBarsPanelHeight);
     }
 
     /**
@@ -100,7 +101,6 @@
      * @param g {@link Graphics} object that can draw to the canvas
      */
     protected void paintComponent(Graphics g) {
-        super.paintComponent(g);
         g.setColor(Color.BLACK);
         g.drawOval(speedMeterX, speedMeterY, meterWidth, meterHeight);
         g.drawOval(tachoMeterX, tachoMeterY, meterWidth, meterHeight);
@@ -136,9 +136,12 @@
      */
     private int calculateSpeedometer(int speed) {
         final int minSpeedValue = 0;
-        final int maxSpeedValue = 500;
-        final int minSpeedMeter = -75;
-        final int maxSpeedMeter = 255;
+        gasProgressBar.setStringPainted(true);
+		final int maxSpeedValue = 500;
+        final int minRpmMeter = -75;
+		final int minSpeedMeter = -75;
+        gasLabel.setText("gas pedal");
+		final int maxSpeedMeter = 255;
         int newspeed = maxSpeedValue - speed;
 
         return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter)


