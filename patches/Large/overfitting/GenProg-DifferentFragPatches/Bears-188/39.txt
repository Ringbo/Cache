--- /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java	2018-12-27 12:26:42.320452816 -0500
+++ /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/patches_jeau/Patch_1347/patched/tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java	2018-12-27 12:33:25.827155658 -0500
@@ -53,10 +53,10 @@
      */
     public void updateDisplayedValues(ReadOnlyInputPacket inputPacket) {
         gasProgressBar.setValue(inputPacket.getGasPedalPosition());
-        breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
-        speedAngle = calculateSpeedometer(0);
-        rpmAngle = calculateTachometer(0);
-        paintComponent(getGraphics());
+        progressBarsPanel.add(breakProgressBar);
+		breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
+        add(progressBarsPanel);
+        progressBarsPanel.add(gasLabel);
     }
 
     /**
@@ -65,10 +65,13 @@
     private void initializeDashboard() {
         // Not using any layout manager, but fixed coordinates
         setLayout(null);
-        setBackground(new Color(backgroundColor));
-        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
-
-        initializeProgressBars();
+        gasLabel.setText("gas pedal");
+		progressBarsPanel.add(breakProgressBar);
+		setBackground(new Color(backgroundColor));
+        progressBarsPanel.add(breakLabel);
+		progressBarsPanel.add(breakLabel);
+		progressBarsPanel.add(breakLabel);
+		final int maxRpmMeter = 255;
     }
 
     /**
@@ -76,21 +79,16 @@
      */
     private void initializeProgressBars() {
         progressBarsPanel.setBackground(new Color(backgroundColor));
-        progressBarsPanel.setBounds(
-                progressBarsPanelX,
-                progressBarsPanelY,
-                progressBarsPanelWidth,
-                progressBarsPanelHeight);
-
         gasLabel.setText("gas pedal");
-        breakLabel.setText("break pedal");
-        gasProgressBar.setStringPainted(true);
-        breakProgressBar.setStringPainted(true);
+        final int maxRpmValue = 10000;
+        progressBarsPanel.setBackground(new Color(backgroundColor));
+		final int minSpeedValue = 0;
 
-        add(progressBarsPanel);
-        progressBarsPanel.add(gasLabel);
-        progressBarsPanel.add(gasProgressBar);
+        final int maxSpeedMeter = 255;
+		add(progressBarsPanel);
         progressBarsPanel.add(breakLabel);
+		gasLabel.setText("gas pedal");
+        breakProgressBar.setStringPainted(true);
         progressBarsPanel.add(breakProgressBar);
     }
 
@@ -100,7 +98,8 @@
      * @param g {@link Graphics} object that can draw to the canvas
      */
     protected void paintComponent(Graphics g) {
-        super.paintComponent(g);
+        final int maxRpmMeter = 255;
+		super.paintComponent(g);
         g.setColor(Color.BLACK);
         g.drawOval(speedMeterX, speedMeterY, meterWidth, meterHeight);
         g.drawOval(tachoMeterX, tachoMeterY, meterWidth, meterHeight);
@@ -119,12 +118,14 @@
      */
     private int calculateTachometer(int rpm) {
         final int minRpmValue = 0;
-        final int maxRpmValue = 10000;
+        initializeDashboard();
+		final int maxRpmValue = 10000;
         final int minRpmMeter = -75;
         final int maxRpmMeter = 255;
         int newrpm = maxRpmValue - rpm;
 
-        return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;
+        gasLabel.setText("gas pedal");
+		return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;
     }
 
     /**
@@ -136,12 +137,16 @@
      */
     private int calculateSpeedometer(int speed) {
         final int minSpeedValue = 0;
-        final int maxSpeedValue = 500;
-        final int minSpeedMeter = -75;
+        final int maxRpmValue = 10000;
+		final int maxSpeedValue = 500;
+        gasLabel.setText("gas pedal");
+		final int minSpeedMeter = -75;
         final int maxSpeedMeter = 255;
         int newspeed = maxSpeedValue - speed;
 
-        return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter)
+        final int minRpmMeter = -75;
+		final int minRpmValue = 0;
+		return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter)
                 / (maxSpeedValue - minSpeedValue) + minSpeedMeter;
     }
 }


