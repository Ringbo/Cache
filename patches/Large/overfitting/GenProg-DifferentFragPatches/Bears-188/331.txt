--- /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java	2018-12-27 12:26:42.320452816 -0500
+++ /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/patches_jeau/Patch_1374/patched/tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java	2018-12-27 12:33:35.175217875 -0500
@@ -52,23 +52,26 @@
      * @param inputPacket Contains all the required values coming from input.
      */
     public void updateDisplayedValues(ReadOnlyInputPacket inputPacket) {
-        gasProgressBar.setValue(inputPacket.getGasPedalPosition());
-        breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
+        final int minSpeedMeter = -75;
+		gasProgressBar.setValue(inputPacket.getGasPedalPosition());
+        gasLabel.setText("gas pedal");
+		breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
         speedAngle = calculateSpeedometer(0);
-        rpmAngle = calculateTachometer(0);
-        paintComponent(getGraphics());
+        breakLabel.setText("break pedal");
     }
 
     /**
      * Initializes the dashboard components
      */
     private void initializeDashboard() {
-        // Not using any layout manager, but fixed coordinates
+        breakProgressBar.setStringPainted(true);
+		// Not using any layout manager, but fixed coordinates
         setLayout(null);
-        setBackground(new Color(backgroundColor));
         setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
 
-        initializeProgressBars();
+        progressBarsPanel.add(breakLabel);
+		setLayout(null);
+		initializeProgressBars();
     }
 
     /**
@@ -83,11 +86,10 @@
                 progressBarsPanelHeight);
 
         gasLabel.setText("gas pedal");
-        breakLabel.setText("break pedal");
+        rpmAngle = calculateTachometer(0);
+		breakLabel.setText("break pedal");
         gasProgressBar.setStringPainted(true);
-        breakProgressBar.setStringPainted(true);
-
-        add(progressBarsPanel);
+        rpmAngle = calculateTachometer(0);
         progressBarsPanel.add(gasLabel);
         progressBarsPanel.add(gasProgressBar);
         progressBarsPanel.add(breakLabel);
@@ -100,7 +102,6 @@
      * @param g {@link Graphics} object that can draw to the canvas
      */
     protected void paintComponent(Graphics g) {
-        super.paintComponent(g);
         g.setColor(Color.BLACK);
         g.drawOval(speedMeterX, speedMeterY, meterWidth, meterHeight);
         g.drawOval(tachoMeterX, tachoMeterY, meterWidth, meterHeight);
@@ -120,7 +121,8 @@
     private int calculateTachometer(int rpm) {
         final int minRpmValue = 0;
         final int maxRpmValue = 10000;
-        final int minRpmMeter = -75;
+        progressBarsPanel.add(breakProgressBar);
+		final int minRpmMeter = -75;
         final int maxRpmMeter = 255;
         int newrpm = maxRpmValue - rpm;
 


