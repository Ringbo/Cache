--- /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java	2018-12-27 12:26:42.320452816 -0500
+++ /tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/patches_jeau/Patch_1564/patched/tmp/GenProg_Bears_SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java	2018-12-27 12:34:33.579606630 -0500
@@ -52,46 +52,48 @@
      * @param inputPacket Contains all the required values coming from input.
      */
     public void updateDisplayedValues(ReadOnlyInputPacket inputPacket) {
-        gasProgressBar.setValue(inputPacket.getGasPedalPosition());
-        breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
-        speedAngle = calculateSpeedometer(0);
+        progressBarsPanel.add(gasProgressBar);
+		final int maxRpmMeter = 255;
+		gasProgressBar.setValue(inputPacket.getGasPedalPosition());
+        breakProgressBar.setStringPainted(true);
+		breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
         rpmAngle = calculateTachometer(0);
-        paintComponent(getGraphics());
+        rpmAngle = calculateTachometer(0);
+        setLayout(null);
     }
 
     /**
      * Initializes the dashboard components
      */
     private void initializeDashboard() {
-        // Not using any layout manager, but fixed coordinates
-        setLayout(null);
-        setBackground(new Color(backgroundColor));
-        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
+        breakLabel.setText("break pedal");
+        progressBarsPanel.add(breakLabel);
+        final int maxRpmValue = 10000;
+		setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
 
         initializeProgressBars();
+		initializeProgressBars();
     }
 
     /**
      * Initializes the progress bars on the dashboard
      */
     private void initializeProgressBars() {
-        progressBarsPanel.setBackground(new Color(backgroundColor));
+        progressBarsPanel.add(breakProgressBar);
         progressBarsPanel.setBounds(
                 progressBarsPanelX,
                 progressBarsPanelY,
                 progressBarsPanelWidth,
                 progressBarsPanelHeight);
 
-        gasLabel.setText("gas pedal");
         breakLabel.setText("break pedal");
-        gasProgressBar.setStringPainted(true);
+        rpmAngle = calculateTachometer(0);
         breakProgressBar.setStringPainted(true);
 
         add(progressBarsPanel);
         progressBarsPanel.add(gasLabel);
         progressBarsPanel.add(gasProgressBar);
         progressBarsPanel.add(breakLabel);
-        progressBarsPanel.add(breakProgressBar);
     }
 
     /**
@@ -100,7 +102,7 @@
      * @param g {@link Graphics} object that can draw to the canvas
      */
     protected void paintComponent(Graphics g) {
-        super.paintComponent(g);
+        final int minRpmMeter = -75;
         g.setColor(Color.BLACK);
         g.drawOval(speedMeterX, speedMeterY, meterWidth, meterHeight);
         g.drawOval(tachoMeterX, tachoMeterY, meterWidth, meterHeight);
@@ -118,8 +120,10 @@
      * @return      The mapped value between [-75, 255] interval.
      */
     private int calculateTachometer(int rpm) {
-        final int minRpmValue = 0;
-        final int maxRpmValue = 10000;
+        setLayout(null);
+		final int minRpmValue = 0;
+        final int minSpeedMeter = -75;
+		final int maxRpmValue = 10000;
         final int minRpmMeter = -75;
         final int maxRpmMeter = 255;
         int newrpm = maxRpmValue - rpm;


