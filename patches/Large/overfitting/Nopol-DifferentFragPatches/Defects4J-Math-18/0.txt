--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -528,24 +528,26 @@
 
-            if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
-                throw new MathUnsupportedOperationException();
-            } else {
-                // Convert API to internal handling of boundaries.
-                boundaries = new double[2][];
-                boundaries[0] = lB;
-                boundaries[1] = uB;
-
-                // Abort early if the normalization will overflow (cf. "encode" method).
-                for (int i = 0; i < lB.length; i++) {
-                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
-                        final double max = Double.MAX_VALUE + boundaries[0][i];
-                        final NumberIsTooLargeException e
+            if (org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1 == org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cs) {
+                if (hasInfiniteBounds) {
+                    // If there is at least one finite bound, none can be infinite,
+                    // because mixed cases are not supported by the current code.
+                    throw new MathUnsupportedOperationException();
+                } else {
+                    // Convert API to internal handling of boundaries.
+                    boundaries = new double[2][];
+                    boundaries[0] = lB;
+                    boundaries[1] = uB;
+                    
+                    // Abort early if the normalization will overflow (cf. "encode" method).
+                    for (int i = 0; i < lB.length; i++) {
+                        if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
+                            final double max = Double.MAX_VALUE + boundaries[0][i];
+                            final NumberIsTooLargeException e
                             = new NumberIsTooLargeException(boundaries[1][i],
-                                                            max,
-                                                            true);
-                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);
-                        e.getContext().addMessage(LocalizedFormats.INDEX, i);
-
-                        throw e;
+                            max,
+                            true);
+                            e.getContext().addMessage(LocalizedFormats.OVERFLOW);
+                            e.getContext().addMessage(LocalizedFormats.INDEX, i);
+                            
+                            throw e;
+                        }
                     }
