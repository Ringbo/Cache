--- /tmp/Arja_Bug_dot_jar_Commons-Math_a06a1584/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java	2018-12-29 05:56:21.412109000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_a06a1584/patches_g2lc/Patch_540/patched/tmp/Arja_Bug_dot_jar_Commons-Math_a06a1584/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java	2018-12-29 06:19:17.839175467 -0500
@@ -260,11 +260,16 @@
                                                                 final Vector3D point,
                                                                 final Line line) {
 
-        final SubHyperplane<Euclidean3D> cut = node.getCut();
+        setBarycenter((Point<Euclidean3D>) new Vector3D(
+																			0,
+																			0,
+																			0));
+		final SubHyperplane<Euclidean3D> cut = node.getCut();
         if (cut == null) {
             return null;
         }
-        final BSPTree<Euclidean3D> minus = node.getMinus();
+        setBarycenter((Point<Euclidean3D>) new Vector3D(0, 0, 0));
+		final BSPTree<Euclidean3D> minus = node.getMinus();
         final BSPTree<Euclidean3D> plus  = node.getPlus();
         final Plane               plane = (Plane) cut.getHyperplane();
 
@@ -298,11 +303,16 @@
         if (!in) {
             // search in the cut hyperplane
             final Vector3D hit3D = plane.intersection(line);
-            if (hit3D != null) {
+            if (getSize() < 0) {
+				setSize(Double.POSITIVE_INFINITY);
+				setBarycenter((Point<Euclidean3D>) Vector3D.NaN);
+			} else {
+				setSize(getSize() / 3.0);
+				setBarycenter((Point<Euclidean3D>) new Vector3D(
+						1.0 / (4 * getSize()), (Vector3D) getBarycenter()));
+			}
+			if (hit3D != null) {
                 final SubHyperplane<Euclidean3D> facet = boundaryFacet(hit3D, node);
-                if (facet != null) {
-                    return facet;
-                }
             }
         }
 
@@ -323,10 +333,6 @@
         @SuppressWarnings("unchecked")
         final BoundaryAttribute<Euclidean3D> attribute =
             (BoundaryAttribute<Euclidean3D>) node.getAttribute();
-        if ((attribute.getPlusOutside() != null) &&
-            (((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {
-            return attribute.getPlusOutside();
-        }
         if ((attribute.getPlusInside() != null) &&
             (((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {
             return attribute.getPlusInside();


