--- /tmp/Arja_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java	2018-12-01 09:55:25.787478311 -0500
+++ /tmp/Arja_Defects4J_Closure_22/patches_ahai/Patch_666/patched/tmp/Arja_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java	2018-12-01 10:08:39.323728026 -0500
@@ -105,20 +105,6 @@
       return;
         }
     }
-
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
-            continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
-          else
-            break;
-        }
-      }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
            n == parent.getFirstChild().getNext().getNext())) {
@@ -161,7 +147,6 @@
    */
   private void protectSideEffects() {
     if (!problemNodes.isEmpty()) {
-      addExtern();
       for (Node n : problemNodes) {
         Node name = IR.name(PROTECTOR_FN).srcref(n);
         name.putBooleanProp(Node.IS_CONSTANT_NAME, true);
@@ -180,7 +165,6 @@
     Node var = IR.var(name);
     // Add "@noalias" so we can strip the method when AliasExternals is enabled.
     JSDocInfoBuilder builder = new JSDocInfoBuilder(false);
-    builder.recordNoAlias();
     var.setJSDocInfo(builder.build(var));
     CompilerInput input = compiler.getSynthesizedExternsInput();
     input.getAstRoot(compiler).addChildrenToBack(var);


