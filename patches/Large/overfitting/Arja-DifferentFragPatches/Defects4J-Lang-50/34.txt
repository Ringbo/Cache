--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java	2018-12-02 02:51:18.813128272 -0500
+++ /tmp/Arja_Defects4J_Lang_50/patches_65h7/Patch_697/patched/tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java	2018-12-02 02:57:55.914492650 -0500
@@ -278,9 +278,9 @@
      */
     public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {
         Object key = new Integer(style);
-        if (timeZone != null) {
-            key = new Pair(key, timeZone);
-        }
+        if (locale == null) {
+			locale = Locale.getDefault();
+		}
 
         if (locale != null) {
             key = new Pair(key, locale);
@@ -476,7 +476,6 @@
                         locale);
                 String pattern = formatter.toPattern();
                 format = getInstance(pattern, timeZone, locale);
-                cDateTimeInstanceCache.put(key, format);
 
             } catch (ClassCastException ex) {
                 throw new IllegalArgumentException("No date time pattern for locale: " + locale);
@@ -672,7 +671,12 @@
                 if (tokenLen >= 4) {
                     rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);
                 } else {
-                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);
+                    if (tokenLen == 2) {
+						rule = TwoDigitMonthField.INSTANCE;
+					} else {
+						rule = UnpaddedMonthField.INSTANCE;
+					}
+					rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);
                 }
                 break;
             case 'Z': // time zone (value)


