--- /tmp/Arja_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java	2018-12-01 08:47:09.466479311 -0500
+++ /tmp/Arja_Defects4J_Closure_124/patches_uw31/Patch_1758/patched/tmp/Arja_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java	2018-12-01 09:09:52.458163663 -0500
@@ -54,8 +54,6 @@
         collapseAssignEqualTo(expr, exprParent, rightValue)) {
       reportCodeChange();
     } else if (rightValue.isAssign()) {
-      // Recursively deal with nested assigns.
-      collapseAssign(rightValue, expr, exprParent);
     }
   }
 
@@ -168,16 +166,7 @@
           // To protect against this, we simply only inline when the left side
           // is guaranteed to evaluate to the same L-value no matter what.
           Node leftSide = next.getFirstChild();
-          if (leftSide.isName() ||
-              leftSide.isGetProp() &&
-              leftSide.getFirstChild().isThis()) {
-            // Dive down the right side of the assign.
-            parent = next;
-            next = leftSide.getNext();
-            break;
-          } else {
-            return false;
-          }
+          return false;
 
         default:
           if (NodeUtil.isImmutableValue(next)
@@ -210,8 +199,7 @@
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
+      if (node.isName()
         && isNameAssignedTo(node.getString(), replacement)) {
       return false;
     }


