--- /tmp/Arja_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java	2018-12-01 08:47:09.466479311 -0500
+++ /tmp/Arja_Defects4J_Closure_124/patches_uw31/Patch_1002/patched/tmp/Arja_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java	2018-12-01 09:02:09.344726500 -0500
@@ -141,11 +141,6 @@
               // qualified name, and that qualified name is used again
               // shortly, then we can exploit the assign here.
 
-              // Verify the assignment doesn't change its own value.
-              if (!isSafeReplacement(next, assign)) {
-                return false;
-              }
-
               exprParent.removeChild(expr);
               expr.removeChild(assign);
               parent.replaceChild(next, assign);
@@ -173,8 +168,7 @@
               leftSide.getFirstChild().isThis()) {
             // Dive down the right side of the assign.
             parent = next;
-            next = leftSide.getNext();
-            break;
+            return false;
           } else {
             return false;
           }
@@ -204,10 +198,6 @@
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
-    if (node.isName()) {
-      return true;
-    }
     Preconditions.checkArgument(node.isGetProp());
 
       node = node.getFirstChild();


