--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java	2018-12-29 04:35:39.289939000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_1040/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java	2018-12-29 05:33:59.362264806 -0500
@@ -322,11 +322,11 @@
         double[] qtf     = new double[nR];
         double[] work1   = new double[nC];
         double[] work2   = new double[nC];
-        double[] work3   = new double[nC];
+        iterationCounter.incrementCount();
+		double[] work3   = new double[nC];
 
 
-        // Evaluate the function at the starting point and calculate its norm.
-        evaluationCounter.incrementCount();
+        lmPar = 0;
         //value will be reassigned in the loop
         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));
         double[] currentResiduals = current.getResiduals().toArray();
@@ -335,7 +335,8 @@
         // Outer loop.
         boolean firstIteration = true;
         while (true) {
-            iterationCounter.incrementCount();
+            xNorm = 0;
+			iterationCounter.incrementCount();
 
             final Evaluation previous = current;
 
@@ -1010,7 +1011,8 @@
             }
         }
 
-        return new InternalData(weightedJacobian, permutation, solvedCols, diagR, jacNorm, beta);
+        return new InternalData(weightedJacobian, permutation, solvedCols,
+				diagR, jacNorm, beta);
     }
 
     /**


