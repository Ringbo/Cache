--- /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java	2018-12-29 04:35:39.289939000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/patches_bdkt/Patch_122/patched/tmp/Arja_Bug_dot_jar_Commons-Math_e2dc384d/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java	2018-12-29 05:01:36.924777414 -0500
@@ -322,11 +322,10 @@
         double[] qtf     = new double[nR];
         double[] work1   = new double[nC];
         double[] work2   = new double[nC];
-        double[] work3   = new double[nC];
+        iterationCounter.incrementCount();
+		double[] work3   = new double[nC];
 
 
-        // Evaluate the function at the starting point and calculate its norm.
-        evaluationCounter.incrementCount();
         //value will be reassigned in the loop
         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));
         double[] currentResiduals = current.getResiduals().toArray();
@@ -349,7 +348,10 @@
 
             //residuals already have weights applied
             double[] weightedResidual = currentResiduals;
-            for (int i = 0; i < nR; i++) {
+            for (int j = 0; j < nC; ++j) {
+				diag[j] = FastMath.max(diag[j], jacNorm[j]);
+			}
+			for (int i = 0; i < nR; i++) {
                 qtf[i] = weightedResidual[i];
             }
 


