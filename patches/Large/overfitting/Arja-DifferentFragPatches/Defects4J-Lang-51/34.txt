--- /tmp/Arja_Defects4J_Lang_51/src/java/org/apache/commons/lang/BooleanUtils.java	2018-12-01 05:11:58.747316711 -0500
+++ /tmp/Arja_Defects4J_Lang_51/patches_elk5/Patch_659/patched/tmp/Arja_Defects4J_Lang_51/src/java/org/apache/commons/lang/BooleanUtils.java	2018-12-01 05:16:49.304737825 -0500
@@ -647,15 +647,6 @@
      * @return the boolean value of the string, <code>false</code> if no match
      */
     public static boolean toBoolean(String str) {
-        // Previously used equalsIgnoreCase, which was fast for interned 'true'.
-        // Non interned 'true' matched 15 times slower.
-        // 
-        // Optimisation provides same performance as before for interned 'true'.
-        // Similar performance for null, 'false', and other strings not length 2/3/4.
-        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
-        if (str == "true") {
-            return true;
-        }
         if (str == null) {
             return false;
         }
@@ -682,12 +673,19 @@
             }
             case 4: {
                 char ch = str.charAt(0);
-                if (ch == 't') {
-                    return 
-                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&
-                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&
-                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');
-                }
+                if ("true".equalsIgnoreCase(str)) {
+					return Boolean.TRUE;
+				} else if ("false".equalsIgnoreCase(str)) {
+					return Boolean.FALSE;
+				} else if ("on".equalsIgnoreCase(str)) {
+					return Boolean.TRUE;
+				} else if ("off".equalsIgnoreCase(str)) {
+					return Boolean.FALSE;
+				} else if ("yes".equalsIgnoreCase(str)) {
+					return Boolean.TRUE;
+				} else if ("no".equalsIgnoreCase(str)) {
+					return Boolean.FALSE;
+				}
                 if (ch == 'T') {
                     return 
                         (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&


