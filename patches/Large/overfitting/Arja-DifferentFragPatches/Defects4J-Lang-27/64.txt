--- /tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2018-12-01 05:16:07.026060969 -0500
+++ /tmp/Arja_Defects4J_Lang_27/patches_whwa/Patch_276/patched/tmp/Arja_Defects4J_Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2018-12-01 05:18:19.715050222 -0500
@@ -486,7 +486,7 @@
             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
-                mant = str.substring(0, expPos);
+                mant = str;
             } else {
                 mant = str;
             }
@@ -558,7 +558,10 @@
             } else {
                 exp = null;
             }
-            if (dec == null && exp == null) {
+            if (str.startsWith("0x") || str.startsWith("-0x")) {
+				return createInteger(str);
+			}
+			if (dec == null && exp == null) {
                 //Must be an int,long,bigint
                 try {
                     return createInteger(str);
@@ -566,7 +569,91 @@
                     // ignore the bad number
                 }
                 try {
-                    return createLong(str);
+                    if (!Character.isDigit(lastChar) && lastChar != '.') {
+						if (expPos > -1 && expPos < str.length() - 1) {
+							exp = str.substring(expPos + 1, str.length() - 1);
+						} else {
+							exp = null;
+						}
+						String numeric = str.substring(0, str.length() - 1);
+						boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+						switch (lastChar) {
+						case 'l':
+						case 'L':
+							if (dec == null
+									&& exp == null
+									&& (numeric.charAt(0) == '-'
+											&& isDigits(numeric.substring(1)) || isDigits(numeric))) {
+								try {
+									return createLong(numeric);
+								} catch (NumberFormatException nfe) {
+								}
+								return createBigInteger(numeric);
+							}
+							throw new NumberFormatException(str
+									+ " is not a valid number.");
+						case 'f':
+						case 'F':
+							try {
+								Float f = NumberUtils.createFloat(numeric);
+								if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+									return f;
+								}
+							} catch (NumberFormatException nfe) {
+							}
+						case 'd':
+						case 'D':
+							try {
+								Double d = NumberUtils.createDouble(numeric);
+								if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+									return d;
+								}
+							} catch (NumberFormatException nfe) {
+							}
+							try {
+								return createBigDecimal(numeric);
+							} catch (NumberFormatException e) {
+							}
+						default:
+							throw new NumberFormatException(str
+									+ " is not a valid number.");
+						}
+					} else {
+						if (expPos > -1 && expPos < str.length() - 1) {
+							exp = str.substring(expPos + 1, str.length());
+						} else {
+							exp = null;
+						}
+						if (dec == null && exp == null) {
+							try {
+								return createInteger(str);
+							} catch (NumberFormatException nfe) {
+							}
+							try {
+								return createLong(str);
+							} catch (NumberFormatException nfe) {
+							}
+							return createBigInteger(str);
+						} else {
+							boolean allZeros = isAllZeros(mant)
+									&& isAllZeros(exp);
+							try {
+								Float f = createFloat(str);
+								if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+									return f;
+								}
+							} catch (NumberFormatException nfe) {
+							}
+							try {
+								Double d = createDouble(str);
+								if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+									return d;
+								}
+							} catch (NumberFormatException nfe) {
+							}
+							return createBigDecimal(str);
+						}
+					}
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }


