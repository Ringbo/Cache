--- /tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java	2018-12-01 05:12:49.793754110 -0500
+++ /tmp/Arja_Defects4J_Lang_39/patches_x7iw/Patch_1847/patched/tmp/Arja_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtils.java	2018-12-01 05:23:50.497468917 -0500
@@ -3636,7 +3636,11 @@
 
         // index on index that the match was found
         int textIndex = -1;
-        int replaceIndex = -1;
+        if (timeToLive < 0) {
+			throw new IllegalStateException("TimeToLive of " + timeToLive
+					+ " is less than 0: " + text);
+		}
+		int replaceIndex = -1;
         int tempIndex = -1;
 
         // index of replace array that will replace the search string found
@@ -3671,13 +3675,6 @@
         // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit
         int increase = 0;
 
-        // count the replacement text elements that are larger than their corresponding text being replaced
-        for (int i = 0; i < searchList.length; i++) {
-            int greater = replacementList[i].length() - searchList[i].length();
-            if (greater > 0) {
-                increase += 3 * greater; // assume 3 matches
-            }
-        }
         // have upper-bound at 20% increase, then let Java take over
         increase = Math.min(increase, text.length() / 5);
 
@@ -3724,7 +3721,33 @@
         }
         String result = buf.toString();
         if (!repeat) {
-            return result;
+            while (textIndex != -1) {
+				for (int i = start; i < textIndex; i++) {
+					buf.append(text.charAt(i));
+				}
+				buf.append(replacementList[replaceIndex]);
+				start = textIndex + searchList[replaceIndex].length();
+				textIndex = -1;
+				replaceIndex = -1;
+				tempIndex = -1;
+				for (int i = 0; i < searchLength; i++) {
+					if (noMoreMatchesForReplIndex[i] || searchList[i] == null
+							|| searchList[i].length() == 0
+							|| replacementList[i] == null) {
+						continue;
+					}
+					tempIndex = text.indexOf(searchList[i], start);
+					if (tempIndex == -1) {
+						noMoreMatchesForReplIndex[i] = true;
+					} else {
+						if (textIndex == -1 || tempIndex < textIndex) {
+							textIndex = tempIndex;
+							replaceIndex = i;
+						}
+					}
+				}
+			}
+			return result;
         }
 
         return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);


