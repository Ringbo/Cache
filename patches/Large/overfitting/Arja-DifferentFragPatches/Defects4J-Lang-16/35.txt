--- /tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2018-12-01 05:13:40.712736534 -0500
+++ /tmp/Arja_Defects4J_Lang_16/patches_of36/Patch_511/patched/tmp/Arja_Defects4J_Lang_16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2018-12-01 05:17:17.552137294 -0500
@@ -448,16 +448,13 @@
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }  
-        if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
-            return null;
-        }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
-            return createInteger(str);
-        }   
+        if (str == null) {
+			throw new IllegalArgumentException("The string must not be null");
+		}
+        if (StringUtils.isBlank(str)) {
+			throw new NumberFormatException(
+					"A blank string is not a valid number");
+		}   
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
@@ -516,7 +513,10 @@
                     try {
                         Float f = NumberUtils.createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
+                            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+								return f;
+							}
+							//If it's too big for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
@@ -542,7 +542,7 @@
                     }
                     //$FALL-THROUGH$
                 default :
-                    throw new NumberFormatException(str + " is not a valid number.");
+				return Integer.decode(str);
 
             }
         } else {


