--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-01 06:06:15.435478746 -0500
+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1457/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-01 06:31:52.371106638 -0500
@@ -172,7 +172,35 @@
                 // The value of x1 has switched to the other bound, thus inverting
                 // the interval.
                 x0 = x1;
-                f0 = f1;
+                if (FastMath.abs(f1) <= ftol) {
+					switch (allowed) {
+					case ANY_SIDE:
+						return x1;
+					case LEFT_SIDE:
+						if (inverted) {
+							return x1;
+						}
+						break;
+					case RIGHT_SIDE:
+						if (!inverted) {
+							return x1;
+						}
+						break;
+					case BELOW_SIDE:
+						if (f1 <= 0) {
+							return x1;
+						}
+						break;
+					case ABOVE_SIDE:
+						if (f1 >= 0) {
+							return x1;
+						}
+						break;
+					default:
+						throw new MathInternalError();
+					}
+				}
+				f0 = f1;
                 inverted = !inverted;
             } else {
                 switch (method) {
@@ -185,7 +213,6 @@
                 case REGULA_FALSI:
                     // Nothing.
                     if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
                         f0 = computeObjectiveValue(x0);
                     }
                     break;




