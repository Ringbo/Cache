--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-01 06:06:15.435478746 -0500
+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_540/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-01 06:24:43.452176305 -0500
@@ -158,7 +158,35 @@
         while (true) {
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
-            final double fx = computeObjectiveValue(x);
+            if (FastMath.abs(f1) <= ftol) {
+				switch (allowed) {
+				case ANY_SIDE:
+					return x1;
+				case LEFT_SIDE:
+					if (inverted) {
+						return x1;
+					}
+					break;
+				case RIGHT_SIDE:
+					if (!inverted) {
+						return x1;
+					}
+					break;
+				case BELOW_SIDE:
+					if (f1 <= 0) {
+						return x1;
+					}
+					break;
+				case ABOVE_SIDE:
+					if (f1 >= 0) {
+						return x1;
+					}
+					break;
+				default:
+					throw new MathInternalError();
+				}
+			}
+			final double fx = computeObjectiveValue(x);
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
@@ -185,7 +213,10 @@
                 case REGULA_FALSI:
                     // Nothing.
                     if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+                        if (FastMath.abs(x1 - x0) < FastMath.max(rtol
+								* FastMath.abs(x1), atol)) {
+							return x1;
+						}
                         f0 = computeObjectiveValue(x0);
                     }
                     break;


