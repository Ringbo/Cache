--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-01 06:06:15.435478746 -0500
+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1651/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-01 06:33:39.582830318 -0500
@@ -132,12 +132,6 @@
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
-        if (f0 == 0.0) {
-            return x0;
-        }
         if (f1 == 0.0) {
             return x1;
         }
@@ -169,7 +163,24 @@
 
             // Update the bounds with the new approximation.
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
+                if (FastMath.abs(x1 - x0) < FastMath.max(
+						rtol * FastMath.abs(x1), atol)) {
+					switch (allowed) {
+					case ANY_SIDE:
+						return x1;
+					case LEFT_SIDE:
+						return inverted ? x1 : x0;
+					case RIGHT_SIDE:
+						return inverted ? x0 : x1;
+					case BELOW_SIDE:
+						return (f1 <= 0) ? x1 : x0;
+					case ABOVE_SIDE:
+						return (f1 >= 0) ? x1 : x0;
+					default:
+						throw new MathInternalError();
+					}
+				}
+				// The value of x1 has switched to the other bound, thus inverting
                 // the interval.
                 x0 = x1;
                 f0 = f1;
@@ -185,7 +196,6 @@
                 case REGULA_FALSI:
                     // Nothing.
                     if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
                         f0 = computeObjectiveValue(x0);
                     }
                     break;


