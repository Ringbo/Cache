--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-01 06:06:15.435478746 -0500
+++ /tmp/Arja_Defects4J_Math_50/patches_rr9g/Patch_1375/patched/tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-01 06:31:14.919203660 -0500
@@ -156,7 +156,24 @@
 
         // Keep finding better approximations.
         while (true) {
-            // Calculate the next approximation.
+            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
+					atol)) {
+				switch (allowed) {
+				case ANY_SIDE:
+					return x1;
+				case LEFT_SIDE:
+					return inverted ? x1 : x0;
+				case RIGHT_SIDE:
+					return inverted ? x0 : x1;
+				case BELOW_SIDE:
+					return (f1 <= 0) ? x1 : x0;
+				case ABOVE_SIDE:
+					return (f1 >= 0) ? x1 : x0;
+				default:
+					throw new MathInternalError();
+				}
+			}
+			// Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
 
@@ -185,7 +202,7 @@
                 case REGULA_FALSI:
                     // Nothing.
                     if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+                        x1 = x;
                         f0 = computeObjectiveValue(x0);
                     }
                     break;


