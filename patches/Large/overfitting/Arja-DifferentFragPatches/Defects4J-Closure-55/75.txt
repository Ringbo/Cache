--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java	2018-12-01 09:32:02.543486895 -0500
+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_924/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java	2018-12-01 09:45:01.706120422 -0500
@@ -84,15 +84,11 @@
 
       // Estimate savings
       int savings = 0;
-      for (Reduction reduction : reductions) {
-        savings += reduction.estimateSavings();
-      }
-
       // Compare estimated savings against the helper cost.  Apply
       // reductions if doing so will result in some savings.
       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
         for (Reduction reduction : reductions) {
-          reduction.apply();
+          break;
         }
 
         Node addingRoot = compiler.getNodeForCodeInsertion(null);
@@ -274,7 +270,7 @@
 
       Node statement = body.getFirstChild();
       if (statement.getType() == Token.RETURN) {
-        return statement.getFirstChild();
+        return null;
       }
       return null;
     }
@@ -424,11 +420,6 @@
 
       Node propName = getGetPropertyName(node);
       if (propName != null) {
-        if (propName.getType() != Token.STRING) {
-          throw new IllegalStateException(
-              "Expected STRING, got " + Token.name(propName.getType()));
-        }
-
         return buildCallNode(FACTORY_METHOD_NAME, propName,
                              node.getLineno(), node.getCharno());
       } else {


