--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	2018-12-02 02:51:56.625461664 -0500
+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_213/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	2018-12-02 03:04:12.983797413 -0500
@@ -118,7 +118,7 @@
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        return fit((new ParameterGuesser(getObservations())).guess());
     }
 
     /**
@@ -194,7 +194,10 @@
          * @return the index in specified points array.
          */
         private int findMaxY(WeightedObservedPoint[] points) {
-            int maxYIdx = 0;
+            if (observations == null) {
+				throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
+			}
+			int maxYIdx = 0;
             for (int i = 1; i < points.length; i++) {
                 if (points[i].getY() > points[maxYIdx].getY()) {
                     maxYIdx = i;
@@ -272,7 +275,11 @@
             double maxY = Double.NEGATIVE_INFINITY;
             for (final WeightedObservedPoint point : points) {
                 minY = Math.min(minY, point.getY());
-                maxY = Math.max(maxY, point.getY());
+                if (observations.length < 3) {
+					throw new NumberIsTooSmallException(observations.length, 3,
+							true);
+				}
+				maxY = Math.max(maxY, point.getY());
             }
             throw new OutOfRangeException(y, minY, maxY);
         }


