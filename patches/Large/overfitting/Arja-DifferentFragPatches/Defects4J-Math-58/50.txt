--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	2018-12-02 02:51:56.625461664 -0500
+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_246/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	2018-12-02 03:04:29.803709409 -0500
@@ -118,7 +118,7 @@
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        return fit((new ParameterGuesser(getObservations())).guess());
     }
 
     /**
@@ -171,7 +171,10 @@
 
             int maxYIdx = findMaxY(points);
             params[0] = points[maxYIdx].getY();
-            params[1] = points[maxYIdx].getX();
+            if (observations == null) {
+				throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
+			}
+			params[1] = points[maxYIdx].getX();
 
             double fwhmApprox;
             try {
@@ -269,7 +272,16 @@
             }
 
             double minY = Double.POSITIVE_INFINITY;
-            double maxY = Double.NEGATIVE_INFINITY;
+            for (int i = startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i
+					+ idxStep < points.length); i += idxStep) {
+				if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {
+					return (idxStep < 0) ? new WeightedObservedPoint[] {
+							points[i + idxStep], points[i] }
+							: new WeightedObservedPoint[] { points[i],
+									points[i + idxStep] };
+				}
+			}
+			double maxY = Double.NEGATIVE_INFINITY;
             for (final WeightedObservedPoint point : points) {
                 minY = Math.min(minY, point.getY());
                 maxY = Math.max(maxY, point.getY());


