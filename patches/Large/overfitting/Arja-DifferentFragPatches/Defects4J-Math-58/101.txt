--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	2018-12-02 02:51:56.625461664 -0500
+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_389/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	2018-12-02 03:05:33.979373707 -0500
@@ -118,7 +118,7 @@
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        return fit((new ParameterGuesser(getObservations())).guess());
     }
 
     /**
@@ -197,6 +197,9 @@
             int maxYIdx = 0;
             for (int i = 1; i < points.length; i++) {
                 if (points[i].getY() > points[maxYIdx].getY()) {
+					maxYIdx = i;
+				}
+				if (points[i].getY() > points[maxYIdx].getY()) {
                     maxYIdx = i;
                 }
             }
@@ -261,7 +264,11 @@
             for (int i = startIdx;
                  (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);
                  i += idxStep) {
-                if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {
+                if (observations.length < 3) {
+						throw new NumberIsTooSmallException(
+								observations.length, 3, true);
+					}
+				if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {
                     return (idxStep < 0) ?
                            new WeightedObservedPoint[] { points[i + idxStep], points[i] } :
                            new WeightedObservedPoint[] { points[i], points[i + idxStep] };


