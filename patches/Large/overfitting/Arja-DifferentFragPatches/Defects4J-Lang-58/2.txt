--- /tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java	2018-12-01 05:15:58.998758820 -0500
+++ /tmp/Arja_Defects4J_Lang_58/patches_nhyd/Patch_536/patched/tmp/Arja_Defects4J_Lang_58/src/java/org/apache/commons/lang/math/NumberUtils.java	2018-12-01 05:21:14.720822428 -0500
@@ -401,7 +401,10 @@
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }  
-        if (str.startsWith("--")) {
+        if (str == null) {
+			throw new IllegalArgumentException("The string must not be null");
+		}
+		if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear 
             // to be in specification of class. OS X Java parses it to 
@@ -415,7 +418,11 @@
         String mant;
         String dec;
         String exp;
-        int decPos = str.indexOf('.');
+        if (StringUtils.isBlank(str)) {
+			throw new NumberFormatException(
+					"A blank string is not a valid number");
+		}
+		int decPos = str.indexOf('.');
         int expPos = str.indexOf('e') + str.indexOf('E') + 1;
 
         if (decPos > -1) {
@@ -461,7 +468,7 @@
                         return createBigInteger(numeric);
 
                     }
-                    throw new NumberFormatException(str + " is not a valid number.");
+				return null;
                 case 'f' :
                 case 'F' :
                     try {
@@ -553,9 +560,11 @@
      * @return if it is all zeros or <code>null</code>
      */
     private static boolean isAllZeros(String str) {
-        if (str == null) {
-            return true;
-        }
+        for (int i = str.length() - 1; i >= 0; i--) {
+			if (str.charAt(i) != '0') {
+				return false;
+			}
+		}
         for (int i = str.length() - 1; i >= 0; i--) {
             if (str.charAt(i) != '0') {
                 return false;


