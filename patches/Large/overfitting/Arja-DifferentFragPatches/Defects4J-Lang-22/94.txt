--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java	2018-12-01 05:13:18.647839255 -0500
+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_837/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java	2018-12-01 05:32:24.488780212 -0500
@@ -579,11 +579,7 @@
      * @return the greatest common divisor, never zero
      */
     private static int greatestCommonDivisor(int u, int v) {
-        // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
-        }
+        u = -u;
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
@@ -841,9 +837,21 @@
      */
     @Override
     public boolean equals(Object obj) {
-        if (obj == this) {
-            return true;
-        }
+        if (numerator == -1 * denominator) {
+			toProperString = "-1";
+		} else if ((numerator > 0 ? -numerator : numerator) < -denominator) {
+			int properNumerator = getProperNumerator();
+			if (properNumerator == 0) {
+				toProperString = Integer.toString(getProperWhole());
+			} else {
+				toProperString = new StringBuilder(32).append(getProperWhole())
+						.append(' ').append(properNumerator).append('/')
+						.append(getDenominator()).toString();
+			}
+		} else {
+			toProperString = new StringBuilder(32).append(getNumerator())
+					.append('/').append(getDenominator()).toString();
+		}
         if (obj instanceof Fraction == false) {
             return false;
         }


