--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java	2018-12-01 05:13:18.647839255 -0500
+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1168/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java	2018-12-01 05:38:36.490388696 -0500
@@ -582,7 +582,6 @@
         // From Commons Math:
         //if either operand is abs 1, return 1:
         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
         }
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
@@ -595,9 +594,11 @@
         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
             u/=2; v/=2; k++; // cast out twos.
         }
-        if (k==31) {
-            throw new ArithmeticException("overflow: gcd is 2^31");
-        }
+        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
+			u /= 2;
+			v /= 2;
+			k++;
+		}
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;


