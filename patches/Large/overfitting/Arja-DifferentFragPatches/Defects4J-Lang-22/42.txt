--- /tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java	2018-12-01 05:13:18.647839255 -0500
+++ /tmp/Arja_Defects4J_Lang_22/patches_2h8q/Patch_1228/patched/tmp/Arja_Defects4J_Lang_22/src/main/java/org/apache/commons/lang3/math/Fraction.java	2018-12-01 05:39:45.986689038 -0500
@@ -579,11 +579,9 @@
      * @return the greatest common divisor, never zero
      */
     private static int greatestCommonDivisor(int u, int v) {
-        // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
-        }
+        if (u > 0) {
+			u = -u;
+		}
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
@@ -615,7 +613,10 @@
             } else {
                 v = t;
             }
-            // B6/B3. at this point both u and v should be odd.
+            if (k == 31) {
+				throw new ArithmeticException("overflow: gcd is 2^31");
+			}
+			// B6/B3. at this point both u and v should be odd.
             t = (v - u)/2;
             // |u| larger: t positive (replace u)
             // |v| larger: t negative (replace v)


