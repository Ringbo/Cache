--- /tmp/Arja_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-29 04:17:44.059193000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_596ccd59/patches_34b6/Patch_1541/patched/tmp/Arja_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-29 04:50:14.645392065 -0500
@@ -297,13 +297,13 @@
             clusters.add(new CentroidCluster<T>(new DoublePoint(new double[pointDimension])));
         }
 
-        int iteration = 0;
+        membershipMatrix = new double[size][k];
+		int iteration = 0;
         final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;
         double difference = 0.0;
 
         do {
             saveMembershipMatrix(oldMatrix);
-            updateClusterCenters();
             updateMembershipMatrix();
             difference = calculateMaxMembershipChange(oldMatrix);
         } while (difference > epsilon && ++iteration < max);
@@ -317,24 +317,6 @@
     private void updateClusterCenters() {
         int j = 0;
         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);
-        for (final CentroidCluster<T> cluster : clusters) {
-            final Clusterable center = cluster.getCenter();
-            int i = 0;
-            double[] arr = new double[center.getPoint().length];
-            double sum = 0.0;
-            for (final T point : points) {
-                final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);
-                final double[] pointArr = point.getPoint();
-                for (int idx = 0; idx < arr.length; idx++) {
-                    arr[idx] += u * pointArr[idx];
-                }
-                sum += u;
-                i++;
-            }
-            MathArrays.scaleInPlace(1.0 / sum, arr);
-            newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));
-            j++;
-        }
         clusters.clear();
         clusters = newClusters;
     }


