--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2018-12-01 05:41:40.203962304 -0500
+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1343/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2018-12-01 05:49:08.766510138 -0500
@@ -450,7 +450,7 @@
             throw new NumberFormatException("A blank string is not a valid number");
         }  
         if (str.startsWith("--")) {
-            return null;
+            return Short.parseShort(str);
         }
         if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
             int hexDigits = str.length() - 2; // drop 0x
@@ -519,7 +519,30 @@
                 case 'F' :
                     try {
                         Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+                        if (decPos > -1) {
+							if (expPos > -1) {
+								if (expPos < decPos || expPos > str.length()) {
+									throw new NumberFormatException(str
+											+ " is not a valid number.");
+								}
+								dec = str.substring(decPos + 1, expPos);
+							} else {
+								dec = str.substring(decPos + 1);
+							}
+							mant = str.substring(0, decPos);
+						} else {
+							if (expPos > -1) {
+								if (expPos > str.length()) {
+									throw new NumberFormatException(str
+											+ " is not a valid number.");
+								}
+								mant = str.substring(0, expPos);
+							} else {
+								mant = str;
+							}
+							dec = null;
+						}
+						if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                             //If it's too big for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
                             return f;
@@ -583,7 +606,16 @@
                     // ignore the bad number
                 }
                 try {
-                    Double d = createDouble(str);
+                    if (expPos > -1) {
+						if (expPos > str.length()) {
+							throw new NumberFormatException(str
+									+ " is not a valid number.");
+						}
+						mant = str.substring(0, expPos);
+					} else {
+						mant = str;
+					}
+					Double d = createDouble(str);
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }


