--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2018-12-01 05:41:40.203962304 -0500
+++ /tmp/Arja_Defects4J_Lang_7/patches_nbfi/Patch_1723/patched/tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	2018-12-01 05:50:47.335238944 -0500
@@ -450,7 +450,6 @@
             throw new NumberFormatException("A blank string is not a valid number");
         }  
         if (str.startsWith("--")) {
-            return null;
         }
         if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
             int hexDigits = str.length() - 2; // drop 0x
@@ -511,7 +510,16 @@
                         } catch (NumberFormatException nfe) { // NOPMD
                             // Too big for a long
                         }
-                        return createBigInteger(numeric);
+                        if (expPos > -1) {
+							if (expPos > str.length()) {
+								throw new NumberFormatException(str
+										+ " is not a valid number.");
+							}
+							mant = str.substring(0, expPos);
+						} else {
+							mant = str;
+						}
+						return createBigInteger(numeric);
 
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
@@ -553,7 +561,10 @@
             //User doesn't have a preference on the return type, so let's start
             //small and go from there...
             if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length());
+                if (str == null) {
+					return null;
+				}
+				exp = str.substring(expPos + 1, str.length());
             } else {
                 exp = null;
             }
@@ -583,7 +594,16 @@
                     // ignore the bad number
                 }
                 try {
-                    Double d = createDouble(str);
+                    if (expPos > -1) {
+						if (expPos > str.length()) {
+							throw new NumberFormatException(str
+									+ " is not a valid number.");
+						}
+						mant = str.substring(0, expPos);
+					} else {
+						mant = str;
+					}
+					Double d = createDouble(str);
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }


