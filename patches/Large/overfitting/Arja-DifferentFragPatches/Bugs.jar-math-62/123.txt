--- /tmp/Arja_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-29 03:53:43.256758000 -0500
+++ /tmp/Arja_Bug_dot_jar_Commons-Math_f6dd42b4/patches_kjw0/Patch_1413/patched/tmp/Arja_Bug_dot_jar_Commons-Math_f6dd42b4/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-29 05:32:42.847178831 -0500
@@ -94,7 +94,10 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        if (f == null) {
+			throw MathRuntimeException
+					.createIllegalArgumentException("function to solve cannot be null");
+		}
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -128,8 +131,10 @@
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
+        throw MathRuntimeException.createIllegalArgumentException(
+				"function values at endpoints do not have different signs.  "
+						+ "Endpoints: [{0}, {1}], Values: [{2}, {3}]", min,
+				max, yMin, yMax);
 
     }
 
@@ -280,7 +285,16 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    if (x0 == x2) {
+						p = dx * r3;
+						p1 = 1.0 - r3;
+					} else {
+						double r1 = y0 / y2;
+						double r2 = y1 / y2;
+						p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+						p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					}
+					oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;


