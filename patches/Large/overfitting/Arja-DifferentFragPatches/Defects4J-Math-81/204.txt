--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 05:57:29.659492621 -0500
+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_347/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 06:05:07.637064570 -0500
@@ -1539,27 +1539,6 @@
                 }
                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
-                // approximate contribution to norm squared from i < nn-2.
-                if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
-                    a2 = a2 + b2;
-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if (b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-                }
-
                 if (a2 < cnst1) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {
@@ -1622,7 +1601,53 @@
                 if (dMin1 == dN1) {
                     tau = 0.5 * dMin1;
                 }
-                tType = -9;
+                if (dMin == dN2) {
+					tType = -5;
+					double s = 0.25 * dMin;
+					final int np = nn - 2 * pingPong;
+					double b1 = work[np - 2];
+					double b2 = work[np - 6];
+					final double gam = dN2;
+					if (work[np - 8] > b2 || work[np - 4] > b1) {
+						return;
+					}
+					double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
+					if (end - start > 2) {
+						b2 = work[nn - 13] / work[nn - 15];
+						a2 = a2 + b2;
+						for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
+							if (b2 == 0.0) {
+								break;
+							}
+							b1 = b2;
+							if (work[i4] > work[i4 - 2]) {
+								return;
+							}
+							b2 = b2 * (work[i4] / work[i4 - 2]);
+							a2 = a2 + b2;
+							if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
+								break;
+							}
+						}
+						a2 = cnst3 * a2;
+					}
+					if (a2 < cnst1) {
+						tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
+					} else {
+						tau = s;
+					}
+				} else {
+					if (tType == -6) {
+						g += 0.333 * (1 - g);
+					} else if (tType == -18) {
+						g = 0.25 * 0.333;
+					} else {
+						g = 0.25;
+					}
+					tau = g * dMin;
+					tType = -6;
+				}
+				tType = -9;
             }
             break;
 


