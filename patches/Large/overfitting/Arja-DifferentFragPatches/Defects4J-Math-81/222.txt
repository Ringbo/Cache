--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 05:57:29.659492621 -0500
+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_565/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 06:08:03.621522532 -0500
@@ -1477,10 +1477,6 @@
                     int np;
                     if (dMin == dN) {
                         gam = dN;
-                        a2 = 0.0;
-                        if (work[nn - 5]  >  work[nn - 7]) {
-                            return;
-                        }
                         b2 = work[nn - 5] / work[nn - 7];
                         np = nn - 9;
                     } else {
@@ -1508,7 +1504,8 @@
                         if (work[i4]  >  work[i4 - 2]) {
                             return;
                         }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
+                        dMin = Math.min(dMin, dN1);
+						b2 = b2 * (work[i4] / work[i4 - 2]);
                         a2 = a2 + b2;
                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
                             break;
@@ -1516,10 +1513,6 @@
                     }
                     a2 = cnst3 * a2;
 
-                    // rayleigh quotient residual bound.
-                    if (a2 < cnst1) {
-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);
-                    }
                     tau = s;
 
                 }
@@ -1539,26 +1532,7 @@
                 }
                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
-                // approximate contribution to norm squared from i < nn-2.
-                if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
-                    a2 = a2 + b2;
-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if (b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-                }
+                tType -= 11;
 
                 if (a2 < cnst1) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);


