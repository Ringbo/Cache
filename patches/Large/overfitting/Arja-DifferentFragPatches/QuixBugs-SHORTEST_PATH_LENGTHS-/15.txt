--- /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java	2018-12-02 05:37:15.107933759 -0500
+++ /tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/patches_r4jx/Patch_222/patched/tmp/Arja_QuixBugs_SHORTEST_PATH_LENGTHS_/src/main/java/SHORTEST_PATH_LENGTHS.java	2018-12-02 05:38:03.828248484 -0500
@@ -17,16 +17,22 @@
     public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {
         Map<List<Integer>,Integer> length_by_path = new HashMap<>();
         for (int i = 0; i < numNodes; i++) {
-            for (int j =0; j < numNodes; j++) {
+            for (int j = 0; j < numNodes; j++) {
+				List<Integer> edge = new ArrayList<>(Arrays.asList(i, j));
+				if (i == j) {
+					length_by_path.put(edge, 0);
+				} else if (length_by_edge.containsKey(edge)) {
+					length_by_path.put(edge, length_by_edge.get(edge));
+				} else {
+					length_by_path.put(edge, INF);
+				}
+			}
+			for (int j =0; j < numNodes; j++) {
                 List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
                 if (i == j) {
                     length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
-                    length_by_path.put(edge, length_by_edge.get(edge));
-                } else {
-                    length_by_path.put(edge, INF);
-                }
+                } else
+					return length_by_path;
             }
         }
         for (int k = 0; k < numNodes; k++) {


