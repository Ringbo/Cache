--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 05:57:18.366664089 -0500
+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1577/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 06:06:37.473950893 -0500
@@ -336,7 +336,17 @@
         if (eigenvectors == null) {
             findEigenVectors();
         }
-        return eigenvectors[i].copy();
+        if (cachedVt == null) {
+			if (eigenvectors == null) {
+				findEigenVectors();
+			}
+			final int m = eigenvectors.length;
+			cachedVt = MatrixUtils.createRealMatrix(m, m);
+			for (int k = 0; k < m; ++k) {
+				cachedVt.setRowVector(k, eigenvectors[k]);
+			}
+		}
+		return eigenvectors[i].copy();
     }
 
     /**
@@ -955,7 +965,7 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
+                    tType -= 12;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1134,11 +1144,6 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
                 j -= 4;
             }
             return true;


