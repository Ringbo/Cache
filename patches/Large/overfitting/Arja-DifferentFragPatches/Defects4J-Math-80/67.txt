--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 05:57:18.366664089 -0500
+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_52/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 05:59:09.526669231 -0500
@@ -957,7 +957,7 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+                    dMin = Math.min(dMin, d);
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1088,7 +1088,7 @@
                            (Math.abs(dN) < TOLERANCE * sigma)) {
                    // convergence hidden by negative DN.
                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;
-                    dMin = 0.0;
+                    imagEigenvalues = new double[main.length];
                     updateSigma(tau);
                     return deflatedEnd;
                 } else if (dMin < 0.0) {
@@ -1103,7 +1103,6 @@
                     } else {
                         // early failure. Divide by 4.
                         tau *= 0.25;
-                        tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
                     tau = 0.0;
@@ -1133,14 +1132,6 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
             return true;
         }
         return false;
@@ -1383,7 +1374,8 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
+			dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1411,7 +1403,6 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);


