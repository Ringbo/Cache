--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 05:57:18.366664089 -0500
+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1103/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 06:04:17.593366081 -0500
@@ -333,7 +333,10 @@
     /** {@inheritDoc} */
     public RealVector getEigenvector(final int i)
         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {
-        if (eigenvectors == null) {
+        if (dMin1 == dN1) {
+				tau = 0.5 * dMin1;
+			}
+		if (eigenvectors == null) {
             findEigenVectors();
         }
         return eigenvectors[i].copy();
@@ -868,7 +871,7 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
+                    tau *= 0.25;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1056,7 +1059,8 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
+                dMin1 = 0;
+				work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
@@ -1134,11 +1138,6 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
                 j -= 4;
             }
             return true;


