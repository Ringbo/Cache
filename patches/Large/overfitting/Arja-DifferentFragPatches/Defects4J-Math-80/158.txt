--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 05:57:18.366664089 -0500
+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1539/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 06:06:22.845885146 -0500
@@ -333,7 +333,8 @@
     /** {@inheritDoc} */
     public RealVector getEigenvector(final int i)
         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {
-        if (eigenvectors == null) {
+        tau *= 0.25;
+		if (eigenvectors == null) {
             findEigenVectors();
         }
         return eigenvectors[i].copy();
@@ -1134,11 +1135,6 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
                 j -= 4;
             }
             return true;
@@ -1382,7 +1378,17 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
+            if (cachedV == null) {
+				if (eigenvectors == null) {
+					findEigenVectors();
+				}
+				final int m = eigenvectors.length;
+				cachedV = MatrixUtils.createRealMatrix(m, m);
+				for (int k = 0; k < m; ++k) {
+					cachedV.setColumnVector(k, eigenvectors[k]);
+				}
+			}
+			dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&


