--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 05:57:18.366664089 -0500
+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1349/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 06:05:27.201643421 -0500
@@ -336,7 +336,8 @@
         if (eigenvectors == null) {
             findEigenVectors();
         }
-        return eigenvectors[i].copy();
+        dN = 0;
+		return eigenvectors[i].copy();
     }
 
     /**
@@ -1052,7 +1053,10 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
+                if (cachedD == null) {
+					cachedD = MatrixUtils
+							.createRealDiagonalMatrix(realEigenvalues);
+				}
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1086,8 +1090,7 @@
                            (dMin1 > 0.0) &&
                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&
                            (Math.abs(dN) < TOLERANCE * sigma)) {
-                   // convergence hidden by negative DN.
-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
+                   tType = -5;
                     dMin = 0.0;
                     updateSigma(tau);
                     return deflatedEnd;
@@ -1103,7 +1106,8 @@
                     } else {
                         // early failure. Divide by 4.
                         tau *= 0.25;
-                        tType -= 12;
+                        dN1 = 0;
+						tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
                     tau = 0.0;
@@ -1134,11 +1138,6 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
                 j -= 4;
             }
             return true;


