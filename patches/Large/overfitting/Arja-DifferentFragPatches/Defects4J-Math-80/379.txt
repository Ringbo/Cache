--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 05:57:18.366664089 -0500
+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_570/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 06:01:58.460706919 -0500
@@ -1134,11 +1134,6 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
                 j -= 4;
             }
             return true;
@@ -1381,7 +1376,20 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
+            if (work[j4 - 3] == 0.0) {
+				work[j4 - 1] = 0.0;
+				d = work[j4 + 2];
+				dMin = d;
+				eMin = 0.0;
+			} else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3])
+					&& (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
+				final double tmp = work[j4 + 2] / work[j4 - 3];
+				work[j4 - 1] = work[j4] * tmp;
+				d *= tmp;
+			} else {
+				work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);
+				d *= work[j4 + 2] / work[j4 - 3];
+			}
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1411,7 +1419,15 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
+            if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])
+					&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
+				final double tmp = work[j4p2 + 2] / work[j4 - 2];
+				work[j4] = work[j4p2] * tmp;
+				dN1 = dN2 * tmp;
+			} else {
+				work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
+				dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
+			}
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);


