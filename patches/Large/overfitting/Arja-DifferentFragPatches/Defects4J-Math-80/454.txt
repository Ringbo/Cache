--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 05:57:18.366664089 -0500
+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1725/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-01 06:07:14.146114874 -0500
@@ -336,7 +336,8 @@
         if (eigenvectors == null) {
             findEigenVectors();
         }
-        return eigenvectors[i].copy();
+        dN1 = 0;
+		return eigenvectors[i].copy();
     }
 
     /**
@@ -957,7 +958,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1059,7 +1059,7 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+                tType = -10;
                 dMin  = -0.0;
             }
         }
@@ -1134,11 +1134,7 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                tau *= 0.25;
                 j -= 4;
             }
             return true;


