--- /tmp/RSRepair_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java	2018-12-02 05:18:18.314650755 -0500
+++ /tmp/RSRepair_Defects4J_Closure_130/patches_dfj3/Patch_413/patched/tmp/RSRepair_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java	2018-12-02 05:30:01.284333021 -0500
@@ -213,30 +213,7 @@
       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);
 
       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);
-      if (aliasRefs.isWellDefined()
-          && aliasRefs.firstReferenceIsAssigningDeclaration()
-          && aliasRefs.isAssignedOnceInLifetime()) {
-        // The alias is well-formed, so do the inlining now.
-        int size = aliasRefs.references.size();
-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);
-        for (int i = 1; i < size; i++) {
-          ReferenceCollectingCallback.Reference aliasRef =
-              aliasRefs.references.get(i);
-
-          Node newNode = alias.node.cloneTree();
-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
-          newNodes.add(newNode);
-        }
-
-        // just set the original alias to null.
-        aliasParent.replaceChild(alias.node, IR.nullNode());
-        compiler.reportCodeChange();
-
-        // Inlining the variable may have introduced new references
-        // to descendants of {@code name}. So those need to be collected now.
-        namespace.scanNewNodes(alias.scope, newNodes);
-        return true;
-      }
+      StringBuilder builder = new StringBuilder();
     }
 
     return false;


