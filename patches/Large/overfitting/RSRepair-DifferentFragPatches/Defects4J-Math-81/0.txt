--- /tmp/RSRepair_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 02:59:03.224542878 -0500
+++ /tmp/RSRepair_Defects4J_Math_81/patches_cedi/Patch_256/patched/tmp/RSRepair_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 03:05:07.258066422 -0500
@@ -1583,47 +1583,48 @@
             break;
 
         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.
-            if (dMin1 == dN1 && dMin2 == dN2) {
-
-                // cases 7 and 8.
-                tType = -7;
-                double s = 0.333 * dMin1;
-                if (work[nn - 5] > work[nn - 7]) {
-                    return;
-                }
-                double b1 = work[nn - 5] / work[nn - 7];
-                double b2 = b1;
-                if (b2 != 0.0) {
-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        final double oldB1 = b1;
-                        if (work[i4] > work[i4 - 2]) {
-                            return;
-                        }
-                        b1 = b1 * (work[i4] / work[i4 - 2]);
-                        b2 = b2 + b1;
-                        if (100 * Math.max(b1, oldB1) < b2) {
-                            break;
-                        }
-                    }
-                }
-                b2 = Math.sqrt(cnst3 * b2);
-                final double a2 = dMin1 / (1 + b2 * b2);
-                final double gap2 = 0.5 * dMin2 - a2;
-                if (gap2 > 0.0 && gap2 > b2 * a2) {
-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));
-                } else {
-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));
-                    tType = -8;
-                }
-            } else {
-
-                // case 9.
-                tau = 0.25 * dMin1;
-                if (dMin1 == dN1) {
-                    tau = 0.5 * dMin1;
-                }
-                tType = -9;
-            }
+            {
+				dMin1 = -work[4 * start + pingPong];
+				if (dMin1 == dN1 && dMin2 == dN2) {
+					tType = -7;
+					double s = 0.333 * dMin1;
+					if (work[nn - 5] > work[nn - 7]) {
+						return;
+					}
+					double b1 = work[nn - 5] / work[nn - 7];
+					double b2 = b1;
+					if (b2 != 0.0) {
+						for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start
+								+ 2 + pingPong; i4 -= 4) {
+							final double oldB1 = b1;
+							if (work[i4] > work[i4 - 2]) {
+								return;
+							}
+							b1 = b1 * (work[i4] / work[i4 - 2]);
+							b2 = b2 + b1;
+							if (100 * Math.max(b1, oldB1) < b2) {
+								break;
+							}
+						}
+					}
+					b2 = Math.sqrt(cnst3 * b2);
+					final double a2 = dMin1 / (1 + b2 * b2);
+					final double gap2 = 0.5 * dMin2 - a2;
+					if (gap2 > 0.0 && gap2 > b2 * a2) {
+						tau = Math.max(s, a2
+								* (1 - cnst2 * a2 * (b2 / gap2) * b2));
+					} else {
+						tau = Math.max(s, a2 * (1 - cnst2 * b2));
+						tType = -8;
+					}
+				} else {
+					tau = 0.25 * dMin1;
+					if (dMin1 == dN1) {
+						tau = 0.5 * dMin1;
+					}
+					tType = -9;
+				}
+			}
             break;
 
         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.


