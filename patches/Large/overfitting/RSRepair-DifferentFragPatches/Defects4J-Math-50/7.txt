--- /tmp/RSRepair_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-02 03:04:37.768641066 -0500
+++ /tmp/RSRepair_Defects4J_Math_50/patches_loid/Patch_459/patched/tmp/RSRepair_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-12-02 03:23:01.628225011 -0500
@@ -183,11 +183,7 @@
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
+                    double max = getMax();
                     break;
                 default:
                     // Should never happen.
@@ -234,7 +230,10 @@
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
-                switch (allowed) {
+                if (fx == 0.0) {
+															return x;
+														}
+				switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:


