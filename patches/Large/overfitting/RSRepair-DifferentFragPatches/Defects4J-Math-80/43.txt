--- /tmp/RSRepair_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 02:59:33.532536160 -0500
+++ /tmp/RSRepair_Defects4J_Math_80/patches_izn3/Patch_957/patched/tmp/RSRepair_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 03:52:04.961634064 -0500
@@ -1134,11 +1134,6 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
                 j -= 4;
             }
             return true;
@@ -1401,10 +1396,18 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
+            if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3])
+					&& (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
+				final double tmp = work[j4 + 2] / work[j4 - 3];
+				work[j4 - 1] = work[j4] * tmp;
+				d *= tmp;
+			} else {
+				work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);
+				d *= work[j4 + 2] / work[j4 - 3];
+			}
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
+            int sixI = 0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];


