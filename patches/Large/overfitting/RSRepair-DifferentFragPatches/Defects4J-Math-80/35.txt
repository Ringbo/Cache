--- /tmp/RSRepair_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 02:59:33.532536160 -0500
+++ /tmp/RSRepair_Defects4J_Math_80/patches_izn3/Patch_581/patched/tmp/RSRepair_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 03:32:00.975539023 -0500
@@ -942,7 +942,7 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
+                    break;
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1059,8 +1059,45 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
+                if ((dMin < 0)
+						|| (MathUtils.SAFE_MIN * qMax < Math.min(
+								work[l - 1],
+								Math.min(work[l - 9], dMin2
+										+ work[l - 2 * pingPong])))) {
+					computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);
+					for (boolean loop = true; loop;) {
+						dqds(start, deflatedEnd);
+						if ((dMin >= 0) && (dMin1 > 0)) {
+							updateSigma(tau);
+							return deflatedEnd;
+						} else if ((dMin < 0.0)
+								&& (dMin1 > 0.0)
+								&& (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE
+										* (sigma + dN1))
+								&& (Math.abs(dN) < TOLERANCE * sigma)) {
+							work[4 * deflatedEnd - 3 - pingPong] = 0.0;
+							dMin = 0.0;
+							updateSigma(tau);
+							return deflatedEnd;
+						} else if (dMin < 0.0) {
+							if (tType < -22) {
+								tau = 0.0;
+							} else if (dMin1 > 0.0) {
+								tau = (tau + dMin)
+										* (1.0 - 2.0 * MathUtils.EPSILON);
+								tType -= 11;
+							} else {
+								tau *= 0.25;
+								tType -= 12;
+							}
+						} else if (Double.isNaN(dMin)) {
+							tau = 0.0;
+						} else {
+							loop = false;
+						}
+					}
+				}
+				dMin  = -0.0;
             }
         }
 
@@ -1133,14 +1170,6 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
             return true;
         }
         return false;


