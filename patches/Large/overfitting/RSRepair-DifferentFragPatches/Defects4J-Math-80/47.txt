--- /tmp/RSRepair_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 02:59:33.532536160 -0500
+++ /tmp/RSRepair_Defects4J_Math_80/patches_izn3/Patch_675/patched/tmp/RSRepair_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-12-02 03:37:00.413001604 -0500
@@ -1059,7 +1059,45 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+                if ((dMin < 0)
+						|| (MathUtils.SAFE_MIN * qMax < Math.min(
+								work[l - 1],
+								Math.min(work[l - 9], dMin2
+										+ work[l - 2 * pingPong])))) {
+					computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);
+					for (boolean loop = true; loop;) {
+						dqds(start, deflatedEnd);
+						if ((dMin >= 0) && (dMin1 > 0)) {
+							updateSigma(tau);
+							return deflatedEnd;
+						} else if ((dMin < 0.0)
+								&& (dMin1 > 0.0)
+								&& (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE
+										* (sigma + dN1))
+								&& (Math.abs(dN) < TOLERANCE * sigma)) {
+							work[4 * deflatedEnd - 3 - pingPong] = 0.0;
+							dMin = 0.0;
+							updateSigma(tau);
+							return deflatedEnd;
+						} else if (dMin < 0.0) {
+							if (tType < -22) {
+								tau = 0.0;
+							} else if (dMin1 > 0.0) {
+								tau = (tau + dMin)
+										* (1.0 - 2.0 * MathUtils.EPSILON);
+								tType -= 11;
+							} else {
+								tau *= 0.25;
+								tType -= 12;
+							}
+						} else if (Double.isNaN(dMin)) {
+							tau = 0.0;
+						} else {
+							loop = false;
+						}
+					}
+				}
+				qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1134,11 +1172,6 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
                 j -= 4;
             }
             return true;
@@ -1404,7 +1437,8 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
+            final int prime = 31;
+			eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1446,7 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            final double tmp = work[j4p2 + 2] / work[j4 - 2];
         }
         dMin = Math.min(dMin, dN);
 


