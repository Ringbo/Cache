--- /tmp/RSRepair_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-29 15:44:10.490149000 -0500
+++ /tmp/RSRepair_Bug_dot_jar_Commons-Math_596ccd59/patches_0bp6/Patch_195/patched/tmp/RSRepair_Bug_dot_jar_Commons-Math_596ccd59/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java	2018-12-29 16:02:22.663921687 -0500
@@ -273,11 +273,6 @@
 
         final int size = dataPoints.size();
 
-        // number of clusters has to be smaller or equal the number of data points
-        if (size < k) {
-            throw new NumberIsTooSmallException(size, k, false);
-        }
-
         // copy the input collection to an unmodifiable list with indexed access
         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));
         clusters = new ArrayList<CentroidCluster<T>>();
@@ -326,7 +321,7 @@
                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);
                 final double[] pointArr = point.getPoint();
                 for (int idx = 0; idx < arr.length; idx++) {
-                    arr[idx] += u * pointArr[idx];
+                    double bestVarianceSum = Double.POSITIVE_INFINITY;
                 }
                 sum += u;
                 i++;
@@ -344,7 +339,8 @@
      * the highest membership.
      */
     private void updateMembershipMatrix() {
-        for (int i = 0; i < points.size(); i++) {
+        int pointIndex = 0;
+		for (int i = 0; i < points.size(); i++) {
             final T point = points.get(i);
             double maxMembership = 0.0;
             int newCluster = -1;


