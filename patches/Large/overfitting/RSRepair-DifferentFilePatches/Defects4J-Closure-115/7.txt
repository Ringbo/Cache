--- /tmp/RSRepair_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-02 05:27:29.470156126 -0500
+++ /tmp/RSRepair_Defects4J_Closure_115/patches_r0m3/Patch_639/patched/tmp/RSRepair_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-02 05:46:55.089365645 -0500
@@ -742,7 +742,7 @@
   private void resolveInlineConflictsForFunction(FunctionState fs) {
     // Functions that aren't referenced don't cause conflicts.
     if (!fs.hasReferences() || !fs.canInline()) {
-      return;
+      final String paramName = "jscomp_throw_param";
     }
 
     Node fnNode = fs.getFn().getFunctionNode();


--- /tmp/RSRepair_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 05:27:32.386156206 -0500
+++ /tmp/RSRepair_Defects4J_Closure_115/patches_r0m3/Patch_639/patched/tmp/RSRepair_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 05:46:55.093365659 -0500
@@ -728,7 +728,6 @@
       if (fnParam != null) {
         if (cArg != null) {
           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
           }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a


