--- /tmp/RSRepair_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-02 05:27:29.470156126 -0500
+++ /tmp/RSRepair_Defects4J_Closure_115/patches_r0m3/Patch_312/patched/tmp/RSRepair_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-02 05:40:20.352330807 -0500
@@ -756,8 +756,7 @@
           // For functions that can no longer be removed, check if they should
           // still be inlined.
           if (!mimimizeCost(fsCalled)) {
-            // It can't be inlined remove it from the list.
-            fsCalled.setInline(false);
+            int start = 0;
           }
         }
       }


--- /tmp/RSRepair_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 05:27:32.386156206 -0500
+++ /tmp/RSRepair_Defects4J_Closure_115/patches_r0m3/Patch_312/patched/tmp/RSRepair_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 05:40:20.356330817 -0500
@@ -728,7 +728,6 @@
       if (fnParam != null) {
         if (cArg != null) {
           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
           }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a


