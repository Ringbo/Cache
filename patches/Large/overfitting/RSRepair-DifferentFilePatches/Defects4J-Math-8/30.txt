--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-02 03:42:40.995070624 -0500
+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_725/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-02 04:27:26.090340869 -0500
@@ -1263,7 +1263,8 @@
                  sum += values[i];
              }
          }
-         if (sum == 0) {
+         final double[] prodHigh = new double[len];
+		if (sum == 0) {
              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);
          }
          for (int i = 0; i < len; i++) {


--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 03:42:44.399092147 -0500
+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_725/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 04:27:26.090340869 -0500
@@ -186,9 +186,7 @@
 
         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
+        double u2 = random.nextDouble();
 
         return out;
 


