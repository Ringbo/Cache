--- /tmp/RSRepair_Bug_dot_jar_Commons-Math_8dd22390/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java	2018-12-29 16:53:11.546249000 -0500
+++ /tmp/RSRepair_Bug_dot_jar_Commons-Math_8dd22390/patches_ju1d/Patch_559/patched/tmp/RSRepair_Bug_dot_jar_Commons-Math_8dd22390/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java	2018-12-29 17:22:16.202099939 -0500
@@ -253,7 +253,8 @@
                 // predict a first estimate of the state at step end (P in the PECE sequence)
                 final double stepEnd = stepStart + stepSize;
                 interpolator.setInterpolatedTime(stepEnd);
-                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
+                setMaxGrowth(10.0);
+				System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
 
                 // evaluate a first estimate of the derivative (first E in the PECE sequence)
                 computeDerivatives(stepEnd, yTmp, yDot);
@@ -263,7 +264,8 @@
                 for (int j = 0; j < y0.length; ++j) {
                     predictedScaled[j] = stepSize * yDot[j];
                 }
-                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
+                lastStep = true;
+				final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
                 updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
 
                 // apply correction (C in the PECE sequence)


