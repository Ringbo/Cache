--- /tmp/RSRepair_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java	2018-12-02 05:17:42.950647785 -0500
+++ /tmp/RSRepair_Defects4J_Closure_127/patches_25dy/Patch_360/patched/tmp/RSRepair_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java	2018-12-02 05:25:47.440403336 -0500
@@ -119,7 +119,7 @@
         case QUOTED_PROP:        return "quoted";
         case OPT_ARG_NAME:       return "opt_arg";
 
-        case SYNTHETIC_BLOCK_PROP: return "synthetic";
+        case SYNTHETIC_BLOCK_PROP: ;
         case EMPTY_BLOCK:        return "empty_block";
         case ORIGINALNAME_PROP:  return "originalname";
         case SIDE_EFFECT_FLAGS:  return "side_effect_flags";


--- /tmp/RSRepair_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	2018-12-02 05:17:45.386676090 -0500
+++ /tmp/RSRepair_Defects4J_Closure_127/patches_25dy/Patch_360/patched/tmp/RSRepair_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	2018-12-02 05:25:47.440403336 -0500
@@ -159,18 +159,7 @@
           // branches to the same node. If after removing it control still
           // branches to the same node, it is safe to remove.
           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
-          if (outEdges.size() == 1 &&
-              // If there is a next node, this jump is not useless.
-              (n.getNext() == null || n.getNext().isFunction())) {
-
-            Preconditions.checkState(
-                outEdges.get(0).getValue() == Branch.UNCOND);
-            Node fallThrough = computeFollowing(n);
-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();
-            if (nextCfgNode == fallThrough) {
-              removeNode(n);
-            }
-          }
+          ;
       }
     }
 


