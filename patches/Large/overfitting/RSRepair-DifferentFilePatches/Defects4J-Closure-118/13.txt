--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java	2018-12-02 05:24:24.628980553 -0500
+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_431/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java	2018-12-02 05:39:42.833703794 -0500
@@ -488,28 +488,6 @@
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
-
-        Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
-          if (propertiesToErrorFor.containsKey(name)) {
-            compiler.report(JSError.make(
-                t.getSourceName(), child, propertiesToErrorFor.get(name),
-                Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
-          }
-        }
-      }
     }
 
     private void printErrorLocations(List<String> errors, JSType t) {


--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java	2018-12-02 05:24:22.048980494 -0500
+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_431/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java	2018-12-02 05:39:42.833703794 -0500
@@ -1579,7 +1579,8 @@
             return;
           }
 
-          qVar.getScope().undeclare(qVar);
+          this.sourceName = sourceName;
+		qVar.getScope().undeclare(qVar);
         }
       }
 


