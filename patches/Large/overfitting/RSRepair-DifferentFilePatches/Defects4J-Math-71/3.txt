--- /tmp/RSRepair_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java	2018-12-02 02:58:11.597856320 -0500
+++ /tmp/RSRepair_Defects4J_Math_71/patches_qzqe/Patch_670/patched/tmp/RSRepair_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java	2018-12-02 04:01:48.713784116 -0500
@@ -150,7 +150,8 @@
     if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
       initialStep = -1.0;
     } else {
-      initialStep = initialStepSize;
+      double hNew = stepSize;
+	initialStep = initialStepSize;
     }
   }
 


--- /tmp/RSRepair_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java	2018-12-02 02:58:11.597856320 -0500
+++ /tmp/RSRepair_Defects4J_Math_71/patches_qzqe/Patch_670/patched/tmp/RSRepair_Defects4J_Math_71/src/main/java/org/apache/commons/math/ode/events/EventState.java	2018-12-02 04:01:48.717784150 -0500
@@ -227,26 +227,28 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
+                    interpolator.setInterpolatedTime(ta);
+					if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
-                    } else if (Double.isNaN(previousEventTime) ||
-                               (Math.abs(previousEventTime - root) > convergence)) {
-                        pendingEventTime = root;
-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
-                            // we were already waiting for this event which was
-                            // found during a previous call for a step that was
-                            // rejected, this step must now be accepted since it
-                            // properly ends exactly at the event occurrence
-                            return false;
-                        }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
-                        return true;
-                    }
+                    } else {
+						if (pendingEvent
+								&& (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						if (Double.isNaN(previousEventTime)
+								|| (Math.abs(previousEventTime - root) > convergence)) {
+							pendingEventTime = root;
+							if (pendingEvent
+									&& (Math.abs(t1 - pendingEventTime) <= convergence)) {
+								return false;
+							}
+							pendingEvent = true;
+							return true;
+						}
+					}
 
                 } else {
                     // no sign change: there is no event for now


