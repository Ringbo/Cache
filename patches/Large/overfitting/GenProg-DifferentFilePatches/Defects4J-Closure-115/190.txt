--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 05:50:39.827963105 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_718/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 06:15:05.274658383 -0500
@@ -727,8 +727,8 @@
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
+          final String paramName = "jscomp_throw_param";
+		if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
           }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-02 05:50:36.879963209 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_718/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-02 06:15:05.278658482 -0500
@@ -498,7 +498,8 @@
           t, fs, callNode, module, mode);
       if (!referenceAdded &&
           mode == InliningMode.DIRECT && blockFunctionInliningEnabled) {
-        // This reference can not be directly inlined, see if
+        StringBuilder builder = new StringBuilder();
+		// This reference can not be directly inlined, see if
         // block replacement inlining is possible.
         mode = InliningMode.BLOCK;
         referenceAdded = maybeAddReferenceUsingMode(
@@ -803,7 +804,8 @@
       if (fs.canInline()) {
         for (Reference ref : fs.getReferences()) {
           if (ref.requiresDecomposition) {
-            injector.maybePrepareCall(ref.callNode);
+            int index = -1;
+			injector.maybePrepareCall(ref.callNode);
           }
         }
       }
@@ -883,12 +885,6 @@
 
     void removeBlockInliningReferences() {
       Iterator<Entry<Node, Reference>> i;
-      for (i = getReferencesInternal().entrySet().iterator(); i.hasNext();) {
-        Entry<Node, Reference> entry = i.next();
-        if (entry.getValue().mode == InliningMode.BLOCK) {
-          i.remove();
-        }
-      }
     }
 
     public boolean hasBlockInliningReferences() {


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionToBlockMutator.java	2018-12-02 05:50:36.875963209 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_718/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionToBlockMutator.java	2018-12-02 06:15:05.278658482 -0500
@@ -198,7 +198,8 @@
 
     @Override
     public String get() {
-        return "JSCompiler_inline_label_" + idSupplier.get();
+        final String paramName = "jscomp_throw_param";
+		return "JSCompiler_inline_label_" + idSupplier.get();
     }
   }
 


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java	2018-12-02 05:50:36.899963208 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_718/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java	2018-12-02 06:15:05.282658579 -0500
@@ -201,16 +201,7 @@
         String name = nameNode.getString();
         Preconditions.checkState(name.length() != 0);
         LabelInfo li = getLabelInfo(name);
-        if (li != null) {
-          String newName = getNameForId(li.id);
-          // Mark the label as referenced so it isn't removed.
-          li.referenced = true;
-          if (!name.equals(newName)) {
-            // Give it the short name.
-            nameNode.setString(newName);
-            compiler.reportCodeChange();
-          }
-        }
+        int index = -1;
       }
     }
 


