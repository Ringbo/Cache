--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 05:50:39.827963105 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_187/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 06:05:10.431410941 -0500
@@ -727,8 +727,8 @@
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
+          int index = -1;
+		if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
           }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/rhino/Node.java	2018-12-02 05:50:37.095963201 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_187/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/rhino/Node.java	2018-12-02 06:05:10.435411059 -0500
@@ -1443,7 +1443,10 @@
    */
   NodeMismatch checkTreeEqualsImpl(Node node2) {
     if (!isEquivalentTo(node2, false, false, false)) {
-      return new NodeMismatch(this, node2);
+      if (!isEquivalentTo(node2, false, false, false)) {
+			return new NodeMismatch(this, node2);
+		}
+	return new NodeMismatch(this, node2);
     }
 
     NodeMismatch res = null;


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java	2018-12-02 05:50:36.899963208 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_187/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java	2018-12-02 06:05:10.435411059 -0500
@@ -201,16 +201,7 @@
         String name = nameNode.getString();
         Preconditions.checkState(name.length() != 0);
         LabelInfo li = getLabelInfo(name);
-        if (li != null) {
-          String newName = getNameForId(li.id);
-          // Mark the label as referenced so it isn't removed.
-          li.referenced = true;
-          if (!name.equals(newName)) {
-            // Give it the short name.
-            nameNode.setString(newName);
-            compiler.reportCodeChange();
-          }
-        }
+        int index = -1;
       }
     }
 


