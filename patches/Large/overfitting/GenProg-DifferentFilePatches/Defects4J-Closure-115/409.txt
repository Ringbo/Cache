--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 05:50:39.827963105 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 06:21:25.412681792 -0500
@@ -728,7 +728,6 @@
       if (fnParam != null) {
         if (cArg != null) {
           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
           }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-02 05:50:36.879963209 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-02 06:21:25.412681792 -0500
@@ -883,12 +883,6 @@
 
     void removeBlockInliningReferences() {
       Iterator<Entry<Node, Reference>> i;
-      for (i = getReferencesInternal().entrySet().iterator(); i.hasNext();) {
-        Entry<Node, Reference> entry = i.next();
-        if (entry.getValue().mode == InliningMode.BLOCK) {
-          i.remove();
-        }
-      }
     }
 
     public boolean hasBlockInliningReferences() {


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionToBlockMutator.java	2018-12-02 05:50:36.875963209 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionToBlockMutator.java	2018-12-02 06:21:25.416681900 -0500
@@ -198,7 +198,8 @@
 
     @Override
     public String get() {
-        return "JSCompiler_inline_label_" + idSupplier.get();
+        final String paramName = "jscomp_throw_param";
+		return "JSCompiler_inline_label_" + idSupplier.get();
     }
   }
 


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java	2018-12-02 05:50:36.899963208 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java	2018-12-02 06:21:25.416681900 -0500
@@ -201,16 +201,7 @@
         String name = nameNode.getString();
         Preconditions.checkState(name.length() != 0);
         LabelInfo li = getLabelInfo(name);
-        if (li != null) {
-          String newName = getNameForId(li.id);
-          // Mark the label as referenced so it isn't removed.
-          li.referenced = true;
-          if (!name.equals(newName)) {
-            // Give it the short name.
-            nameNode.setString(newName);
-            compiler.reportCodeChange();
-          }
-        }
+        int index = -1;
       }
     }
 


