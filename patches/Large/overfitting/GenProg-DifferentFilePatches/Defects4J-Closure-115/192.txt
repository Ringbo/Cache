--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 05:50:39.827963105 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1530/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 06:29:03.232811919 -0500
@@ -728,7 +728,6 @@
       if (fnParam != null) {
         if (cArg != null) {
           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
           }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-02 05:50:36.879963209 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1530/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/InlineFunctions.java	2018-12-02 06:29:03.232811919 -0500
@@ -498,7 +498,8 @@
           t, fs, callNode, module, mode);
       if (!referenceAdded &&
           mode == InliningMode.DIRECT && blockFunctionInliningEnabled) {
-        // This reference can not be directly inlined, see if
+        int index = -1;
+		// This reference can not be directly inlined, see if
         // block replacement inlining is possible.
         mode = InliningMode.BLOCK;
         referenceAdded = maybeAddReferenceUsingMode(


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java	2018-12-02 05:50:36.899963208 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1530/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java	2018-12-02 06:29:03.236812025 -0500
@@ -185,7 +185,7 @@
 
         case Token.BREAK:
         case Token.CONTINUE:
-          visitBreakOrContinue(node);
+          ;
           break;
       }
     }
@@ -201,16 +201,7 @@
         String name = nameNode.getString();
         Preconditions.checkState(name.length() != 0);
         LabelInfo li = getLabelInfo(name);
-        if (li != null) {
-          String newName = getNameForId(li.id);
-          // Mark the label as referenced so it isn't removed.
-          li.referenced = true;
-          if (!name.equals(newName)) {
-            // Give it the short name.
-            nameNode.setString(newName);
-            compiler.reportCodeChange();
-          }
-        }
+        int index = -1;
       }
     }
 


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-02 05:50:36.859963210 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_1530/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-02 06:29:03.236812025 -0500
@@ -106,7 +106,7 @@
 
   void add(Node n, Context context) {
     if (!cc.continueProcessing()) {
-      return;
+      int index = -1;
     }
 
     int type = n.getType();


