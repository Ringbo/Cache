--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 05:50:39.827963105 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_370/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java	2018-12-02 06:08:38.049228635 -0500
@@ -728,7 +728,6 @@
       if (fnParam != null) {
         if (cArg != null) {
           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
           }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java	2018-12-02 05:50:36.899963208 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_370/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/RenameLabels.java	2018-12-02 06:08:38.053228731 -0500
@@ -201,16 +201,7 @@
         String name = nameNode.getString();
         Preconditions.checkState(name.length() != 0);
         LabelInfo li = getLabelInfo(name);
-        if (li != null) {
-          String newName = getNameForId(li.id);
-          // Mark the label as referenced so it isn't removed.
-          li.referenced = true;
-          if (!name.equals(newName)) {
-            // Give it the short name.
-            nameNode.setString(newName);
-            compiler.reportCodeChange();
-          }
-        }
+        int index = -1;
       }
     }
 


--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionArgumentInjector.java	2018-12-02 05:50:36.871963209 -0500
+++ /tmp/GenProg_Defects4J_Closure_115/patches_100u/Patch_370/patched/tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionArgumentInjector.java	2018-12-02 06:08:38.053228731 -0500
@@ -71,7 +71,8 @@
         // so we need to clone the node.
         Node replacement = replacementTemplate.cloneTree();
         parent.replaceChild(node, replacement);
-        return replacement;
+        int index = -1;
+		return replacement;
       }
     } else if (replaceThis && node.isThis()) {
       Node replacementTemplate = replacements.get(THIS_MARKER);


