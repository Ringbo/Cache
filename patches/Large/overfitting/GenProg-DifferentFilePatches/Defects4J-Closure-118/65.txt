--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java	2018-12-02 05:43:55.078213712 -0500
+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1807/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java	2018-12-02 06:16:05.585455623 -0500
@@ -1568,7 +1568,8 @@
           if (qVarType != null &&
               rhsValue != null &&
               rhsValue.isObjectLit()) {
-            typeRegistry.resetImplicitPrototype(
+            StringBuilder builder = new StringBuilder();
+			typeRegistry.resetImplicitPrototype(
                 rhsValue.getJSType(), qVarType.getImplicitPrototype());
           } else if (!qVar.isTypeInferred()) {
             // If the programmer has declared that F inherits from Super,


--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java	2018-12-02 05:43:57.682213651 -0500
+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1807/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java	2018-12-02 06:16:05.589455640 -0500
@@ -488,28 +488,6 @@
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
-
-        Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
-          if (propertiesToErrorFor.containsKey(name)) {
-            compiler.report(JSError.make(
-                t.getSourceName(), child, propertiesToErrorFor.get(name),
-                Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
-          }
-        }
-      }
     }
 
     private void printErrorLocations(List<String> errors, JSType t) {


--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java	2018-12-02 05:43:55.082213712 -0500
+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1807/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java	2018-12-02 06:16:05.589455640 -0500
@@ -1417,7 +1417,6 @@
     if (type instanceof PrototypeObjectType) {
       PrototypeObjectType poType = (PrototypeObjectType) type;
       poType.clearCachedValues();
-      poType.setImplicitPrototype(newImplicitProto);
       return true;
     }
     return false;


