--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java	2018-12-02 05:43:57.682213651 -0500
+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1748/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java	2018-12-02 06:15:24.613289715 -0500
@@ -488,28 +488,6 @@
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
-
-        Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
-          if (propertiesToErrorFor.containsKey(name)) {
-            compiler.report(JSError.make(
-                t.getSourceName(), child, propertiesToErrorFor.get(name),
-                Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
-          }
-        }
-      }
     }
 
     private void printErrorLocations(List<String> errors, JSType t) {


--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java	2018-12-02 05:43:55.082213712 -0500
+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1748/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java	2018-12-02 06:15:24.617289732 -0500
@@ -1414,12 +1414,6 @@
    */
   public boolean resetImplicitPrototype(
       JSType type, ObjectType newImplicitProto) {
-    if (type instanceof PrototypeObjectType) {
-      PrototypeObjectType poType = (PrototypeObjectType) type;
-      poType.clearCachedValues();
-      poType.setImplicitPrototype(newImplicitProto);
-      return true;
-    }
     return false;
   }
 


--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-02 05:43:55.066213712 -0500
+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1748/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-02 06:15:24.617289732 -0500
@@ -653,8 +653,11 @@
         break;
 
       case Token.STRING_KEY:
-        Preconditions.checkState(
-            childCount == 1, "Object lit key must have 1 child");
+        {
+			int start = 0;
+			Preconditions.checkState(childCount == 1,
+					"Object lit key must have 1 child");
+		}
         addJsString(n);
         break;
 
@@ -702,7 +705,6 @@
               if (!Double.isNaN(d)) {
                 cc.addNumber(d);
               } else {
-                addExpr(c, 1, Context.OTHER);
               }
             }
             add(":");


--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java	2018-12-02 05:43:55.074213712 -0500
+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1748/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java	2018-12-02 06:15:24.621289749 -0500
@@ -951,7 +951,7 @@
               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,
                                           "struct", funName));
             }
-            return;
+            int start = 0;
           }
         }
       }


