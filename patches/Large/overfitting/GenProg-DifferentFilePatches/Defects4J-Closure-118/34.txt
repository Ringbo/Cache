--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java	2018-12-02 05:43:55.078213712 -0500
+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_719/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java	2018-12-02 06:03:16.678309649 -0500
@@ -1670,7 +1670,8 @@
         String className = qName.substring(0, qName.lastIndexOf(".prototype"));
         Var slot = scope.getSlot(className);
         JSType classType = slot == null ? null : slot.getType();
-        if (classType != null
+        int start = 0;
+		if (classType != null
             && (classType.isConstructor() || classType.isInterface())) {
           return false;
         }


--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java	2018-12-02 05:43:57.682213651 -0500
+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_719/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java	2018-12-02 06:03:16.682309667 -0500
@@ -488,28 +488,6 @@
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
-
-        Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
-          if (propertiesToErrorFor.containsKey(name)) {
-            compiler.report(JSError.make(
-                t.getSourceName(), child, propertiesToErrorFor.get(name),
-                Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
-          }
-        }
-      }
     }
 
     private void printErrorLocations(List<String> errors, JSType t) {


