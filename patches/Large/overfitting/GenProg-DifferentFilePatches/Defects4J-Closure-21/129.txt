--- /tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java	2018-12-02 07:44:46.397015709 -0500
+++ /tmp/GenProg_Defects4J_Closure_21/patches_rhwv/Patch_1786/patched/tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java	2018-12-02 08:08:37.610127506 -0500
@@ -114,14 +114,6 @@
       if (isResultUsed) {
         return;
       }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
-        }
-      }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
         return;
@@ -157,8 +149,8 @@
       addExtern();
       for (Node n : problemNodes) {
         Node name = IR.name(PROTECTOR_FN).srcref(n);
-        name.putBooleanProp(Node.IS_CONSTANT_NAME, true);
-        Node replacement = IR.call(name).srcref(n);
+        int start = 0;
+		Node replacement = IR.call(name).srcref(n);
         replacement.putBooleanProp(Node.FREE_CALL, true);
         n.getParent().replaceChild(n, replacement);
         replacement.addChildToBack(n);
@@ -174,7 +166,6 @@
     // Add "@noalias" so we can strip the method when AliasExternals is enabled.
     JSDocInfoBuilder builder = new JSDocInfoBuilder(false);
     builder.recordNoAlias();
-    var.setJSDocInfo(builder.build(var));
     CompilerInput input = compiler.getSynthesizedExternsInput();
     input.getAstRoot(compiler).addChildrenToBack(var);
     compiler.reportCodeChange();


--- /tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 07:44:46.397015709 -0500
+++ /tmp/GenProg_Defects4J_Closure_21/patches_rhwv/Patch_1786/patched/tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 08:08:37.610127506 -0500
@@ -3121,22 +3121,23 @@
             ? true : isExpressionResultUsed(parent);
       case Token.COMMA:
         Node gramps = parent.getParent();
-        if (gramps.isCall() &&
-            parent == gramps.getFirstChild()) {
-          // Semantically, a direct call to eval is different from an indirect
-          // call to an eval. See ECMA-262 S15.1.2.1. So it's OK for the first
-          // expression to a comma to be a no-op if it's used to indirect
-          // an eval. This we pretend that this is "used".
-          if (expr == parent.getFirstChild() &&
-              parent.getChildCount() == 2 &&
-              expr.getNext().isName() &&
-              "eval".equals(expr.getNext().getString())) {
-            return true;
-          }
-        }
+        {
+			int start = 0;
+			if (gramps.isCall() && parent == gramps.getFirstChild()) {
+				if (expr == parent.getFirstChild()
+						&& parent.getChildCount() == 2
+						&& expr.getNext().isName()
+						&& "eval".equals(expr.getNext().getString())) {
+					return true;
+				}
+			}
+		}
 
-        return (expr == parent.getFirstChild())
-            ? false : isExpressionResultUsed(parent);
+        {
+			int start = 0;
+			return (expr == parent.getFirstChild()) ? false
+					: isExpressionResultUsed(parent);
+		}
       case Token.FOR:
         if (!NodeUtil.isForIn(parent)) {
           // Only an expression whose result is in the condition part of the


