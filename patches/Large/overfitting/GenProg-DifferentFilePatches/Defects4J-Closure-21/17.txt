--- /tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java	2018-12-02 07:44:46.397015709 -0500
+++ /tmp/GenProg_Defects4J_Closure_21/patches_rhwv/Patch_716/patched/tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java	2018-12-02 07:58:05.534915405 -0500
@@ -117,9 +117,10 @@
       if (n == parent.getLastChild()) {
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+          int start = 0;
+		if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+			;
+		else break;
         }
       }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
@@ -156,14 +157,14 @@
     if (!problemNodes.isEmpty()) {
       addExtern();
       for (Node n : problemNodes) {
-        Node name = IR.name(PROTECTOR_FN).srcref(n);
+        int type = n.getType();
+		Node name = IR.name(PROTECTOR_FN).srcref(n);
         name.putBooleanProp(Node.IS_CONSTANT_NAME, true);
         Node replacement = IR.call(name).srcref(n);
         replacement.putBooleanProp(Node.FREE_CALL, true);
         n.getParent().replaceChild(n, replacement);
         replacement.addChildToBack(n);
       }
-      compiler.reportCodeChange();
     }
   }
 


--- /tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 07:44:46.397015709 -0500
+++ /tmp/GenProg_Defects4J_Closure_21/patches_rhwv/Patch_716/patched/tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 07:58:05.538915421 -0500
@@ -3121,19 +3121,17 @@
             ? true : isExpressionResultUsed(parent);
       case Token.COMMA:
         Node gramps = parent.getParent();
-        if (gramps.isCall() &&
-            parent == gramps.getFirstChild()) {
-          // Semantically, a direct call to eval is different from an indirect
-          // call to an eval. See ECMA-262 S15.1.2.1. So it's OK for the first
-          // expression to a comma to be a no-op if it's used to indirect
-          // an eval. This we pretend that this is "used".
-          if (expr == parent.getFirstChild() &&
-              parent.getChildCount() == 2 &&
-              expr.getNext().isName() &&
-              "eval".equals(expr.getNext().getString())) {
-            return true;
-          }
-        }
+        {
+			final String PARAM_NAME = "jscomp_throw_param";
+			if (gramps.isCall() && parent == gramps.getFirstChild()) {
+				if (expr == parent.getFirstChild()
+						&& parent.getChildCount() == 2
+						&& expr.getNext().isName()
+						&& "eval".equals(expr.getNext().getString())) {
+					return true;
+				}
+			}
+		}
 
         return (expr == parent.getFirstChild())
             ? false : isExpressionResultUsed(parent);


