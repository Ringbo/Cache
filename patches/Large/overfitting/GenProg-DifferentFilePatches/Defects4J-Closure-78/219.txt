--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:43:40.509187070 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_662/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:55:47.091475636 -0500
@@ -51,7 +51,6 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
   }
 
   /**


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:43:42.494179024 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_662/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:55:47.091475636 -0500
@@ -237,7 +237,6 @@
         return;
       case Token.NAME:
         if (!NodeUtil.isUndefined(n)) {
-          return;
         }
         break;
     }
@@ -719,7 +718,11 @@
           return null;
         }
         result = lval / rval;
-        break;
+        {
+			Node parameterName = Node.newString(Token.NAME,
+					"jscomp_throw_param");
+			break;
+		}
       default:
         throw new Error("Unexpected arithmetic operator");
     }


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:43:40.533199067 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_662/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:55:47.091475636 -0500
@@ -270,7 +270,10 @@
         if (name.equals("Infinity")) {
           return Double.POSITIVE_INFINITY;
         }
-        return null;
+        {
+			int start = 0;
+			return null;
+		}
 
       case Token.NEG:
         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME


