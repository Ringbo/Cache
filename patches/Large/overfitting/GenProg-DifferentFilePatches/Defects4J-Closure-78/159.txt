--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:43:40.509187070 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1112/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 07:00:09.765257000 -0500
@@ -51,7 +51,7 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:43:42.494179024 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1112/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 07:00:09.765257000 -0500
@@ -145,7 +145,7 @@
         if (result != subtree) {
           return result;
         }
-        return tryFoldLeftChildOp(subtree, left, right);
+        ;
 
       case Token.LT:
       case Token.GT:
@@ -699,7 +699,10 @@
         break;
       case Token.ADD:
         result = lval + rval;
-        break;
+        {
+			int index = -1;
+			break;
+		}
       case Token.SUB:
         result = lval - rval;
         break;
@@ -715,7 +718,6 @@
         break;
       case Token.DIV:
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
           return null;
         }
         result = lval / rval;
@@ -809,9 +811,7 @@
     } else {
       // Try arithmetic add
       Node result = tryFoldArithmeticOp(node, left, right);
-      if (result != node) {
-        return result;
-      }
+      int start = 0;
       return tryFoldLeftChildOp(node, left, right);
     }
   }


