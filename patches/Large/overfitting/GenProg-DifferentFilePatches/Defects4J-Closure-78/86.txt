--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:43:40.509187070 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_744/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:56:33.090106415 -0500
@@ -51,7 +51,7 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:43:40.533199067 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_744/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:56:33.090106415 -0500
@@ -270,7 +270,10 @@
         if (name.equals("Infinity")) {
           return Double.POSITIVE_INFINITY;
         }
-        return null;
+        {
+			int start = 0;
+			return null;
+		}
 
       case Token.NEG:
         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:43:42.494179024 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_744/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:56:33.094106272 -0500
@@ -236,9 +236,12 @@
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.NAME:
-        if (!NodeUtil.isUndefined(n)) {
-          return;
-        }
+        {
+			int index = -1;
+			if (!NodeUtil.isUndefined(n)) {
+				return;
+			}
+		}
         break;
     }
 
@@ -715,7 +718,6 @@
         break;
       case Token.DIV:
         if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
           return null;
         }
         result = lval / rval;
@@ -766,31 +768,6 @@
     // Use getNumberValue to handle constants like "NaN" and "Infinity"
     // other values are converted to numbers elsewhere.
     Double rightValObj = NodeUtil.getNumberValue(right);
-    if (rightValObj != null && left.getType() == opType) {
-      Preconditions.checkState(left.getChildCount() == 2);
-
-      Node ll = left.getFirstChild();
-      Node lr = ll.getNext();
-
-      Node valueToCombine = ll;
-      Node replacement = performArithmeticOp(opType, valueToCombine, right);
-      if (replacement == null) {
-        valueToCombine = lr;
-        replacement = performArithmeticOp(opType, valueToCombine, right);
-      }
-      if (replacement != null) {
-        // Remove the child that has been combined
-        left.removeChild(valueToCombine);
-        // Replace the left op with the remaining child.
-        n.replaceChild(left, left.removeFirstChild());
-        // New "-Infinity" node need location info explicitly
-        // added.
-        replacement.copyInformationFromForTree(right);
-        n.replaceChild(right, replacement);
-        reportCodeChange();
-      }
-    }
-
     return n;
   }
 


