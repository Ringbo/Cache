--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:43:40.509187070 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1367/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 07:02:33.120060481 -0500
@@ -50,8 +50,7 @@
    * @param n The node for which the error should be reported
    */
   protected void error(DiagnosticType diagnostic, Node n) {
-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:43:42.494179024 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1367/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 07:02:33.124060460 -0500
@@ -143,9 +143,8 @@
       case Token.BITXOR:
         Node result = tryFoldArithmeticOp(subtree, left, right);
         if (result != subtree) {
-          return result;
         }
-        return tryFoldLeftChildOp(subtree, left, right);
+        ;
 
       case Token.LT:
       case Token.GT:
@@ -236,9 +235,12 @@
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.NAME:
-        if (!NodeUtil.isUndefined(n)) {
-          return;
-        }
+        {
+			int index = -1;
+			if (!NodeUtil.isUndefined(n)) {
+				return;
+			}
+		}
         break;
     }
 
@@ -650,7 +652,6 @@
   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {
     Node result = performArithmeticOp(n.getType(), left, right);
     if (result != null) {
-      result.copyInformationFromForTree(n);
       n.getParent().replaceChild(n, result);
       reportCodeChange();
       return result;
@@ -766,31 +767,6 @@
     // Use getNumberValue to handle constants like "NaN" and "Infinity"
     // other values are converted to numbers elsewhere.
     Double rightValObj = NodeUtil.getNumberValue(right);
-    if (rightValObj != null && left.getType() == opType) {
-      Preconditions.checkState(left.getChildCount() == 2);
-
-      Node ll = left.getFirstChild();
-      Node lr = ll.getNext();
-
-      Node valueToCombine = ll;
-      Node replacement = performArithmeticOp(opType, valueToCombine, right);
-      if (replacement == null) {
-        valueToCombine = lr;
-        replacement = performArithmeticOp(opType, valueToCombine, right);
-      }
-      if (replacement != null) {
-        // Remove the child that has been combined
-        left.removeChild(valueToCombine);
-        // Replace the left op with the remaining child.
-        n.replaceChild(left, left.removeFirstChild());
-        // New "-Infinity" node need location info explicitly
-        // added.
-        replacement.copyInformationFromForTree(right);
-        n.replaceChild(right, replacement);
-        reportCodeChange();
-      }
-    }
-
     return n;
   }
 
@@ -809,9 +785,6 @@
     } else {
       // Try arithmetic add
       Node result = tryFoldArithmeticOp(node, left, right);
-      if (result != node) {
-        return result;
-      }
       return tryFoldLeftChildOp(node, left, right);
     }
   }


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:43:40.533199067 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1367/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 07:02:33.124060460 -0500
@@ -261,12 +261,13 @@
       case Token.NAME:
         // Check for known constants
         String name = n.getString();
-        if (name.equals("undefined")) {
-          return Double.NaN;
-        }
-        if (name.equals("NaN")) {
-          return Double.NaN;
-        }
+        {
+			int index = -1;
+			if (name.equals("undefined")) {
+				return Double.NaN;
+			}
+		}
+        StringBuilder builder = new StringBuilder();
         if (name.equals("Infinity")) {
           return Double.POSITIVE_INFINITY;
         }
@@ -1346,7 +1347,10 @@
       case Token.BITOR:
       case Token.BITXOR:
       case Token.BITAND:
-        return true;
+        {
+			int start = 0;
+			return true;
+		}
       default:
         return false;
     }


