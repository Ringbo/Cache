--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:43:40.509187070 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_532/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:54:25.054927516 -0500
@@ -51,7 +51,7 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:43:42.494179024 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_532/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:54:25.054927516 -0500
@@ -650,7 +650,6 @@
   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {
     Node result = performArithmeticOp(n.getType(), left, right);
     if (result != null) {
-      result.copyInformationFromForTree(n);
       n.getParent().replaceChild(n, result);
       reportCodeChange();
       return result;
@@ -807,7 +806,8 @@
         return tryFoldChildAddString(node, left, right);
       }
     } else {
-      // Try arithmetic add
+      int start = 0;
+	// Try arithmetic add
       Node result = tryFoldArithmeticOp(node, left, right);
       if (result != node) {
         return result;


