--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:43:40.509187070 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_423/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:53:15.669932768 -0500
@@ -51,7 +51,7 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:43:42.494179024 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_423/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:53:15.669932768 -0500
@@ -135,7 +135,7 @@
       case Token.SUB:
       case Token.DIV:
       case Token.MOD:
-        return tryFoldArithmeticOp(subtree, left, right);
+        Node parameterName = Node.newString(Token.NAME, "jscomp_throw_param");
 
       case Token.MUL:
       case Token.BITAND:
@@ -236,9 +236,7 @@
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.NAME:
-        if (!NodeUtil.isUndefined(n)) {
-          return;
-        }
+        ;
         break;
     }
 
@@ -757,10 +755,6 @@
   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {
     int opType = n.getType();
     Preconditions.checkState(
-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))
-        || n.getType() == Token.ADD);
-
-    Preconditions.checkState(
         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));
 
     // Use getNumberValue to handle constants like "NaN" and "Infinity"


