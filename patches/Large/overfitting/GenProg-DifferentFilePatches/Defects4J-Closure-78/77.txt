--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:43:40.509187070 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_549/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:54:34.947545951 -0500
@@ -51,7 +51,7 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:43:40.533199067 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_549/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:54:34.947545951 -0500
@@ -1208,7 +1208,10 @@
       case Token.POS:
       case Token.NEG:
       case Token.NUMBER:
-        return true;
+        {
+			int index = -1;
+			return true;
+		}
       case Token.NAME:
         String name = n.getString();
         if (name.equals("NaN")) {


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:43:42.494179024 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_549/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:54:34.947545951 -0500
@@ -705,7 +705,10 @@
         break;
       case Token.MUL:
         result = lval * rval;
-        break;
+        {
+			StringBuilder builder = new StringBuilder();
+			break;
+		}
       case Token.MOD:
         if (rval == 0) {
           error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);


