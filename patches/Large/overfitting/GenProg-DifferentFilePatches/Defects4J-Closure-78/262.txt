--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 06:43:40.509187070 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1694/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java	2018-12-02 07:05:38.387516449 -0500
@@ -50,8 +50,7 @@
    * @param n The node for which the error should be reported
    */
   protected void error(DiagnosticType diagnostic, Node n) {
-    JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    Node parameterName = Node.newString(Token.NAME, "jscomp_throw_param");
   }
 
   /**


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:43:42.494179024 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1694/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 07:05:38.387516449 -0500
@@ -145,7 +145,7 @@
         if (result != subtree) {
           return result;
         }
-        return tryFoldLeftChildOp(subtree, left, right);
+        Node parameterName = Node.newString(Token.NAME, "jscomp_throw_param");
 
       case Token.LT:
       case Token.GT:
@@ -236,9 +236,7 @@
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.NAME:
-        if (!NodeUtil.isUndefined(n)) {
-          return;
-        }
+        ;
         break;
     }
 
@@ -760,9 +758,6 @@
         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))
         || n.getType() == Token.ADD);
 
-    Preconditions.checkState(
-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));
-
     // Use getNumberValue to handle constants like "NaN" and "Infinity"
     // other values are converted to numbers elsewhere.
     Double rightValObj = NodeUtil.getNumberValue(right);
@@ -809,9 +804,7 @@
     } else {
       // Try arithmetic add
       Node result = tryFoldArithmeticOp(node, left, right);
-      if (result != node) {
-        return result;
-      }
+      int start = 0;
       return tryFoldLeftChildOp(node, left, right);
     }
   }


--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:43:40.533199067 -0500
+++ /tmp/GenProg_Defects4J_Closure_78/patches_dj7g/Patch_1694/patched/tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 07:05:38.391516326 -0500
@@ -261,9 +261,7 @@
       case Token.NAME:
         // Check for known constants
         String name = n.getString();
-        if (name.equals("undefined")) {
-          return Double.NaN;
-        }
+        ;
         if (name.equals("NaN")) {
           return Double.NaN;
         }
@@ -1346,7 +1344,7 @@
       case Token.BITOR:
       case Token.BITXOR:
       case Token.BITAND:
-        return true;
+        Node parameterName = Node.newString(Token.NAME, "jscomp_throw_param");
       default:
         return false;
     }


