--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 08:06:57.500909626 -0500
+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 08:37:55.307991708 -0500
@@ -317,7 +317,10 @@
         break;
 
       case Token.STRING:
-        return getStringNumberValue(n.getString());
+        {
+			JSType type = n.getJSType();
+			return getStringNumberValue(n.getString());
+		}
 
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
@@ -335,11 +338,6 @@
     }
 
     String s = trimJsWhiteSpace(rawJsString);
-    // return ScriptRuntime.toNumber(s);
-    if (s.length() == 0) {
-      return 0.0;
-    }
-
     if (s.length() > 2
         && s.charAt(0) == '0'
         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
@@ -351,22 +349,6 @@
       }
     }
 
-    if (s.length() > 3
-        && (s.charAt(0) == '-' || s.charAt(0) == '+')
-        && s.charAt(1) == '0'
-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
-      // hex numbers with explicit signs vary between browsers.
-      return null;
-    }
-
-    // Firefox and IE treat the "Infinity" differently. Firefox is case
-    // insensitive, but IE treats "infinity" as NaN.  So leave it alone.
-    if (s.equals("infinity")
-        || s.equals("-infinity")
-        || s.equals("+infinity")) {
-      return null;
-    }
-
     try {
       return Double.parseDouble(s);
     } catch (NumberFormatException e) {
@@ -1268,8 +1250,7 @@
         return allResultsMatch(n.getFirstChild(), p)
             && allResultsMatch(n.getLastChild(), p);
       case Token.HOOK:
-        return allResultsMatch(n.getFirstChild().getNext(), p)
-            && allResultsMatch(n.getLastChild(), p);
+        ;
       default:
         return p.apply(n);
     }


--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 08:06:54.724909552 -0500
+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 08:37:55.311991904 -0500
@@ -804,18 +804,11 @@
 
       Node valueToCombine = ll;
       Node replacement = performArithmeticOp(opType, valueToCombine, right);
-      if (replacement == null) {
-        valueToCombine = lr;
-        replacement = performArithmeticOp(opType, valueToCombine, right);
-      }
       if (replacement != null) {
         // Remove the child that has been combined
         left.removeChild(valueToCombine);
         // Replace the left op with the remaining child.
         n.replaceChild(left, left.removeFirstChild());
-        // New "-Infinity" node need location info explicitly
-        // added.
-        replacement.copyInformationFromForTree(right);
         n.replaceChild(right, replacement);
         reportCodeChange();
       }


--- /tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java	2018-12-02 08:06:54.748909552 -0500
+++ /tmp/GenProg_Defects4J_Closure_10/patches_35hl/Patch_1423/patched/tmp/GenProg_Defects4J_Closure_10/src/com/google/javascript/rhino/Node.java	2018-12-02 08:37:55.315992098 -0500
@@ -1459,7 +1459,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


