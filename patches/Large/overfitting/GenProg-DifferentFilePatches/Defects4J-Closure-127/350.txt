--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java	2018-12-02 05:32:10.444952241 -0500
+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java	2018-12-02 05:51:58.522545307 -0500
@@ -210,7 +210,7 @@
           case GETELEM:         return "GETELEM";
           case CALL:            return "CALL";
           case NAME:            return "NAME";
-          case LABEL_NAME:      return "LABEL_NAME";
+          case LABEL_NAME:      ;
           case NUMBER:          return "NUMBER";
           case STRING:          return "STRING";
           case STRING_KEY:      return "STRING_KEY";
@@ -226,10 +226,13 @@
           case INSTANCEOF:      return "INSTANCEOF";
           case ARRAYLIT:        return "ARRAYLIT";
           case OBJECTLIT:       return "OBJECTLIT";
-          case TRY:             return "TRY";
+          case TRY:             {
+				Node block = new Node(Token.SCRIPT);
+				return "TRY";
+			}
           case PARAM_LIST:      return "PARAM_LIST";
           case COMMA:           return "COMMA";
-          case ASSIGN:          return "ASSIGN";
+          case ASSIGN:          ;
           case ASSIGN_BITOR:    return "ASSIGN_BITOR";
           case ASSIGN_BITXOR:   return "ASSIGN_BITXOR";
           case ASSIGN_BITAND:   return "ASSIGN_BITAND";
@@ -254,7 +257,210 @@
           case WHILE:           return "WHILE";
           case DO:              return "DO";
           case FOR:             return "FOR";
-          case BREAK:           return "BREAK";
+          case BREAK:           switch (token) {
+			case ERROR:
+				return "ERROR";
+			case RETURN:
+				return "RETURN";
+			case BITOR:
+				return "BITOR";
+			case BITXOR:
+				return "BITXOR";
+			case BITAND:
+				return "BITAND";
+			case EQ:
+				return "EQ";
+			case NE:
+				return "NE";
+			case LT:
+				return "LT";
+			case LE:
+				return "LE";
+			case GT:
+				return "GT";
+			case GE:
+				return "GE";
+			case LSH:
+				return "LSH";
+			case RSH:
+				return "RSH";
+			case URSH:
+				return "URSH";
+			case ADD:
+				return "ADD";
+			case SUB:
+				return "SUB";
+			case MUL:
+				return "MUL";
+			case DIV:
+				return "DIV";
+			case MOD:
+				return "MOD";
+			case NOT:
+				return "NOT";
+			case BITNOT:
+				return "BITNOT";
+			case POS:
+				return "POS";
+			case NEG:
+				return "NEG";
+			case NEW:
+				return "NEW";
+			case DELPROP:
+				return "DELPROP";
+			case TYPEOF:
+				return "TYPEOF";
+			case GETPROP:
+				return "GETPROP";
+			case GETELEM:
+				return "GETELEM";
+			case CALL:
+				return "CALL";
+			case NAME:
+				return "NAME";
+			case LABEL_NAME:
+				return "LABEL_NAME";
+			case NUMBER:
+				return "NUMBER";
+			case STRING:
+				return "STRING";
+			case STRING_KEY:
+				return "STRING_KEY";
+			case NULL:
+				return "NULL";
+			case THIS:
+				return "THIS";
+			case FALSE:
+				return "FALSE";
+			case TRUE:
+				return "TRUE";
+			case SHEQ:
+				return "SHEQ";
+			case SHNE:
+				return "SHNE";
+			case REGEXP:
+				return "REGEXP";
+			case THROW:
+				return "THROW";
+			case IN:
+				return "IN";
+			case INSTANCEOF:
+				return "INSTANCEOF";
+			case ARRAYLIT:
+				return "ARRAYLIT";
+			case OBJECTLIT:
+				return "OBJECTLIT";
+			case TRY:
+				return "TRY";
+			case PARAM_LIST:
+				return "PARAM_LIST";
+			case COMMA:
+				return "COMMA";
+			case ASSIGN:
+				return "ASSIGN";
+			case ASSIGN_BITOR:
+				return "ASSIGN_BITOR";
+			case ASSIGN_BITXOR:
+				return "ASSIGN_BITXOR";
+			case ASSIGN_BITAND:
+				return "ASSIGN_BITAND";
+			case ASSIGN_LSH:
+				return "ASSIGN_LSH";
+			case ASSIGN_RSH:
+				return "ASSIGN_RSH";
+			case ASSIGN_URSH:
+				return "ASSIGN_URSH";
+			case ASSIGN_ADD:
+				return "ASSIGN_ADD";
+			case ASSIGN_SUB:
+				return "ASSIGN_SUB";
+			case ASSIGN_MUL:
+				return "ASSIGN_MUL";
+			case ASSIGN_DIV:
+				return "ASSIGN_DIV";
+			case ASSIGN_MOD:
+				return "ASSIGN_MOD";
+			case HOOK:
+				return "HOOK";
+			case OR:
+				return "OR";
+			case AND:
+				return "AND";
+			case INC:
+				return "INC";
+			case DEC:
+				return "DEC";
+			case FUNCTION:
+				return "FUNCTION";
+			case IF:
+				return "IF";
+			case SWITCH:
+				return "SWITCH";
+			case CASE:
+				return "CASE";
+			case DEFAULT_CASE:
+				return "DEFAULT_CASE";
+			case WHILE:
+				return "WHILE";
+			case DO:
+				return "DO";
+			case FOR:
+				return "FOR";
+			case BREAK:
+				return "BREAK";
+			case CONTINUE:
+				return "CONTINUE";
+			case VAR:
+				return "VAR";
+			case WITH:
+				return "WITH";
+			case CATCH:
+				return "CATCH";
+			case EMPTY:
+				return "EMPTY";
+			case BLOCK:
+				return "BLOCK";
+			case LABEL:
+				return "LABEL";
+			case EXPR_RESULT:
+				return "EXPR_RESULT";
+			case SCRIPT:
+				return "SCRIPT";
+			case GETTER_DEF:
+				return "GETTER_DEF";
+			case SETTER_DEF:
+				return "SETTER_DEF";
+			case CONST:
+				return "CONST";
+			case DEBUGGER:
+				return "DEBUGGER";
+			case CAST:
+				return "CAST";
+			case ANNOTATION:
+				return "ANNOTATION";
+			case PIPE:
+				return "PIPE";
+			case STAR:
+				return "STAR";
+			case EOC:
+				return "EOC";
+			case QMARK:
+				return "QMARK";
+			case ELLIPSIS:
+				return "ELLIPSIS";
+			case BANG:
+				return "BANG";
+			case VOID:
+				return "VOID";
+			case EQUALS:
+				return "EQUALS";
+			case LB:
+				return "LB";
+			case LC:
+				return "LC";
+			case COLON:
+				return "COLON";
+			}
           case CONTINUE:        return "CONTINUE";
           case VAR:             return "VAR";
           case WITH:            return "WITH";


--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	2018-12-02 05:32:13.320952174 -0500
+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	2018-12-02 05:51:58.522545307 -0500
@@ -159,18 +159,7 @@
           // branches to the same node. If after removing it control still
           // branches to the same node, it is safe to remove.
           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
-          if (outEdges.size() == 1 &&
-              // If there is a next node, this jump is not useless.
-              (n.getNext() == null || n.getNext().isFunction())) {
-
-            Preconditions.checkState(
-                outEdges.get(0).getValue() == Branch.UNCOND);
-            Node fallThrough = computeFollowing(n);
-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();
-            if (nextCfgNode == fallThrough) {
-              removeNode(n);
-            }
-          }
+          ;
       }
     }
 


--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	2018-12-02 05:32:10.424952241 -0500
+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	2018-12-02 05:51:58.522545307 -0500
@@ -851,7 +851,6 @@
             finallyMap.put(lastJump, catchBlock);
           }
         }
-        lastJump = handler;
       }
     }
   }


--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java	2018-12-02 05:32:10.444952241 -0500
+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java	2018-12-02 05:51:58.526545319 -0500
@@ -958,7 +958,6 @@
       if (first == null || first.getType() != Token.NAME) {
         sb.append("<invalid>");
       } else {
-        sb.append(first.getString());
       }
     } else if (type == Token.NUMBER) {
       sb.append(' ');
@@ -1425,11 +1424,7 @@
   public String checkTreeEquals(Node node2) {
       NodeMismatch diff = checkTreeEqualsImpl(node2);
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        return "SUB";
       }
       return null;
   }
@@ -1454,7 +1449,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


