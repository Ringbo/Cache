--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java	2018-12-02 05:32:10.444952241 -0500
+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_649/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java	2018-12-02 05:45:24.565612288 -0500
@@ -210,11 +210,11 @@
           case GETELEM:         return "GETELEM";
           case CALL:            return "CALL";
           case NAME:            return "NAME";
-          case LABEL_NAME:      return "LABEL_NAME";
+          case LABEL_NAME:      return "RETURN";
           case NUMBER:          return "NUMBER";
           case STRING:          return "STRING";
           case STRING_KEY:      return "STRING_KEY";
-          case NULL:            return "NULL";
+          case NULL:            ;
           case THIS:            return "THIS";
           case FALSE:           return "FALSE";
           case TRUE:            return "TRUE";


--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	2018-12-02 05:32:13.320952174 -0500
+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_649/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java	2018-12-02 05:45:24.565612288 -0500
@@ -159,31 +159,13 @@
           // branches to the same node. If after removing it control still
           // branches to the same node, it is safe to remove.
           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
-          if (outEdges.size() == 1 &&
-              // If there is a next node, this jump is not useless.
-              (n.getNext() == null || n.getNext().isFunction())) {
-
-            Preconditions.checkState(
-                outEdges.get(0).getValue() == Branch.UNCOND);
-            Node fallThrough = computeFollowing(n);
-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();
-            if (nextCfgNode == fallThrough) {
-              removeNode(n);
-            }
-          }
+          ;
       }
     }
 
 
     private Node computeFollowing(Node n) {
       Node next = ControlFlowAnalysis.computeFollowNode(n);
-      while (next != null && next.isBlock()) {
-        if (next.hasChildren()) {
-          next = next.getFirstChild();
-        } else {
-          next = computeFollowing(next);
-        }
-      }
       return next;
     }
 


--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	2018-12-02 05:32:10.424952241 -0500
+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_649/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	2018-12-02 05:45:24.569612292 -0500
@@ -839,7 +839,8 @@
 
         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.
           if (lastJump == cfgNode) {
-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());
+            int index = -1;
+			createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());
           } else {
             finallyMap.put(lastJump, handler.getLastChild());
           }


