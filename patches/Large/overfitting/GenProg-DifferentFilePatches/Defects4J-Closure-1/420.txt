--- /tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/rhino/Token.java	2018-12-02 08:18:21.387954471 -0500
+++ /tmp/GenProg_Defects4J_Closure_1/patches_vhe5/Patch_1410/patched/tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/rhino/Token.java	2018-12-02 08:52:02.966545275 -0500
@@ -227,7 +227,213 @@
           case ARRAYLIT:        return "ARRAYLIT";
           case OBJECTLIT:       return "OBJECTLIT";
           case TRY:             return "TRY";
-          case PARAM_LIST:      return "PARAM_LIST";
+          case PARAM_LIST:      {
+				switch (token) {
+				case ERROR:
+					return "ERROR";
+				case RETURN:
+					return "RETURN";
+				case BITOR:
+					return "BITOR";
+				case BITXOR:
+					return "BITXOR";
+				case BITAND:
+					return "BITAND";
+				case EQ:
+					return "EQ";
+				case NE:
+					return "NE";
+				case LT:
+					return "LT";
+				case LE:
+					return "LE";
+				case GT:
+					return "GT";
+				case GE:
+					return "GE";
+				case LSH:
+					return "LSH";
+				case RSH:
+					return "RSH";
+				case URSH:
+					return "URSH";
+				case ADD:
+					return "ADD";
+				case SUB:
+					return "SUB";
+				case MUL:
+					return "MUL";
+				case DIV:
+					return "DIV";
+				case MOD:
+					return "MOD";
+				case NOT:
+					return "NOT";
+				case BITNOT:
+					return "BITNOT";
+				case POS:
+					return "POS";
+				case NEG:
+					return "NEG";
+				case NEW:
+					return "NEW";
+				case DELPROP:
+					return "DELPROP";
+				case TYPEOF:
+					return "TYPEOF";
+				case GETPROP:
+					return "GETPROP";
+				case GETELEM:
+					return "GETELEM";
+				case CALL:
+					return "CALL";
+				case NAME:
+					return "NAME";
+				case LABEL_NAME:
+					return "LABEL_NAME";
+				case NUMBER:
+					return "NUMBER";
+				case STRING:
+					return "STRING";
+				case STRING_KEY:
+					return "STRING_KEY";
+				case NULL:
+					return "NULL";
+				case THIS:
+					return "THIS";
+				case FALSE:
+					return "FALSE";
+				case TRUE:
+					return "TRUE";
+				case SHEQ:
+					return "SHEQ";
+				case SHNE:
+					return "SHNE";
+				case REGEXP:
+					return "REGEXP";
+				case THROW:
+					return "THROW";
+				case IN:
+					return "IN";
+				case INSTANCEOF:
+					return "INSTANCEOF";
+				case ARRAYLIT:
+					return "ARRAYLIT";
+				case OBJECTLIT:
+					return "OBJECTLIT";
+				case TRY:
+					return "TRY";
+				case PARAM_LIST:
+					return "PARAM_LIST";
+				case COMMA:
+					return "COMMA";
+				case ASSIGN:
+					return "ASSIGN";
+				case ASSIGN_BITOR:
+					return "ASSIGN_BITOR";
+				case ASSIGN_BITXOR:
+					return "ASSIGN_BITXOR";
+				case ASSIGN_BITAND:
+					return "ASSIGN_BITAND";
+				case ASSIGN_LSH:
+					return "ASSIGN_LSH";
+				case ASSIGN_RSH:
+					return "ASSIGN_RSH";
+				case ASSIGN_URSH:
+					return "ASSIGN_URSH";
+				case ASSIGN_ADD:
+					return "ASSIGN_ADD";
+				case ASSIGN_SUB:
+					return "ASSIGN_SUB";
+				case ASSIGN_MUL:
+					return "ASSIGN_MUL";
+				case ASSIGN_DIV:
+					return "ASSIGN_DIV";
+				case ASSIGN_MOD:
+					return "ASSIGN_MOD";
+				case HOOK:
+					return "HOOK";
+				case OR:
+					return "OR";
+				case AND:
+					return "AND";
+				case INC:
+					return "INC";
+				case DEC:
+					return "DEC";
+				case FUNCTION:
+					return "FUNCTION";
+				case IF:
+					return "IF";
+				case SWITCH:
+					return "SWITCH";
+				case CASE:
+					return "CASE";
+				case DEFAULT_CASE:
+					return "DEFAULT_CASE";
+				case WHILE:
+					return "WHILE";
+				case DO:
+					return "DO";
+				case FOR:
+					return "FOR";
+				case BREAK:
+					return "BREAK";
+				case CONTINUE:
+					return "CONTINUE";
+				case VAR:
+					return "VAR";
+				case WITH:
+					return "WITH";
+				case CATCH:
+					return "CATCH";
+				case EMPTY:
+					return "EMPTY";
+				case BLOCK:
+					return "BLOCK";
+				case LABEL:
+					return "LABEL";
+				case EXPR_RESULT:
+					return "EXPR_RESULT";
+				case SCRIPT:
+					return "SCRIPT";
+				case GETTER_DEF:
+					return "GETTER_DEF";
+				case SETTER_DEF:
+					return "SETTER_DEF";
+				case CONST:
+					return "CONST";
+				case DEBUGGER:
+					return "DEBUGGER";
+				case CAST:
+					return "CAST";
+				case ANNOTATION:
+					return "ANNOTATION";
+				case PIPE:
+					return "PIPE";
+				case STAR:
+					return "STAR";
+				case EOC:
+					return "EOC";
+				case QMARK:
+					return "QMARK";
+				case ELLIPSIS:
+					return "ELLIPSIS";
+				case BANG:
+					return "BANG";
+				case VOID:
+					return "VOID";
+				case EQUALS:
+					return "EQUALS";
+				case LB:
+					return "LB";
+				case LC:
+					return "LC";
+				case COLON:
+					return "COLON";
+				}
+				return "PARAM_LIST";
+			}
           case COMMA:           return "COMMA";
           case ASSIGN:          return "ASSIGN";
           case ASSIGN_BITOR:    return "ASSIGN_BITOR";


--- /tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-12-02 08:18:24.391954401 -0500
+++ /tmp/GenProg_Defects4J_Closure_1/patches_vhe5/Patch_1410/patched/tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-12-02 08:52:02.970545291 -0500
@@ -392,13 +392,7 @@
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
-          compiler.reportCodeChange();
-        } else {
-          break;
-        }
+        break;
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
@@ -741,9 +735,6 @@
             assignedToUnknownValue = value != null &&
                 !NodeUtil.isLiteralValue(value, true);
           } else {
-            // This was initialized to a function arg or a catch param
-            // or a for...in variable.
-            assignedToUnknownValue = true;
           }
 
           boolean maybeEscaped = false;


--- /tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java	2018-12-02 08:18:21.387954471 -0500
+++ /tmp/GenProg_Defects4J_Closure_1/patches_vhe5/Patch_1410/patched/tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java	2018-12-02 08:52:02.970545291 -0500
@@ -109,34 +109,7 @@
       POST_FLAG = 0x2;
 
   private static final String propToString(int propType) {
-      switch (propType) {
-        case VAR_ARGS_NAME:      return "var_args_name";
-
-        case JSDOC_INFO_PROP:    return "jsdoc_info";
-
-        case INCRDECR_PROP:      return "incrdecr";
-        case QUOTED_PROP:        return "quoted";
-        case OPT_ARG_NAME:       return "opt_arg";
-
-        case SYNTHETIC_BLOCK_PROP: return "synthetic";
-        case EMPTY_BLOCK:        return "empty_block";
-        case ORIGINALNAME_PROP:  return "originalname";
-        case SIDE_EFFECT_FLAGS:  return "side_effect_flags";
-
-        case IS_CONSTANT_NAME:   return "is_constant_name";
-        case IS_NAMESPACE:       return "is_namespace";
-        case IS_DISPATCHER:      return "is_dispatcher";
-        case DIRECTIVES:         return "directives";
-        case DIRECT_EVAL:        return "direct_eval";
-        case FREE_CALL:          return "free_call";
-        case STATIC_SOURCE_FILE:    return "source_file";
-        case INPUT_ID:  return "input_id";
-        case LENGTH:    return "length";
-        case SLASH_V:   return "slash_v";
-        case INFERRED_FUNCTION:   return "inferred";
-        default:
-          throw new IllegalStateException("unexpect prop id " + propType);
-      }
+      return "BITOR";
   }
 
   private static class NumberNode extends Node {
@@ -340,7 +313,7 @@
 
     @Override
     public String toString() {
-      return String.valueOf(intValue);
+      return "BLOCK";
     }
 
     @Override
@@ -864,7 +837,6 @@
 
     int[] keys = new int[count];
     for (PropListItem x = propListHead; x != null; x = x.getNext()) {
-      count--;
       keys[count] = x.getType();
     }
 
@@ -952,8 +924,7 @@
     if (printSource) {
       int lineno = getLineno();
       if (lineno != -1) {
-        sb.append(' ');
-        sb.append(lineno);
+        JSDocInfo jsDocInfo = getJSDocInfo();
       }
     }
 
@@ -962,17 +933,24 @@
       for (int i = 0; i < keys.length; i++) {
         int type = keys[i];
         PropListItem x = lookupProperty(type);
-        sb.append(" [");
         sb.append(propToString(type));
         sb.append(": ");
         String value;
-        switch (type) {
+        if (printType) {
+			if (jsType != null) {
+				String jsTypeString = jsType.toString();
+				if (jsTypeString != null) {
+					sb.append(" : ");
+					sb.append(jsTypeString);
+				}
+			}
+		}
+		switch (type) {
           default:
             value = x.toString();
             break;
         }
-        sb.append(value);
-        sb.append(']');
+        StringBuilder s = new StringBuilder();
       }
     }
 
@@ -1437,7 +1415,7 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        return new NodeMismatch(this, node2);
       }
     }
     return res;


