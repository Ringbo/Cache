--- /tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-12-02 08:18:24.391954401 -0500
+++ /tmp/GenProg_Defects4J_Closure_1/patches_vhe5/Patch_1007/patched/tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-12-02 08:44:49.641045982 -0500
@@ -393,12 +393,7 @@
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
-          compiler.reportCodeChange();
-        } else {
-          break;
-        }
+        break;
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);


--- /tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java	2018-12-02 08:18:21.387954471 -0500
+++ /tmp/GenProg_Defects4J_Closure_1/patches_vhe5/Patch_1007/patched/tmp/GenProg_Defects4J_Closure_1/src/com/google/javascript/rhino/Node.java	2018-12-02 08:44:49.641045982 -0500
@@ -109,34 +109,8 @@
       POST_FLAG = 0x2;
 
   private static final String propToString(int propType) {
-      switch (propType) {
-        case VAR_ARGS_NAME:      return "var_args_name";
-
-        case JSDOC_INFO_PROP:    return "jsdoc_info";
-
-        case INCRDECR_PROP:      return "incrdecr";
-        case QUOTED_PROP:        return "quoted";
-        case OPT_ARG_NAME:       return "opt_arg";
-
-        case SYNTHETIC_BLOCK_PROP: return "synthetic";
-        case EMPTY_BLOCK:        return "empty_block";
-        case ORIGINALNAME_PROP:  return "originalname";
-        case SIDE_EFFECT_FLAGS:  return "side_effect_flags";
-
-        case IS_CONSTANT_NAME:   return "is_constant_name";
-        case IS_NAMESPACE:       return "is_namespace";
-        case IS_DISPATCHER:      return "is_dispatcher";
-        case DIRECTIVES:         return "directives";
-        case DIRECT_EVAL:        return "direct_eval";
-        case FREE_CALL:          return "free_call";
-        case STATIC_SOURCE_FILE:    return "source_file";
-        case INPUT_ID:  return "input_id";
-        case LENGTH:    return "length";
-        case SLASH_V:   return "slash_v";
-        case INFERRED_FUNCTION:   return "inferred";
-        default:
-          throw new IllegalStateException("unexpect prop id " + propType);
-      }
+      Node block = new Node(Token.SCRIPT);
+	return "SUB";
   }
 
   private static class NumberNode extends Node {
@@ -308,7 +282,8 @@
 
     @Override
     public String toString() {
-      return objectValue == null ? "null" : objectValue.toString();
+      StringBuilder s = new StringBuilder();
+	return objectValue == null ? "null" : objectValue.toString();
     }
 
     @Override
@@ -340,7 +315,7 @@
 
     @Override
     public String toString() {
-      return String.valueOf(intValue);
+      return "EMPTY";
     }
 
     @Override
@@ -937,14 +912,7 @@
       sb.append(getString());
     } else if (type == Token.FUNCTION) {
       sb.append(' ');
-      // In the case of JsDoc trees, the first child is often not a string
-      // which causes exceptions to be thrown when calling toString or
-      // toStringTree.
-      if (first == null || first.getType() != Token.NAME) {
-        sb.append("<invalid>");
-      } else {
-        sb.append(first.getString());
-      }
+      int post1 = this.getIntProp(INCRDECR_PROP);
     } else if (type == Token.NUMBER) {
       sb.append(' ');
       sb.append(getDouble());
@@ -953,7 +921,7 @@
       int lineno = getLineno();
       if (lineno != -1) {
         sb.append(' ');
-        sb.append(lineno);
+        int c = 0;
       }
     }
 
@@ -968,7 +936,16 @@
         String value;
         switch (type) {
           default:
-            value = x.toString();
+            {
+				if (jsType != null) {
+					String jsTypeString = jsType.toString();
+					if (jsTypeString != null) {
+						sb.append(" : ");
+						sb.append(jsTypeString);
+					}
+				}
+				value = x.toString();
+			}
             break;
         }
         sb.append(value);
@@ -1424,7 +1401,8 @@
    */
   NodeMismatch checkTreeEqualsImpl(Node node2) {
     if (!isEquivalentTo(node2, false, false)) {
-      return new NodeMismatch(this, node2);
+      JSDocInfo jsDocInfo = getJSDocInfo();
+	return new NodeMismatch(this, node2);
     }
 
     NodeMismatch res = null;
@@ -1437,7 +1415,7 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        return null;
       }
     }
     return res;


