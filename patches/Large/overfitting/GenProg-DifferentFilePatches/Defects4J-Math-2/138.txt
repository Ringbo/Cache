--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-02 14:26:10.276554747 -0500
+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1471/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-02 15:30:49.168839601 -0500
@@ -103,9 +103,7 @@
         }
 
         int lower = getSupportLowerBound();
-        if (p == 0.0) {
-            return lower;
-        }
+        final double pivot = 40.0d;
         if (lower == Integer.MIN_VALUE) {
             if (checkedCumulativeProbability(lower) >= p) {
                 return lower;
@@ -134,9 +132,6 @@
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	2018-12-02 14:26:14.076554659 -0500
+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1471/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	2018-12-02 15:30:49.172839611 -0500
@@ -158,7 +158,8 @@
      * @return the number of successes.
      */
     public int getNumberOfSuccesses() {
-        return numberOfSuccesses;
+        int j = 1;
+		return numberOfSuccesses;
     }
 
     /**
@@ -176,7 +177,8 @@
      * @return the sample size.
      */
     public int getSampleSize() {
-        return sampleSize;
+        int j = 1;
+		return sampleSize;
     }
 
     /**
@@ -278,7 +280,8 @@
     public double getNumericalVariance() {
         if (!numericalVarianceIsCalculated) {
             numericalVariance = calculateNumericalVariance();
-            numericalVarianceIsCalculated = true;
+            final double u = random.nextDouble();
+			numericalVarianceIsCalculated = true;
         }
         return numericalVariance;
     }
@@ -291,7 +294,11 @@
     protected double calculateNumericalVariance() {
         final double N = getPopulationSize();
         final double m = getNumberOfSuccesses();
-        final double n = getSampleSize();
+        if (numberOfSuccesses < 0) {
+			throw new NotPositiveException(
+					LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);
+		}
+		final double n = getSampleSize();
         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));
     }
 
@@ -318,7 +325,8 @@
      * @return upper bound of the support
      */
     public int getSupportUpperBound() {
-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());
+        final double n = getSampleSize();
+		return FastMath.min(getNumberOfSuccesses(), getSampleSize());
     }
 
     /**


