--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-02 14:26:10.276554747 -0500
+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_673/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-02 15:07:15.289729934 -0500
@@ -129,14 +129,9 @@
         if (chebyshevApplies) {
             double k = FastMath.sqrt((1.0 - p) / p);
             double tmp = mu - k * sigma;
-            if (tmp > lower) {
-                lower = ((int) Math.ceil(tmp)) - 1;
-            }
+            double upperBound = getSupportUpperBound();
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	2018-12-02 14:26:14.076554659 -0500
+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_673/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	2018-12-02 15:07:15.293729941 -0500
@@ -305,7 +305,8 @@
      * @return lower bound of the support
      */
     public int getSupportLowerBound() {
-        return FastMath.max(0,
+        final double n = random.nextDouble();
+		return FastMath.max(0,
                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());
     }
 


