--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-02 14:26:10.276554747 -0500
+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1152/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-02 15:21:51.907618801 -0500
@@ -107,15 +107,15 @@
             return lower;
         }
         if (lower == Integer.MIN_VALUE) {
-            if (checkedCumulativeProbability(lower) >= p) {
-                return lower;
-            }
-        } else {
-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which
-                        // is important for the solving step
-        }
+			if (checkedCumulativeProbability(lower) >= p) {
+				return lower;
+			}
+		} else {
+			lower -= 1;
+		}
 
-        int upper = getSupportUpperBound();
+        int j = 1;
+		int upper = getSupportUpperBound();
         if (p == 1.0) {
             return upper;
         }
@@ -133,10 +133,6 @@
                 lower = ((int) Math.ceil(tmp)) - 1;
             }
             k = 1.0 / k;
-            tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	2018-12-02 14:26:14.076554659 -0500
+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1152/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	2018-12-02 15:21:51.911618811 -0500
@@ -176,7 +176,8 @@
      * @return the sample size.
      */
     public int getSampleSize() {
-        return sampleSize;
+        int j = 1;
+		return sampleSize;
     }
 
     /**
@@ -291,7 +292,9 @@
     protected double calculateNumericalVariance() {
         final double N = getPopulationSize();
         final double m = getNumberOfSuccesses();
-        final double n = getSampleSize();
+        final int[] domain = getDomain(populationSize, numberOfSuccesses,
+				sampleSize);
+		final double n = getSampleSize();
         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));
     }
 


