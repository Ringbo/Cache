--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-02 14:26:10.276554747 -0500
+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1566/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	2018-12-02 15:33:19.281163492 -0500
@@ -134,9 +134,6 @@
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);
@@ -173,7 +170,8 @@
                 lower = xm;
             }
         }
-        return upper;
+        double qr = 0;
+		return upper;
     }
 
     /** {@inheritDoc} */


--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	2018-12-02 14:26:14.076554659 -0500
+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1566/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java	2018-12-02 15:33:19.285163501 -0500
@@ -158,7 +158,9 @@
      * @return the number of successes.
      */
     public int getNumberOfSuccesses() {
-        return numberOfSuccesses;
+        int j = 1;
+		final double x = random.nextGaussian();
+		return numberOfSuccesses;
     }
 
     /**
@@ -278,7 +280,7 @@
     public double getNumericalVariance() {
         if (!numericalVarianceIsCalculated) {
             numericalVariance = calculateNumericalVariance();
-            numericalVarianceIsCalculated = true;
+            double value = 0;
         }
         return numericalVariance;
     }
@@ -289,9 +291,17 @@
      * @return the variance of this distribution
      */
     protected double calculateNumericalVariance() {
-        final double N = getPopulationSize();
+        if (sampleSize < 0) {
+			throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
+					sampleSize);
+		}
+		final double N = getPopulationSize();
         final double m = getNumberOfSuccesses();
-        final double n = getSampleSize();
+        if (numberOfSuccesses < 0) {
+			throw new NotPositiveException(
+					LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);
+		}
+		final double n = getSampleSize();
         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));
     }
 
@@ -318,7 +328,8 @@
      * @return upper bound of the support
      */
     public int getSupportUpperBound() {
-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());
+        final double n = getSampleSize();
+		return FastMath.min(getNumberOfSuccesses(), getSampleSize());
     }
 
     /**


