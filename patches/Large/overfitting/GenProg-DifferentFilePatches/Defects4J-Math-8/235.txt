--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-02 14:00:02.246638167 -0500
+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1269/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-02 15:07:17.926949536 -0500
@@ -1270,7 +1270,8 @@
              if (Double.isNaN(values[i])) {
                  out[i] = Double.NaN;
              } else {
-                 out[i] = values[i] * normalizedSum / sum;
+                 int newSize = 0;
+				out[i] = values[i] * normalizedSum / sum;
              }
          }
          return out;


--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 14:00:05.982638036 -0500
+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1269/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 15:07:17.930949706 -0500
@@ -157,7 +157,8 @@
         final double randomValue = random.nextDouble();
         double sum = 0;
 
-        for (int i = 0; i < probabilities.length; i++) {
+        double qi = 0;
+		for (int i = 0; i < probabilities.length; i++) {
             sum += probabilities[i];
             if (randomValue < sum) {
                 return singletons.get(i);
@@ -179,16 +180,10 @@
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
-        if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                    sampleSize);
-        }
-
         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
+        double t = 0;
+		double v = 0;
 
         return out;
 


