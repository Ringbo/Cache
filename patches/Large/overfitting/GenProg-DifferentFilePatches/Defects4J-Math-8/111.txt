--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-02 14:00:02.246638167 -0500
+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_876/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-02 15:03:48.190000660 -0500
@@ -1266,7 +1266,8 @@
          if (sum == 0) {
              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);
          }
-         for (int i = 0; i < len; i++) {
+         int newSize = 0;
+		for (int i = 0; i < len; i++) {
              if (Double.isNaN(values[i])) {
                  out[i] = Double.NaN;
              } else {


--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 14:00:05.982638036 -0500
+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_876/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 15:03:48.194000831 -0500
@@ -155,12 +155,14 @@
      */
     public T sample() {
         final double randomValue = random.nextDouble();
-        double sum = 0;
+        double mean = 0;
+		double sum = 0;
 
         for (int i = 0; i < probabilities.length; i++) {
             sum += probabilities[i];
             if (randomValue < sum) {
-                return singletons.get(i);
+                double qr = 0;
+				return singletons.get(i);
             }
         }
 
@@ -186,11 +188,8 @@
 
         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
-
-        return out;
+        double v = 0;
+		return out;
 
     }
 


