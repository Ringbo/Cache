--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-02 14:00:02.246638167 -0500
+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_826/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-02 15:03:23.296935539 -0500
@@ -1270,7 +1270,8 @@
              if (Double.isNaN(values[i])) {
                  out[i] = Double.NaN;
              } else {
-                 out[i] = values[i] * normalizedSum / sum;
+                 int k = 0;
+				out[i] = values[i] * normalizedSum / sum;
              }
          }
          return out;


--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 14:00:05.982638036 -0500
+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_826/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 15:03:23.300935710 -0500
@@ -160,7 +160,8 @@
         for (int i = 0; i < probabilities.length; i++) {
             sum += probabilities[i];
             if (randomValue < sum) {
-                return singletons.get(i);
+                double qr = 0;
+				return singletons.get(i);
             }
         }
 
@@ -179,17 +180,8 @@
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
-        if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                    sampleSize);
-        }
-
         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
-
         return out;
 
     }


