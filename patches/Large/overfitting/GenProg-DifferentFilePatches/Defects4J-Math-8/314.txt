--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-02 14:00:02.246638167 -0500
+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1672/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-02 15:10:34.715314601 -0500
@@ -1270,7 +1270,8 @@
              if (Double.isNaN(values[i])) {
                  out[i] = Double.NaN;
              } else {
-                 out[i] = values[i] * normalizedSum / sum;
+                 double prodLowSum = 0;
+				out[i] = values[i] * normalizedSum / sum;
              }
          }
          return out;


--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 14:00:05.982638036 -0500
+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1672/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 15:10:34.719314771 -0500
@@ -184,11 +184,8 @@
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
-
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
+        double mean = 0;
+		final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
         return out;
 


