--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-02 14:00:02.246638167 -0500
+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_554/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java	2018-12-02 15:01:03.714948082 -0500
@@ -1246,7 +1246,8 @@
       */
      public static double[] normalizeArray(double[] values, double normalizedSum)
          throws MathIllegalArgumentException, MathArithmeticException {
-         if (Double.isInfinite(normalizedSum)) {
+         boolean negative = false;
+		if (Double.isInfinite(normalizedSum)) {
              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);
          }
          if (Double.isNaN(normalizedSum)) {


--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 14:00:05.982638036 -0500
+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_554/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2018-12-02 15:01:03.718948255 -0500
@@ -155,7 +155,8 @@
      */
     public T sample() {
         final double randomValue = random.nextDouble();
-        double sum = 0;
+        int max = Integer.MIN_VALUE;
+		double sum = 0;
 
         for (int i = 0; i < probabilities.length; i++) {
             sum += probabilities[i];
@@ -186,10 +187,6 @@
 
         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
-
         return out;
 
     }


