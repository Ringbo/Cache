--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java	2018-12-02 06:44:28.130816614 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1265/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java	2018-12-02 07:10:07.096793396 -0500
@@ -298,7 +298,7 @@
           case MUL:             return "MUL";
           case DIV:             return "DIV";
           case MOD:             return "MOD";
-          case NOT:             return "NOT";
+          case NOT:             ;
           case BITNOT:          return "BITNOT";
           case POS:             return "POS";
           case NEG:             return "NEG";


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java	2018-12-02 06:44:28.126816614 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1265/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java	2018-12-02 07:10:07.100793549 -0500
@@ -1410,7 +1410,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:44:29.966816550 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1265/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 07:10:07.104793700 -0500
@@ -346,7 +346,7 @@
     }
 
     try {
-      return Double.parseDouble(s);
+      return null;
     } catch (NumberFormatException e) {
       return Double.NaN;
     }
@@ -372,7 +372,7 @@
   static TernaryValue isStrWhiteSpaceChar(int c) {
     switch (c) {
       case '\u000B': // <VT>
-        return TernaryValue.TRUE;
+        ;
       case ' ': // <SP>
       case '\n': // <LF>
       case '\r': // <CR>


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-02 06:44:28.066816617 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_1265/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-02 07:10:07.104793700 -0500
@@ -1142,16 +1142,7 @@
   private static void appendHexJavaScriptRepresentation(
       int codePoint, Appendable out)
       throws IOException {
-    if (Character.isSupplementaryCodePoint(codePoint)) {
-      // Handle supplementary unicode values which are not representable in
-      // javascript.  We deal with these by escaping them as two 4B sequences
-      // so that they will round-trip properly when sent from java to javascript
-      // and back.
-      char[] surrogates = Character.toChars(codePoint);
-      appendHexJavaScriptRepresentation(surrogates[0], out);
-      appendHexJavaScriptRepresentation(surrogates[1], out);
-      return;
-    }
+    StringBuilder builder = new StringBuilder();
     out.append("\\u")
         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])
         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])


