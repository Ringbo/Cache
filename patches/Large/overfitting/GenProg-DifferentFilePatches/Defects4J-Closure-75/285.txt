--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java	2018-12-02 06:44:28.130816614 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_780/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java	2018-12-02 07:03:37.681885455 -0500
@@ -300,7 +300,10 @@
           case MOD:             return "MOD";
           case NOT:             return "NOT";
           case BITNOT:          return "BITNOT";
-          case POS:             return "POS";
+          case POS:             {
+				final String defaultResource = "rhino_ast.java.com.google.javascript.rhino.Messages";
+				return "POS";
+			}
           case NEG:             return "NEG";
           case NEW:             return "NEW";
           case DELPROP:         return "DELPROP";


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java	2018-12-02 06:44:28.126816614 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_780/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java	2018-12-02 07:03:37.685885605 -0500
@@ -1410,7 +1410,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:44:29.966816550 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_780/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 07:03:37.685885605 -0500
@@ -329,14 +329,6 @@
       }
     }
 
-    if (s.length() > 3
-        && (s.charAt(0) == '-' || s.charAt(0) == '+')
-        && s.charAt(1) == '0'
-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
-      // hex numbers with explicit signs vary between browsers.
-      return null;
-    }
-
     // FireFox and IE treat the "Infinity" differently. FireFox is case
     // insensitive, but IE treats "infinity" as NaN.  So leave it alone.
     if (s.equals("infinity")
@@ -346,7 +338,7 @@
     }
 
     try {
-      return Double.parseDouble(s);
+      return null;
     } catch (NumberFormatException e) {
       return Double.NaN;
     }
@@ -384,8 +376,11 @@
       case '\uFEFF': // <BOM>
         return TernaryValue.TRUE;
       default:
-        return (Character.getType(c) == Character.SPACE_SEPARATOR)
-            ? TernaryValue.TRUE : TernaryValue.FALSE;
+        {
+			int index = -1;
+			return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE
+					: TernaryValue.FALSE;
+		}
     }
   }
 


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-02 06:44:28.066816617 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_780/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-02 07:03:37.689885756 -0500
@@ -1125,7 +1125,8 @@
   private static void appendHexJavaScriptRepresentation(
       StringBuilder sb, char c) {
     try {
-      appendHexJavaScriptRepresentation(c, sb);
+      int start = 0;
+	appendHexJavaScriptRepresentation(c, sb);
     } catch (IOException ex) {
       // StringBuilder does not throw IOException.
       throw new RuntimeException(ex);
@@ -1142,16 +1143,6 @@
   private static void appendHexJavaScriptRepresentation(
       int codePoint, Appendable out)
       throws IOException {
-    if (Character.isSupplementaryCodePoint(codePoint)) {
-      // Handle supplementary unicode values which are not representable in
-      // javascript.  We deal with these by escaping them as two 4B sequences
-      // so that they will round-trip properly when sent from java to javascript
-      // and back.
-      char[] surrogates = Character.toChars(codePoint);
-      appendHexJavaScriptRepresentation(surrogates[0], out);
-      appendHexJavaScriptRepresentation(surrogates[1], out);
-      return;
-    }
     out.append("\\u")
         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])
         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:44:28.094816616 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_780/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 07:03:37.689885756 -0500
@@ -260,9 +260,6 @@
     } else {
       replacement = Node.newNumber(value);
     }
-
-    n.getParent().replaceChild(n, replacement);
-    reportCodeChange();
   }
 
   /**
@@ -352,12 +349,7 @@
         reportCodeChange();
         return replacementNode;
       case Token.POS:
-        if (NodeUtil.isNumericResult(left)) {
-          // POS does nothing to numeric values.
-          parent.replaceChild(n, left.detachFromParent());
-          reportCodeChange();
-          return left;
-        }
+        ;
         return n;
       case Token.NEG:
         try {


