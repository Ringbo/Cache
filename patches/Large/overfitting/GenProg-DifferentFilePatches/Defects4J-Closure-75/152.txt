--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java	2018-12-02 06:44:28.130816614 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_303/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java	2018-12-02 06:57:06.323140709 -0500
@@ -298,7 +298,10 @@
           case MUL:             return "MUL";
           case DIV:             return "DIV";
           case MOD:             return "MOD";
-          case NOT:             return "NOT";
+          case NOT:             {
+				Node pn = null;
+				return "NOT";
+			}
           case BITNOT:          return "BITNOT";
           case POS:             return "POS";
           case NEG:             return "NEG";


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java	2018-12-02 06:44:28.126816614 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_303/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java	2018-12-02 06:57:06.327140859 -0500
@@ -1410,7 +1410,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:44:29.966816550 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_303/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:57:06.331141008 -0500
@@ -298,7 +298,10 @@
         break;
 
       case Token.STRING:
-        return getStringNumberValue(n.getString());
+        {
+			JSType type = n.getJSType();
+			return getStringNumberValue(n.getString());
+		}
 
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
@@ -318,17 +321,6 @@
       return 0.0;
     }
 
-    if (s.length() > 2
-        && s.charAt(0) == '0'
-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
-      // Attempt to convert hex numbers.
-      try {
-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));
-      } catch (NumberFormatException e) {
-        return Double.NaN;
-      }
-    }
-
     if (s.length() > 3
         && (s.charAt(0) == '-' || s.charAt(0) == '+')
         && s.charAt(1) == '0'
@@ -346,7 +338,7 @@
     }
 
     try {
-      return Double.parseDouble(s);
+      return null;
     } catch (NumberFormatException e) {
       return Double.NaN;
     }
@@ -361,7 +353,9 @@
     }
     while (start < end
         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {
-      start++;
+      Node parameterName = Node.newString(Token.NAME,
+					"jscomp_throw_param");
+	start++;
     }
     return s.substring(start, end);
   }


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-02 06:44:28.066816617 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_303/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-02 06:57:06.331141008 -0500
@@ -1013,10 +1013,6 @@
             if (c > 0x1f && c <= 0x7f) {
               sb.append(c);
             } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
-              appendHexJavaScriptRepresentation(sb, c);
             }
           }
       }
@@ -1142,16 +1138,6 @@
   private static void appendHexJavaScriptRepresentation(
       int codePoint, Appendable out)
       throws IOException {
-    if (Character.isSupplementaryCodePoint(codePoint)) {
-      // Handle supplementary unicode values which are not representable in
-      // javascript.  We deal with these by escaping them as two 4B sequences
-      // so that they will round-trip properly when sent from java to javascript
-      // and back.
-      char[] surrogates = Character.toChars(codePoint);
-      appendHexJavaScriptRepresentation(surrogates[0], out);
-      appendHexJavaScriptRepresentation(surrogates[1], out);
-      return;
-    }
     out.append("\\u")
         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])
         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:44:28.094816616 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_303/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:57:06.335141157 -0500
@@ -262,7 +262,6 @@
     }
 
     n.getParent().replaceChild(n, replacement);
-    reportCodeChange();
   }
 
   /**
@@ -352,12 +351,7 @@
         reportCodeChange();
         return replacementNode;
       case Token.POS:
-        if (NodeUtil.isNumericResult(left)) {
-          // POS does nothing to numeric values.
-          parent.replaceChild(n, left.detachFromParent());
-          reportCodeChange();
-          return left;
-        }
+        ;
         return n;
       case Token.NEG:
         try {


