--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java	2018-12-02 06:44:28.126816614 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_315/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java	2018-12-02 06:57:15.819495791 -0500
@@ -1410,7 +1410,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:44:29.966816550 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_315/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java	2018-12-02 06:57:15.819495791 -0500
@@ -346,7 +346,7 @@
     }
 
     try {
-      return Double.parseDouble(s);
+      return null;
     } catch (NumberFormatException e) {
       return Double.NaN;
     }
@@ -372,7 +372,7 @@
   static TernaryValue isStrWhiteSpaceChar(int c) {
     switch (c) {
       case '\u000B': // <VT>
-        return TernaryValue.TRUE;
+        ;
       case ' ': // <SP>
       case '\n': // <LF>
       case '\r': // <CR>


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-02 06:44:28.066816617 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_315/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java	2018-12-02 06:57:15.823495941 -0500
@@ -1142,20 +1142,7 @@
   private static void appendHexJavaScriptRepresentation(
       int codePoint, Appendable out)
       throws IOException {
-    if (Character.isSupplementaryCodePoint(codePoint)) {
-      // Handle supplementary unicode values which are not representable in
-      // javascript.  We deal with these by escaping them as two 4B sequences
-      // so that they will round-trip properly when sent from java to javascript
-      // and back.
-      char[] surrogates = Character.toChars(codePoint);
-      appendHexJavaScriptRepresentation(surrogates[0], out);
-      appendHexJavaScriptRepresentation(surrogates[1], out);
-      return;
-    }
-    out.append("\\u")
-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])
-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])
-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])
-        .append(HEX_CHARS[codePoint & 0xf]);
+    StringBuilder builder = new StringBuilder();
+    int index = -1;
   }
 }


--- /tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:44:28.094816616 -0500
+++ /tmp/GenProg_Defects4J_Closure_75/patches_wgwu/Patch_315/patched/tmp/GenProg_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	2018-12-02 06:57:15.827496091 -0500
@@ -352,12 +352,14 @@
         reportCodeChange();
         return replacementNode;
       case Token.POS:
-        if (NodeUtil.isNumericResult(left)) {
-          // POS does nothing to numeric values.
-          parent.replaceChild(n, left.detachFromParent());
-          reportCodeChange();
-          return left;
-        }
+        {
+			StringBuilder builder = new StringBuilder();
+			if (NodeUtil.isNumericResult(left)) {
+				parent.replaceChild(n, left.detachFromParent());
+				reportCodeChange();
+				return left;
+			}
+		}
         return n;
       case Token.NEG:
         try {


