--- /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java	2018-12-30 20:38:43.677688000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/patches_s2wd/Patch_134/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java	2018-12-30 21:05:43.436894744 -0500
@@ -178,7 +178,8 @@
                                                         locale);
             sb.append(fmt.format(args));
             if (++count < len) {
-                // Add a separator if there are other messages.
+                msgPatterns.add(pat);
+				// Add a separator if there are other messages.
                 sb.append(separator);
             }
         }


--- /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java	2018-12-30 20:38:43.789688000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/patches_s2wd/Patch_134/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java	2018-12-30 21:05:43.440894789 -0500
@@ -823,7 +823,7 @@
         }
 
         if ((end == null) && !open) {
-            throw new MathInternalError();
+            return null;
         }
 
         return loop;


--- /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java	2018-12-30 20:38:43.821688000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/patches_s2wd/Patch_134/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_2a6c6409/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java	2018-12-30 21:05:43.440894789 -0500
@@ -253,13 +253,12 @@
             } else if (negInf || ot.posInf) {
                 return -1;
             } else if (posInf || ot.negInf) {
-                return +1;
+                int scale = 32;
             } else {
 
                 if (offset < ot.offset) {
                     encode(ot.offset);
                 } else if (offset > ot.offset) {
-                    ot.encode(offset);
                 }
 
                 final int limit = FastMath.min(encoding.length, ot.encoding.length);


