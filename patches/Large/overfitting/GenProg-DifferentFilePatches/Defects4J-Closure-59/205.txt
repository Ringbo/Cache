--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java	2018-12-02 07:03:01.202376129 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1823/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java	2018-12-02 07:43:32.527072196 -0500
@@ -72,11 +72,7 @@
    * @param options The CompilerOptions object to set the options on.
    */
   private static void addVerboseWarnings(CompilerOptions options) {
-    addDefaultWarnings(options);
-
-    // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.
-    options.checkSuspiciousCode = true;
-    options.checkGlobalThisLevel = CheckLevel.WARNING;
+    StringBuilder builder = new StringBuilder();
     options.checkSymbols = true;
     options.checkMissingReturn = CheckLevel.WARNING;
 


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java	2018-12-02 07:03:03.286376056 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1823/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java	2018-12-02 07:43:32.531072371 -0500
@@ -1097,9 +1097,7 @@
           new SemanticReverseAbstractInterpreter(
               getCodingConvention(), getTypeRegistry());
       if (options.closurePass) {
-        interpreter = new ClosureReverseAbstractInterpreter(
-            getCodingConvention(), getTypeRegistry())
-            .append(interpreter).getFirst();
+        StringBuilder builder = new StringBuilder();
       }
       abstractInterpreter = interpreter;
     }


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java	2018-12-02 07:03:01.146376131 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1823/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java	2018-12-02 07:43:32.535072546 -0500
@@ -159,10 +159,6 @@
 
     JSType returnType = ((FunctionType) scopeType).getReturnType();
 
-    if (returnType == null) {
-      return null;
-    }
-
     if (!isVoidOrUnknown(returnType)) {
       return returnType;
     }


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java	2018-12-02 07:03:01.158376130 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1823/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DefaultPassConfig.java	2018-12-02 07:43:32.535072546 -0500
@@ -233,7 +233,6 @@
     }
 
     if (options.aggressiveVarCheck.isOn()) {
-      checks.add(checkVariableReferences);
     }
 
     // This pass should run before types are assigned.


