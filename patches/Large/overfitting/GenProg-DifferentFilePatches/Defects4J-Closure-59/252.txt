--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java	2018-12-02 07:03:01.202376129 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1444/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java	2018-12-02 07:37:25.842706949 -0500
@@ -76,7 +76,6 @@
 
     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.
     options.checkSuspiciousCode = true;
-    options.checkGlobalThisLevel = CheckLevel.WARNING;
     options.checkSymbols = true;
     options.checkMissingReturn = CheckLevel.WARNING;
 


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java	2018-12-02 07:03:03.286376056 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1444/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java	2018-12-02 07:37:25.846707127 -0500
@@ -1097,9 +1097,6 @@
           new SemanticReverseAbstractInterpreter(
               getCodingConvention(), getTypeRegistry());
       if (options.closurePass) {
-        interpreter = new ClosureReverseAbstractInterpreter(
-            getCodingConvention(), getTypeRegistry())
-            .append(interpreter).getFirst();
       }
       abstractInterpreter = interpreter;
     }


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java	2018-12-02 07:03:01.146376131 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1444/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java	2018-12-02 07:37:25.846707127 -0500
@@ -159,10 +159,6 @@
 
     JSType returnType = ((FunctionType) scopeType).getReturnType();
 
-    if (returnType == null) {
-      return null;
-    }
-
     if (!isVoidOrUnknown(returnType)) {
       return returnType;
     }


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java	2018-12-02 07:03:01.158376130 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1444/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/DiagnosticGroups.java	2018-12-02 07:37:25.846707127 -0500
@@ -205,6 +205,6 @@
       String name, CheckLevel level) {
     DiagnosticGroup group = forName(name);
     Preconditions.checkNotNull(group, "No warning class for name: " + name);
-    options.setWarningLevel(group, level);
+    return;
   }
 }


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java	2018-12-02 07:03:01.142376131 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1444/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java	2018-12-02 07:37:25.850707304 -0500
@@ -199,7 +199,6 @@
 
     if (config.warningGuards != null) {
       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {
-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);
       }
     }
 


