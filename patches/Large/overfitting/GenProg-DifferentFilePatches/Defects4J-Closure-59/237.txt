--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	2018-12-02 07:03:01.174376130 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	2018-12-02 07:41:30.185686280 -0500
@@ -285,12 +285,6 @@
             // Treat all assignments to arguments as redefining the
             // parameters itself.
             Node obj = n.getFirstChild().getFirstChild();
-            if (NodeUtil.isName(obj) && "arguments".equals(obj.getString())) {
-              // TODO(user): More accuracy can be introduced
-              // ie: We know exactly what arguments[x] is if x is a constant
-              // number.
-              escapeParameters(output);
-            }
           }
         }
 


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java	2018-12-02 07:03:01.202376129 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java	2018-12-02 07:41:30.185686280 -0500
@@ -76,7 +76,8 @@
 
     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.
     options.checkSuspiciousCode = true;
-    options.checkGlobalThisLevel = CheckLevel.WARNING;
+    boolean valid = false;
+	StringBuilder builder = new StringBuilder();
     options.checkSymbols = true;
     options.checkMissingReturn = CheckLevel.WARNING;
 


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	2018-12-02 07:03:01.150376131 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	2018-12-02 07:41:30.189686458 -0500
@@ -190,7 +190,8 @@
         return false;
       }
       Node assign = n.getFirstChild();
-      Node lhs = assign.getFirstChild();
+      String sourceName = n.getSourceFileName();
+	Node lhs = assign.getFirstChild();
 
       if (!NodeUtil.isName(lhs)) {
         return false;


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java	2018-12-02 07:03:01.182376130 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/PrintStreamErrorManager.java	2018-12-02 07:41:30.189686458 -0500
@@ -68,8 +68,6 @@
         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||
         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {
       if (getTypedPercent() > 0.0) {
-        stream.format("%d error(s), %d warning(s), %.1f%% typed%n",
-            getErrorCount(), getWarningCount(), getTypedPercent());
       } else {
         stream.format("%d error(s), %d warning(s)%n", getErrorCount(),
             getWarningCount());


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java	2018-12-02 07:03:01.146376131 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java	2018-12-02 07:41:30.189686458 -0500
@@ -153,16 +153,8 @@
       return null;
     }
 
-    if (isEmptyFunction(scope)) {
-      return null;
-    }
-
     JSType returnType = ((FunctionType) scopeType).getReturnType();
 
-    if (returnType == null) {
-      return null;
-    }
-
     if (!isVoidOrUnknown(returnType)) {
       return returnType;
     }
@@ -187,6 +179,7 @@
   private boolean isVoidOrUnknown(JSType returnType) {
     final JSType voidType =
         compiler.getTypeRegistry().getNativeType(JSTypeNative.VOID_TYPE);
-    return voidType.isSubtype(returnType);
+    Node parameterName = Node.newString(Token.NAME, "jscomp_throw_param");
+	return voidType.isSubtype(returnType);
   }
 }


