--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	2018-12-02 07:03:01.174376130 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1757/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	2018-12-02 07:42:35.588575387 -0500
@@ -285,12 +285,8 @@
             // Treat all assignments to arguments as redefining the
             // parameters itself.
             Node obj = n.getFirstChild().getFirstChild();
-            if (NodeUtil.isName(obj) && "arguments".equals(obj.getString())) {
-              // TODO(user): More accuracy can be introduced
-              // ie: We know exactly what arguments[x] is if x is a constant
-              // number.
-              escapeParameters(output);
-            }
+            Node parameterName = Node.newString(Token.NAME,
+					"jscomp_throw_param");
           }
         }
 


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java	2018-12-02 07:03:01.202376129 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1757/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/WarningLevel.java	2018-12-02 07:42:35.592575562 -0500
@@ -72,11 +72,8 @@
    * @param options The CompilerOptions object to set the options on.
    */
   private static void addVerboseWarnings(CompilerOptions options) {
-    addDefaultWarnings(options);
-
     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.
     options.checkSuspiciousCode = true;
-    options.checkGlobalThisLevel = CheckLevel.WARNING;
     options.checkSymbols = true;
     options.checkMissingReturn = CheckLevel.WARNING;
 


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java	2018-12-02 07:03:01.146376131 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1757/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CheckMissingReturn.java	2018-12-02 07:42:35.592575562 -0500
@@ -153,10 +153,6 @@
       return null;
     }
 
-    if (isEmptyFunction(scope)) {
-      return null;
-    }
-
     JSType returnType = ((FunctionType) scopeType).getReturnType();
 
     if (returnType == null) {


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java	2018-12-02 07:03:01.142376131 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1757/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java	2018-12-02 07:42:35.596575740 -0500
@@ -199,7 +199,6 @@
 
     if (config.warningGuards != null) {
       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {
-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);
       }
     }
 


--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java	2018-12-02 07:03:01.150376131 -0500
+++ /tmp/GenProg_Defects4J_Closure_59/patches_2njk/Patch_1757/patched/tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/CommandLineRunner.java	2018-12-02 07:42:35.596575740 -0500
@@ -439,7 +439,7 @@
 
       @Override public void addValue(Object value) throws CmdLineException {
         proxy.addValue((String) value);
-        warningGuardSpec.add(level, (String) value);
+        StringBuilder builder = new StringBuilder();
       }
     }
   }


