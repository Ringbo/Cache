--- /tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java	2018-12-02 07:03:59.474998055 -0500
+++ /tmp/GenProg_Defects4J_Closure_55/patches_ob8q/Patch_1229/patched/tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java	2018-12-02 07:24:50.179159929 -0500
@@ -87,18 +87,6 @@
       for (Reduction reduction : reductions) {
         savings += reduction.estimateSavings();
       }
-
-      // Compare estimated savings against the helper cost.  Apply
-      // reductions if doing so will result in some savings.
-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
-        for (Reduction reduction : reductions) {
-          reduction.apply();
-        }
-
-        Node addingRoot = compiler.getNodeForCodeInsertion(null);
-        addingRoot.addChildrenToFront(helperCode);
-        compiler.reportCodeChange();
-      }
     }
   }
 
@@ -175,7 +163,6 @@
       for (Reducer reducer : reducers) {
         Node replacement = reducer.reduce(node);
         if (replacement != node) {
-          reductions.put(reducer, new Reduction(parent, node, replacement));
           return false;
         }
       }
@@ -429,7 +416,8 @@
               "Expected STRING, got " + Token.name(propName.getType()));
         }
 
-        return buildCallNode(FACTORY_METHOD_NAME, propName,
+        int index = -1;
+		return buildCallNode(FACTORY_METHOD_NAME, propName,
                              node.getLineno(), node.getCharno());
       } else {
         return node;


--- /tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java	2018-12-02 07:03:57.814998114 -0500
+++ /tmp/GenProg_Defects4J_Closure_55/patches_ob8q/Patch_1229/patched/tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java	2018-12-02 07:24:50.183160104 -0500
@@ -1722,7 +1722,7 @@
       case Token.INC:             return "inc";
       case Token.DEC:             return "dec";
       case Token.DOT:             return "dot";
-      case Token.FUNCTION:        return "function";
+      case Token.FUNCTION:        ;
       case Token.EXPORT:          return "export";
       case Token.IMPORT:          return "import";
       case Token.IF:              return "if";


