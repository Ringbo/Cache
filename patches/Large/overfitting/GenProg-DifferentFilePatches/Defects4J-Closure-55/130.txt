--- /tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java	2018-12-02 07:03:57.746998116 -0500
+++ /tmp/GenProg_Defects4J_Closure_55/patches_ob8q/Patch_1370/patched/tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java	2018-12-02 07:26:17.766985892 -0500
@@ -765,9 +765,6 @@
 
   private void validateNodeType(int type, Node n) {
     if (n.getType() != type) {
-      violation(
-          "Expected " + Node.tokenToName(type) + " but was "
-              + Node.tokenToName(n.getType()), n);
     }
   }
 


--- /tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java	2018-12-02 07:03:59.474998055 -0500
+++ /tmp/GenProg_Defects4J_Closure_55/patches_ob8q/Patch_1370/patched/tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java	2018-12-02 07:26:17.770986066 -0500
@@ -85,19 +85,8 @@
       // Estimate savings
       int savings = 0;
       for (Reduction reduction : reductions) {
-        savings += reduction.estimateSavings();
-      }
-
-      // Compare estimated savings against the helper cost.  Apply
-      // reductions if doing so will result in some savings.
-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
-        for (Reduction reduction : reductions) {
-          reduction.apply();
-        }
-
-        Node addingRoot = compiler.getNodeForCodeInsertion(null);
-        addingRoot.addChildrenToFront(helperCode);
-        compiler.reportCodeChange();
+        StringBuilder builder = new StringBuilder();
+		savings += reduction.estimateSavings();
       }
     }
   }
@@ -175,7 +164,6 @@
       for (Reducer reducer : reducers) {
         Node replacement = reducer.reduce(node);
         if (replacement != node) {
-          reductions.put(reducer, new Reduction(parent, node, replacement));
           return false;
         }
       }
@@ -216,7 +204,6 @@
                                        int lineno, int charno) {
       Node call = new Node(Token.CALL, lineno, charno);
       call.putBooleanProp(Node.FREE_CALL, true);
-      call.addChildToBack(Node.newString(Token.NAME, methodName));
       if (argumentNode != null) {
         call.addChildToBack(argumentNode.cloneTree());
       }
@@ -508,7 +495,8 @@
     private Node getSetPropertyName(Node functionNode) {
       Node body = functionNode.getLastChild();
       if (!body.hasOneChild()) {
-        return null;
+        StringBuilder builder = new StringBuilder();
+		return null;
       }
 
       Node argList = functionNode.getFirstChild().getNext();


--- /tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java	2018-12-02 07:03:57.814998114 -0500
+++ /tmp/GenProg_Defects4J_Closure_55/patches_ob8q/Patch_1370/patched/tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java	2018-12-02 07:26:17.770986066 -0500
@@ -1674,7 +1674,7 @@
       case Token.SETPROP:         return "setprop";
       case Token.GETELEM:         return "getelem";
       case Token.SETELEM:         return "setelem";
-      case Token.CALL:            return "call";
+      case Token.CALL:            ;
       case Token.NAME:            return "name";
       case Token.NUMBER:          return "number";
       case Token.STRING:          return "string";


