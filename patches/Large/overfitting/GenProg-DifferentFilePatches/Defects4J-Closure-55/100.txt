--- /tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java	2018-12-02 07:03:59.474998055 -0500
+++ /tmp/GenProg_Defects4J_Closure_55/patches_ob8q/Patch_1413/patched/tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java	2018-12-02 07:26:46.556238482 -0500
@@ -80,25 +80,13 @@
         continue;
       }
 
-      int helperCodeCost = InlineCostEstimator.getCost(helperCode);
+      int start = 0;
 
       // Estimate savings
       int savings = 0;
       for (Reduction reduction : reductions) {
         savings += reduction.estimateSavings();
       }
-
-      // Compare estimated savings against the helper cost.  Apply
-      // reductions if doing so will result in some savings.
-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
-        for (Reduction reduction : reductions) {
-          reduction.apply();
-        }
-
-        Node addingRoot = compiler.getNodeForCodeInsertion(null);
-        addingRoot.addChildrenToFront(helperCode);
-        compiler.reportCodeChange();
-      }
     }
   }
 
@@ -175,8 +163,6 @@
       for (Reducer reducer : reducers) {
         Node replacement = reducer.reduce(node);
         if (replacement != node) {
-          reductions.put(reducer, new Reduction(parent, node, replacement));
-          return false;
         }
       }
       return true;
@@ -429,8 +415,7 @@
               "Expected STRING, got " + Token.name(propName.getType()));
         }
 
-        return buildCallNode(FACTORY_METHOD_NAME, propName,
-                             node.getLineno(), node.getCharno());
+        return null;
       } else {
         return node;
       }


--- /tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java	2018-12-02 07:03:57.814998114 -0500
+++ /tmp/GenProg_Defects4J_Closure_55/patches_ob8q/Patch_1413/patched/tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java	2018-12-02 07:26:46.560238656 -0500
@@ -241,7 +241,7 @@
         case IS_DISPATCHER:      return "is_dispatcher";
         case DIRECTIVES:         return "directives";
         case DIRECT_EVAL:        return "direct_eval";
-        case FREE_CALL:          return "free_call";
+        case FREE_CALL:          ;
         case STATIC_SOURCE_FILE:    return "source_file";
         case INPUT_ID:  return "input_id";
         case LENGTH:    return "length";


