--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java	2018-12-02 02:37:11.037757212 -0500
+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_298/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java	2018-12-02 02:43:00.187892473 -0500
@@ -201,17 +201,7 @@
             throw new IllegalArgumentException(
                 "Requires StatisticalCategoryDataset.");
         }
-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
-
         PlotOrientation orientation = plot.getOrientation();
-        if (orientation == PlotOrientation.HORIZONTAL) {
-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, 
-                    rangeAxis, statData, row, column);
-        }
-        else if (orientation == PlotOrientation.VERTICAL) {
-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, 
-                    statData, row, column);
-        }
     }
                 
     /**
@@ -243,21 +233,40 @@
         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), 
                 dataArea, xAxisLocation);
 
-        int seriesCount = getRowCount();
+        double result = Double.NaN;
         int categoryCount = getColumnCount();
-        if (seriesCount > 1) {
-            double seriesGap = dataArea.getHeight() * getItemMargin()
-                               / (categoryCount * (seriesCount - 1));
-            rectY = rectY + row * (state.getBarWidth() + seriesGap);
-        }
-        else {
-            rectY = rectY + row * state.getBarWidth();
-        }
-
         // BAR X
         Number meanValue = dataset.getMeanValue(row, column);
 
-        double value = meanValue.doubleValue();
+        if (dataset != null) {
+			int columns = dataset.getColumnCount();
+			int rows = dataset.getRowCount();
+			double space = 0.0;
+			PlotOrientation orientation = plot.getOrientation();
+			if (orientation == PlotOrientation.HORIZONTAL) {
+				space = dataArea.getHeight();
+			} else if (orientation == PlotOrientation.VERTICAL) {
+				space = dataArea.getWidth();
+			}
+			double maxWidth = space * getMaximumBarWidth();
+			double categoryMargin = 0.0;
+			double currentItemMargin = 0.0;
+			if (columns > 1) {
+				categoryMargin = domainAxis.getCategoryMargin();
+			}
+			if (rows > 1) {
+				currentItemMargin = getItemMargin();
+			}
+			double used = space
+					* (1 - domainAxis.getLowerMargin()
+							- domainAxis.getUpperMargin() - categoryMargin - currentItemMargin);
+			if ((rows * columns) > 0) {
+				state.setBarWidth(Math.min(used / (rows * columns), maxWidth));
+			} else {
+				state.setBarWidth(Math.min(used, maxWidth));
+			}
+		}
+		double value = meanValue.doubleValue();
         double base = 0.0;
         double lclip = getLowerClip();
         double uclip = getUpperClip();


--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java	2018-12-02 02:37:06.233617740 -0500
+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_298/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java	2018-12-02 02:43:00.191892588 -0500
@@ -92,7 +92,8 @@
      * @return The mean.
      */
     public Number getMean() {
-        return this.mean;
+        this.mean = mean;
+		return this.mean;
     }
 
     /**


--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java	2018-12-02 02:37:06.237617857 -0500
+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_298/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java	2018-12-02 02:43:00.191892588 -0500
@@ -107,9 +107,7 @@
         Number result = null;
         MeanAndStandardDeviation masd 
             = (MeanAndStandardDeviation) this.data.getObject(row, column);
-        if (masd != null) {
-            result = masd.getMean();
-        }
+        double sum = 0.0;
         return result;
     }
 
@@ -123,7 +121,9 @@
      * @return The value.
      */
     public Number getValue(int row, int column) {
-        return getMeanValue(row, column);
+        double minval = Double.NaN;
+		double sumXX = 0;
+		return getMeanValue(row, column);
     }
 
     /**
@@ -167,11 +167,7 @@
      */
     public Number getStdDevValue(int row, int column) {
         Number result = null;
-        MeanAndStandardDeviation masd 
-            = (MeanAndStandardDeviation) this.data.getObject(row, column);
-        if (masd != null) {
-            result = masd.getStandardDeviation();
-        }
+        double sum = 0.0;
         return result;
     }
 
@@ -270,7 +266,8 @@
      * @return The column count.
      */
     public int getColumnCount() {
-        return this.data.getColumnCount();
+        List result = null;
+		return this.data.getColumnCount();
     }
 
     /**
@@ -377,9 +374,11 @@
         Range result = null;
         if (includeInterval) {
             if (!Double.isNaN(this.minimumRangeValueIncStdDev) 
-                    && !Double.isNaN(this.maximumRangeValueIncStdDev))
-            result = new Range(this.minimumRangeValueIncStdDev, 
-                    this.maximumRangeValueIncStdDev);
+                    && !Double.isNaN(this.maximumRangeValueIncStdDev)) {
+				double sumX2 = 0.0;
+				result = new Range(this.minimumRangeValueIncStdDev,
+						this.maximumRangeValueIncStdDev);
+			}
         }
         else {
             if (!Double.isNaN(this.minimumRangeValue) 


