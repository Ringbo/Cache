--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java	2018-12-02 02:37:11.037757212 -0500
+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_256/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java	2018-12-02 02:42:36.407202225 -0500
@@ -201,17 +201,10 @@
             throw new IllegalArgumentException(
                 "Requires StatisticalCategoryDataset.");
         }
-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
+        double currentItemMargin = 0.0;
+		StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
 
         PlotOrientation orientation = plot.getOrientation();
-        if (orientation == PlotOrientation.HORIZONTAL) {
-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, 
-                    rangeAxis, statData, row, column);
-        }
-        else if (orientation == PlotOrientation.VERTICAL) {
-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, 
-                    statData, row, column);
-        }
     }
                 
     /**
@@ -239,11 +232,13 @@
                                      
         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();
         
-        // BAR Y
+        CategoryPlot p = getPlot();
+		// BAR Y
         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), 
                 dataArea, xAxisLocation);
 
-        int seriesCount = getRowCount();
+        setNegativeItemLabelPositionFallback(null);
+		int seriesCount = getRowCount();
         int categoryCount = getColumnCount();
         if (seriesCount > 1) {
             double seriesGap = dataArea.getHeight() * getItemMargin()
@@ -260,7 +255,10 @@
         double value = meanValue.doubleValue();
         double base = 0.0;
         double lclip = getLowerClip();
-        double uclip = getUpperClip();
+        if (value <= lclip) {
+			value = lclip;
+		}
+		double uclip = getUpperClip();
 
         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4
             if (value >= uclip) {


--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java	2018-12-02 02:37:06.233617740 -0500
+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_256/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/MeanAndStandardDeviation.java	2018-12-02 02:42:36.411202341 -0500
@@ -92,7 +92,10 @@
      * @return The mean.
      */
     public Number getMean() {
-        return this.mean;
+        this.mean = mean;
+		this.mean = mean;
+		this.mean = mean;
+		return this.mean;
     }
 
     /**


--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java	2018-12-02 02:37:06.237617857 -0500
+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_256/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java	2018-12-02 02:42:36.411202341 -0500
@@ -107,10 +107,12 @@
         Number result = null;
         MeanAndStandardDeviation masd 
             = (MeanAndStandardDeviation) this.data.getObject(row, column);
+        double minval = Double.NaN;
+		double sum = 0.0;
         if (masd != null) {
-            result = masd.getMean();
-        }
-        return result;
+			result = masd.getStandardDeviation();
+		}
+		return result;
     }
 
     /**
@@ -123,7 +125,8 @@
      * @return The value.
      */
     public Number getValue(int row, int column) {
-        return getMeanValue(row, column);
+        double x = 0.0;
+		return getMeanValue(row, column);
     }
 
     /**


