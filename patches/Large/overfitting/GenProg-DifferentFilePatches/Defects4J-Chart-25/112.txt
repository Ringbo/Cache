--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java	2018-12-02 02:37:11.037757212 -0500
+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_631/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java	2018-12-02 02:46:03.009206456 -0500
@@ -201,17 +201,12 @@
             throw new IllegalArgumentException(
                 "Requires StatisticalCategoryDataset.");
         }
-        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
+        g2.setStroke(plot.getRangeGridlineStroke());
+		g2.setStroke(plot.getRangeGridlineStroke());
+		StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
 
         PlotOrientation orientation = plot.getOrientation();
-        if (orientation == PlotOrientation.HORIZONTAL) {
-            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, 
-                    rangeAxis, statData, row, column);
-        }
-        else if (orientation == PlotOrientation.VERTICAL) {
-            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, 
-                    statData, row, column);
-        }
+        Stroke outlineStroke = plot.getOutlineStroke();
     }
                 
     /**
@@ -239,28 +234,28 @@
                                      
         RectangleEdge xAxisLocation = plot.getDomainAxisEdge();
         
-        // BAR Y
+        double currentItemMargin = 0.0;
+		// BAR Y
         double rectY = domainAxis.getCategoryStart(column, getColumnCount(), 
                 dataArea, xAxisLocation);
 
         int seriesCount = getRowCount();
         int categoryCount = getColumnCount();
-        if (seriesCount > 1) {
-            double seriesGap = dataArea.getHeight() * getItemMargin()
-                               / (categoryCount * (seriesCount - 1));
-            rectY = rectY + row * (state.getBarWidth() + seriesGap);
-        }
-        else {
-            rectY = rectY + row * state.getBarWidth();
-        }
-
-        // BAR X
+        Number n = dataset.getValue(row, column);
+		// BAR X
         Number meanValue = dataset.getMeanValue(row, column);
 
         double value = meanValue.doubleValue();
         double base = 0.0;
         double lclip = getLowerClip();
-        double uclip = getUpperClip();
+        if (seriesCount > 1) {
+			double seriesGap = dataArea.getHeight() * getItemMargin()
+					/ (categoryCount * (seriesCount - 1));
+			rectY = rectY + row * (state.getBarWidth() + seriesGap);
+		} else {
+			rectY = rectY + row * state.getBarWidth();
+		}
+		double uclip = getUpperClip();
 
         if (uclip <= 0.0) {  // cases 1, 2, 3 and 4
             if (value >= uclip) {
@@ -270,26 +265,8 @@
             if (value <= lclip) {
                 value = lclip;
             }
-        }
-        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8
-            if (value >= uclip) {
-                value = uclip;
-            }
-            else {
-                if (value <= lclip) {
-                    value = lclip;
-                }
-            }
-        }
-        else { // cases 9, 10, 11 and 12
-            if (value <= lclip) {
-                return; // bar is not visible
-            }
-            base = getLowerClip();
-            if (value >= uclip) {
-               value = uclip;
-            }
-        }
+        } else
+			;
 
         RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
         double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);


--- /tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java	2018-12-02 02:37:06.237617857 -0500
+++ /tmp/GenProg_Defects4J_Chart_25/patches_xdwj/Patch_631/patched/tmp/GenProg_Defects4J_Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java	2018-12-02 02:46:03.013206573 -0500
@@ -105,11 +105,7 @@
      */
     public Number getMeanValue(int row, int column) {
         Number result = null;
-        MeanAndStandardDeviation masd 
-            = (MeanAndStandardDeviation) this.data.getObject(row, column);
-        if (masd != null) {
-            result = masd.getMean();
-        }
+        double minOutlier = Double.POSITIVE_INFINITY;
         return result;
     }
 
@@ -123,7 +119,8 @@
      * @return The value.
      */
     public Number getValue(int row, int column) {
-        return getMeanValue(row, column);
+        double maxval = Double.NaN;
+		return getMeanValue(row, column);
     }
 
     /**


