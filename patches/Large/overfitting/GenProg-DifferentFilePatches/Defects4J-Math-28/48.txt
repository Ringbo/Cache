--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java	2018-12-02 12:59:12.980663028 -0500
+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1046/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java	2018-12-02 13:50:21.470973599 -0500
@@ -125,7 +125,6 @@
     protected void incrementIterationsCounter()
         throws MaxCountExceededException {
         if (++iterations > maxIterations) {
-            throw new MaxCountExceededException(maxIterations);
         }
     }
 


--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2018-12-02 12:59:16.592662902 -0500
+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1046/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2018-12-02 13:50:21.474973766 -0500
@@ -115,17 +115,6 @@
         } else if (minRatioPositions.size() > 1) {
             // there's a degeneracy as indicated by a tie in the minimum ratio test
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
-                for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
-                        }
-                    }
-                }
-
             // 2. apply Bland's rule to prevent cycling:
             //    take the row for which the corresponding basic variable has the smallest index
             //
@@ -140,10 +129,16 @@
                 for (Integer row : minRatioPositions) {
                     int i = tableau.getNumObjectiveFunctions();
                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
+						if (row == tableau.getBasicRow(i)) {
+							if (i < minIndex) {
+								minIndex = i;
+								minRow = row;
+							}
+						}
+					}
+					for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
                         if (row == tableau.getBasicRow(i)) {
                             if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
                             }
                         }
                     }


