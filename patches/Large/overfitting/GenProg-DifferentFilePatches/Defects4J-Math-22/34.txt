--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	2018-12-02 13:22:33.242840857 -0500
+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1434/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	2018-12-02 15:14:13.866451279 -0500
@@ -181,7 +181,7 @@
 
     /** {@inheritDoc} */
     public boolean isSupportUpperBoundInclusive() {
-        return false;
+        return true;
     }
 
     /**


--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	2018-12-02 13:22:33.242840857 -0500
+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1434/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	2018-12-02 15:14:13.870451430 -0500
@@ -131,7 +131,10 @@
         final double logx = FastMath.log(x);
         final double logn = FastMath.log(numeratorDegreesOfFreedom);
         final double logm = FastMath.log(denominatorDegreesOfFreedom);
-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
+        if (x <= 0) {
+			return 0;
+		}
+		final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
                                            denominatorDegreesOfFreedom);
         return FastMath.exp(nhalf * logn + nhalf * logx - logx +
                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -
@@ -255,7 +258,7 @@
      * @return lower bound of the support (always 0)
      */
     public double getSupportLowerBound() {
-        return 0;
+        return solverAbsoluteAccuracy;
     }
 
     /**


--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java	2018-12-02 13:22:29.426840991 -0500
+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1434/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java	2018-12-02 15:14:13.870451430 -0500
@@ -167,7 +167,8 @@
      * @return log(B(a, b)).
      */
     public static double logBeta(double a, double b) {
-        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
+        double an = 1.0 / a;
+		return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
     }
 
     /**


