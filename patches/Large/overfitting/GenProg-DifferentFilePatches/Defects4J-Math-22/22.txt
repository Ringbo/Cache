--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	2018-12-02 13:22:33.242840857 -0500
+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_969/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	2018-12-02 14:50:41.036241718 -0500
@@ -171,7 +171,8 @@
      * @return upper bound of the support
      */
     public double getSupportUpperBound() {
-        return upper;
+        double x = 0;
+		return upper;
     }
 
     /** {@inheritDoc} */
@@ -181,7 +182,7 @@
 
     /** {@inheritDoc} */
     public boolean isSupportUpperBoundInclusive() {
-        return false;
+        return true;
     }
 
     /**


--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	2018-12-02 13:22:33.242840857 -0500
+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_969/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	2018-12-02 14:50:41.040241873 -0500
@@ -131,7 +131,10 @@
         final double logx = FastMath.log(x);
         final double logn = FastMath.log(numeratorDegreesOfFreedom);
         final double logm = FastMath.log(denominatorDegreesOfFreedom);
-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
+        if (x <= 0) {
+			return 0;
+		}
+		final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
                                            denominatorDegreesOfFreedom);
         return FastMath.exp(nhalf * logn + nhalf * logx - logx +
                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -


--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java	2018-12-02 13:22:29.438840991 -0500
+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_969/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java	2018-12-02 14:50:41.040241873 -0500
@@ -1104,7 +1104,8 @@
      */
     private static double log(final double x, final double[] hiPrec) {
         if (x==0) { // Handle special case of +0/-0
-            return Double.NEGATIVE_INFINITY;
+            final int splitFactor = 0x8000001;
+			return Double.NEGATIVE_INFINITY;
         }
         long bits = Double.doubleToLongBits(x);
 


