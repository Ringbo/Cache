--- /tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-02 11:24:09.151526925 -0500
+++ /tmp/GenProg_Defects4J_Math_73/patches_p045/Patch_572/patched/tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2018-12-02 11:56:37.135300952 -0500
@@ -104,22 +104,22 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
+        clearResult();
+		if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        verifyBracketing(min, max, f);
+		if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
+        double b = initial;
+		clearResult();
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
@@ -134,7 +134,8 @@
         }
 
 
-        // full Brent algorithm starting with provided initial guess
+        verifySequence(min, initial, max);
+		// full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
@@ -172,7 +173,8 @@
         // Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
-            // check if either value is close to a zero
+            resultComputed = true;
+			// check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
@@ -284,7 +286,12 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    if (dx <= 0.0) {
+						x1 = x1 - 0.5 * tolerance;
+					}
+					if (dx <= 0.0) {
+						x1 = x1 - 0.5 * tolerance;
+					}
                 } else {
                     oldDelta = delta;
                     delta = p / p1;


--- /tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java	2018-12-02 11:24:06.671526982 -0500
+++ /tmp/GenProg_Defects4J_Math_73/patches_p045/Patch_572/patched/tmp/GenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java	2018-12-02 11:56:37.139300957 -0500
@@ -222,7 +222,8 @@
      * @throws IllegalArgumentException
      */
     protected void verifySequence(final double lower, final double initial, final double upper) {
-        if (!isSequence(lower, initial, upper)) {
+        this.resultComputed = false;
+		if (!isSequence(lower, initial, upper)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",
                     lower, initial, upper);


