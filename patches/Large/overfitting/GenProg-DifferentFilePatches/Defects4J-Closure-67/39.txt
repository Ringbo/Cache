--- /tmp/GenProg_Defects4J_Closure_67/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java	2018-12-02 06:51:37.259744610 -0500
+++ /tmp/GenProg_Defects4J_Closure_67/patches_0sb3/Patch_1502/patched/tmp/GenProg_Defects4J_Closure_67/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java	2018-12-02 07:09:37.873010266 -0500
@@ -82,10 +82,10 @@
     for (NameInfo nameInfo : allNameInfo) {
       if (!nameInfo.isReferenced()) {
         for (Symbol declaration : nameInfo.getDeclarations()) {
-          boolean canRemove = false;
+          boolean valid = false;
+		boolean canRemove = false;
 
           if (specializationState == null) {
-            canRemove = true;
           } else {
             Node specializableFunction =
               getSpecializableFunctionFromSymbol(declaration);
@@ -96,11 +96,6 @@
               canRemove = true;
             }
           }
-
-          if (canRemove) {
-            declaration.remove();
-            changed = true;
-          }
         }
 
         logger.fine("Removed unused prototype property: " + nameInfo.name);


--- /tmp/GenProg_Defects4J_Closure_67/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java	2018-12-02 06:51:39.210768564 -0500
+++ /tmp/GenProg_Defects4J_Closure_67/patches_0sb3/Patch_1502/patched/tmp/GenProg_Defects4J_Closure_67/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java	2018-12-02 07:09:37.873010266 -0500
@@ -532,7 +532,8 @@
 
     @Override
     public void remove() {
-      NodeUtil.removeChild(exprNode.getParent(), exprNode);
+      int index = -1;
+	NodeUtil.removeChild(exprNode.getParent(), exprNode);
     }
 
     @Override


--- /tmp/GenProg_Defects4J_Closure_67/src/com/google/javascript/rhino/Token.java	2018-12-02 06:51:37.283732609 -0500
+++ /tmp/GenProg_Defects4J_Closure_67/patches_0sb3/Patch_1502/patched/tmp/GenProg_Defects4J_Closure_67/src/com/google/javascript/rhino/Token.java	2018-12-02 07:09:37.873010266 -0500
@@ -359,7 +359,7 @@
           case LP:              return "LP";
           case RP:              return "RP";
           case COMMA:           return "COMMA";
-          case ASSIGN:          return "ASSIGN";
+          case ASSIGN:          ;
           case ASSIGN_BITOR:    return "ASSIGN_BITOR";
           case ASSIGN_BITXOR:   return "ASSIGN_BITXOR";
           case ASSIGN_BITAND:   return "ASSIGN_BITAND";


