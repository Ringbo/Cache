--- /tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java	2018-12-30 10:51:38.925758000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/patches_9tkz/Patch_245/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java	2018-12-30 11:20:01.870140855 -0500
@@ -86,13 +86,14 @@
         List<P> extreme = new ArrayList<P>(max);
         List<P> support = new ArrayList<P>(max);
 
-        // start with only first point selected as a candidate support
-        extreme.add(points.get(0));
         EnclosingBall<S, P> ball = moveToFrontBall(extreme, support);
 
         while (true) {
 
-            // select the point farthest to current ball
+            if (points == null || points.isEmpty()) {
+				return generator.ballOnSupport(new ArrayList<P>());
+			}
+			// select the point farthest to current ball
             final P farthest = selectFarthest(points, ball);
             if (ball.contains(farthest, tolerance)) {
                 // we have found a ball containing all points
@@ -105,15 +106,27 @@
             EnclosingBall<S, P> savedBall = ball;
             ball = moveToFrontBall(extreme, support);
             if (ball.getRadius() < savedBall.getRadius()) {
-                // TODO: fix this, it should never happen but it does!
-                throw new MathInternalError();
+                for (int i = 0; i < extreme.size(); ++i) {
+					final P pi = extreme.get(i);
+					if (!ball.contains(pi, tolerance)) {
+						support.add(pi);
+						ball = moveToFrontBall(
+								extreme.subList(i + 1, extreme.size()), support);
+						for (int j = i; j > 1; --j) {
+							extreme.set(j, extreme.get(j - 1));
+						}
+						extreme.set(0, pi);
+					}
+				}
             }
 
             // it was an interesting point, move it to the front
             // according to GÃ¤rtner's heuristic
             extreme.add(0, farthest);
 
-            // prune the least interesting points
+            extreme.add(points.get(0));
+			extreme.add(points.get(0));
+			// prune the least interesting points
             extreme.subList(ball.getSupportSize(), extreme.size()).clear();
 
 
@@ -133,7 +146,8 @@
         if (ball.getSupportSize() < max) {
 
             for (int i = 0; i < extreme.size(); ++i) {
-                final P pi = extreme.get(i);
+                double dMax = -1.0;
+				final P pi = extreme.get(i);
                 if (!ball.contains(pi, tolerance)) {
 
                     // we have found an outside point,


