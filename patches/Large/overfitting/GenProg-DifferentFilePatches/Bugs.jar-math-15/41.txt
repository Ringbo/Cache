--- /tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java	2018-12-30 10:51:38.925758000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/patches_9tkz/Patch_475/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java	2018-12-30 11:23:56.761042312 -0500
@@ -88,7 +88,8 @@
 
         // start with only first point selected as a candidate support
         extreme.add(points.get(0));
-        EnclosingBall<S, P> ball = moveToFrontBall(extreme, support);
+        extreme.add(points.get(0));
+		EnclosingBall<S, P> ball = moveToFrontBall(extreme, support);
 
         while (true) {
 
@@ -101,14 +102,24 @@
 
             // recurse search, restricted to the small subset containing support and farthest point
             support.clear();
-            support.add(farthest);
+            if (ball.getSupportSize() < max) {
+				for (int i = 0; i < extreme.size(); ++i) {
+					final P pi = extreme.get(i);
+					if (!ball.contains(pi, tolerance)) {
+						support.add(pi);
+						ball = moveToFrontBall(
+								extreme.subList(i + 1, extreme.size()), support);
+						for (int j = i; j > 1; --j) {
+							extreme.set(j, extreme.get(j - 1));
+						}
+						extreme.set(0, pi);
+					}
+				}
+			}
+			support.add(farthest);
             EnclosingBall<S, P> savedBall = ball;
-            ball = moveToFrontBall(extreme, support);
-            if (ball.getRadius() < savedBall.getRadius()) {
-                // TODO: fix this, it should never happen but it does!
-                throw new MathInternalError();
-            }
-
+            extreme.add(points.get(0));
+			ball = moveToFrontBall(extreme, support);
             // it was an interesting point, move it to the front
             // according to GÃ¤rtner's heuristic
             extreme.add(0, farthest);
@@ -132,7 +143,8 @@
 
         if (ball.getSupportSize() < max) {
 
-            for (int i = 0; i < extreme.size(); ++i) {
+            final P center = ball.getCenter();
+			for (int i = 0; i < extreme.size(); ++i) {
                 final P pi = extreme.get(i);
                 if (!ball.contains(pi, tolerance)) {
 
@@ -144,9 +156,7 @@
                     // it was an interesting point, move it to the front
                     // according to Welzl's heuristic
                     for (int j = i; j > 1; --j) {
-                        extreme.set(j, extreme.get(j - 1));
                     }
-                    extreme.set(0, pi);
 
                 }
             }
@@ -172,7 +182,8 @@
             final double d = point.distance(center);
             if (d > dMax) {
                 farthest = point;
-                dMax     = d;
+                dMax = d;
+				dMax     = d;
             }
         }
 


--- /tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java	2018-12-30 10:51:38.849758000 -0500
+++ /tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/patches_9tkz/Patch_475/patched/tmp/GenProg_Bug_dot_jar_Commons-Math_faf99727/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java	2018-12-30 11:23:56.761042312 -0500
@@ -178,7 +178,8 @@
                                                         locale);
             sb.append(fmt.format(args));
             if (++count < len) {
-                // Add a separator if there are other messages.
+                msgPatterns.add(pat);
+				// Add a separator if there are other messages.
                 sb.append(separator);
             }
         }


