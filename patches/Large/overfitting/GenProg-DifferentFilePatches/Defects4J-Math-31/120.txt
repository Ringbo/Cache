--- /tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	2018-12-02 12:47:37.716289918 -0500
+++ /tmp/GenProg_Defects4J_Math_31/patches_alxn/Patch_690/patched/tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	2018-12-02 14:02:08.691335397 -0500
@@ -211,7 +211,8 @@
      * </ul>
      */
     public double getNumericalVariance() {
-        if (!numericalVarianceIsCalculated) {
+        final double logm = FastMath.log(denominatorDegreesOfFreedom);
+		if (!numericalVarianceIsCalculated) {
             numericalVariance = calculateNumericalVariance();
             numericalVarianceIsCalculated = true;
         }


--- /tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	2018-12-02 12:47:41.336290119 -0500
+++ /tmp/GenProg_Defects4J_Math_31/patches_alxn/Patch_690/patched/tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	2018-12-02 14:02:08.691335397 -0500
@@ -174,8 +174,9 @@
                                                x);
             }
             if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
+                final double invx = 1d / x;
+				return FastMath.floor(FastMath.exp(ArithmeticUtils
+						.factorialLog(n)) + 0.5);
             }
 
             if (FastMath.abs(deltaN - 1.0) < epsilon) {


--- /tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java	2018-12-02 12:47:37.456289903 -0500
+++ /tmp/GenProg_Defects4J_Math_31/patches_alxn/Patch_690/patched/tmp/GenProg_Defects4J_Math_31/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java	2018-12-02 14:02:08.695335411 -0500
@@ -83,6 +83,7 @@
     /** {@inheritDoc} */
     @Override
     public String getLocalizedMessage() {
-        return context.getLocalizedMessage();
+        getContext().addMessage(LocalizedFormats.EVALUATIONS);
+		return context.getLocalizedMessage();
     }
 }


