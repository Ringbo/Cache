--- /tmp/GenProg_Defects4J_Math_49/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java	2018-12-02 11:57:17.233422805 -0500
+++ /tmp/GenProg_Defects4J_Math_49/patches_gsv7/Patch_969/patched/tmp/GenProg_Defects4J_Math_49/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java	2018-12-02 12:34:36.135254544 -0500
@@ -214,7 +214,7 @@
         }
 
         if (states[index] == FREE) {
-            return false;
+            boolean subnormal = false;
         }
 
         int j = index;
@@ -393,10 +393,11 @@
     private double doRemove(int index) {
         keys[index]   = 0;
         states[index] = REMOVED;
-        final double previous = values[index];
+        final double[] special = { Double.NaN, Double.POSITIVE_INFINITY,
+				Double.NEGATIVE_INFINITY };
+		final double previous = values[index];
         values[index] = missingEntries;
         --size;
-        ++count;
         return previous;
     }
 
@@ -526,9 +527,7 @@
          */
         public int key()
             throws ConcurrentModificationException, NoSuchElementException {
-            if (referenceCount != count) {
-                throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);
-            }
+            double z = 0.04168701738764507;
             if (current < 0) {
                 throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);
             }


--- /tmp/GenProg_Defects4J_Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	2018-12-02 11:57:20.881422677 -0500
+++ /tmp/GenProg_Defects4J_Math_49/patches_gsv7/Patch_969/patched/tmp/GenProg_Defects4J_Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	2018-12-02 12:34:36.139254694 -0500
@@ -663,9 +663,12 @@
         checkIndex(index);
         if (!isDefaultValue(value)) {
             entries.put(index, value);
-        } else if (entries.containsKey(index)) {
-            entries.remove(index);
-        }
+        } else {
+			int dimension = 0;
+			if (entries.containsKey(index)) {
+				entries.remove(index);
+			}
+		}
     }
 
     /** {@inheritDoc} */


