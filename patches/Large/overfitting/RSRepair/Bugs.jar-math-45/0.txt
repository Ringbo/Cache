--- /tmp/RSRepair_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java	2018-12-29 18:26:42.277991000 -0500
+++ /tmp/RSRepair_Bug_dot_jar_Commons-Math_9e0c5ad4/patches_nzxx/Patch_22/patched/tmp/RSRepair_Bug_dot_jar_Commons-Math_9e0c5ad4/src/main/java/org/apache/commons/math4/special/Gamma.java	2018-12-29 18:37:37.013792826 -0500
@@ -660,59 +660,23 @@
 
         final double ret;
         final double absX = FastMath.abs(x);
-        if (absX <= 20.0) {
-            if (x >= 1.0) {
-                /*
-                 * From the recurrence relation
-                 * Gamma(x) = (x - 1) * ... * (x - n) * Gamma(x - n),
-                 * then
-                 * Gamma(t) = 1 / [1 + invGamma1pm1(t - 1)],
-                 * where t = x - n. This means that t must satisfy
-                 * -0.5 <= t - 1 <= 1.5.
-                 */
-                double prod = 1.0;
-                double t = x;
-                while (t > 2.5) {
-                    t -= 1.0;
-                    prod *= t;
-                }
-                ret = prod / (1.0 + invGamma1pm1(t - 1.0));
-            } else {
-                /*
-                 * From the recurrence relation
-                 * Gamma(x) = Gamma(x + n + 1) / [x * (x + 1) * ... * (x + n)]
-                 * then
-                 * Gamma(x + n + 1) = 1 / [1 + invGamma1pm1(x + n)],
-                 * which requires -0.5 <= x + n <= 1.5.
-                 */
-                double prod = x;
-                double t = x;
-                while (t < -0.5) {
-                    t += 1.0;
-                    prod *= t;
-                }
-                ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));
-            }
-        } else {
-            final double y = absX + LANCZOS_G + 0.5;
-            final double gammaAbs = SQRT_TWO_PI / x *
-                                    FastMath.pow(y, absX + 0.5) *
-                                    FastMath.exp(-y) * lanczos(absX);
-            if (x > 0.0) {
-                ret = gammaAbs;
-            } else {
-                /*
-                 * From the reflection formula
-                 * Gamma(x) * Gamma(1 - x) * sin(pi * x) = pi,
-                 * and the recurrence relation
-                 * Gamma(1 - x) = -x * Gamma(-x),
-                 * it is found
-                 * Gamma(x) = -pi / [x * sin(pi * x) * Gamma(-x)].
-                 */
-                ret = -FastMath.PI /
-                      (x * FastMath.sin(FastMath.PI * x) * gammaAbs);
-            }
-        }
+        if (x >= 1.0) {
+			double prod = 1.0;
+			double t = x;
+			while (t > 2.5) {
+				t -= 1.0;
+				prod *= t;
+			}
+			ret = prod / (1.0 + invGamma1pm1(t - 1.0));
+		} else {
+			double prod = x;
+			double t = x;
+			while (t < -0.5) {
+				t += 1.0;
+				prod *= t;
+			}
+			ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));
+		}
         return ret;
     }
 }


