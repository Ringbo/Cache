--- /source/org/jfree/chart/block/BorderArrangement.java
+++ /source/org/jfree/chart/block/BorderArrangement.java
@@ -148,28 +148,8 @@
             if (h == LengthConstraintType.NONE) {
                 contentSize = arrangeFN(container, g2, constraint.getWidth());
             }
-            else if (h == LengthConstraintType.FIXED) {
-                contentSize = arrangeFF(container, g2, constraint);
-            }
-            else if (h == LengthConstraintType.RANGE) {
-                contentSize = arrangeFR(container, g2, constraint);
-            }
-        }
-        else if (w == LengthConstraintType.RANGE) {
-            if (h == LengthConstraintType.NONE) {
-                throw new RuntimeException("Not implemented.");
-            }
-            else if (h == LengthConstraintType.FIXED) {
-                throw new RuntimeException("Not implemented.");
-            }
-            else if (h == LengthConstraintType.RANGE) {
-                contentSize = arrangeRR(container, constraint.getWidthRange(),
-                        constraint.getHeightRange(), g2);
-            }
-        }
-        return new Size2D(container.calculateTotalWidth(contentSize.getWidth()),
-                container.calculateTotalHeight(contentSize.getHeight()));
-    }
+            else 
+            {
 
     /**
      * Performs an arrangement without constraints.
@@ -179,66 +159,7 @@
      *
      * @return The container size after the arrangement.
      */
-    protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {
-        double[] w = new double[5];
-        double[] h = new double[5];
-        if (this.topBlock != null) {
-            Size2D size = this.topBlock.arrange(g2, RectangleConstraint.NONE);
-            w[0] = size.width;
-            h[0] = size.height;
-        }
-        if (this.bottomBlock != null) {
-            Size2D size = this.bottomBlock.arrange(g2,
-                    RectangleConstraint.NONE);
-            w[1] = size.width;
-            h[1] = size.height;
-        }
-        if (this.leftBlock != null) {
-            Size2D size = this.leftBlock.arrange(g2, RectangleConstraint.NONE);
-            w[2] = size.width;
-            h[2] = size.height;
-       }
-        if (this.rightBlock != null) {
-            Size2D size = this.rightBlock.arrange(g2, RectangleConstraint.NONE);
-            w[3] = size.width;
-            h[3] = size.height;
-        }
-
-        h[2] = Math.max(h[2], h[3]);
-        h[3] = h[2];
-
-        if (this.centerBlock != null) {
-            Size2D size = this.centerBlock.arrange(g2,
-                    RectangleConstraint.NONE);
-            w[4] = size.width;
-            h[4] = size.height;
-        }
-        double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));
-        double centerHeight = Math.max(h[2], Math.max(h[3], h[4]));
-        double height = h[0] + h[1] + centerHeight;
-        if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width,
-                    h[0]));
-        }
-        if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,
-                    height - h[1], width, h[1]));
-        }
-        if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    centerHeight));
-        }
-        if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3],
-                    h[0], w[3], centerHeight));
-        }
-
-        if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],
-                    width - w[2] - w[3], centerHeight));
-        }
-        return new Size2D(width, height);
-    }
+
 
     /**
      * Performs an arrangement with a fixed width and a range for the height.
@@ -249,18 +170,7 @@
      *
      * @return The container size after the arrangement.
      */
-    protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,
-                               RectangleConstraint constraint) {
-        Size2D size1 = arrangeFN(container, g2, constraint.getWidth());
-        if (constraint.getHeightRange().contains(size1.getHeight())) {
-            return size1;
-        }
-        else {
-            double h = constraint.getHeightRange().constrain(size1.getHeight());
-            RectangleConstraint c2 = constraint.toFixedHeight(h);
-            return arrange(container, g2, c2);
-        }
-    }
+
 
     /**
      * Arranges the container width a fixed width and no constraint on the
@@ -272,56 +182,7 @@
      *
      * @return The container size after arranging the contents.
      */
-    protected Size2D arrangeFN(BlockContainer container, Graphics2D g2,
-                               double width) {
-        double[] w = new double[5];
-        double[] h = new double[5];
-        RectangleConstraint c1 = new RectangleConstraint(width, null,
-                LengthConstraintType.FIXED, 0.0, null,
-                LengthConstraintType.NONE);
-        if (this.topBlock != null) {
-            Size2D size = this.topBlock.arrange(g2, c1);
-            w[0] = size.width;
-            h[0] = size.height;
-        }
-        if (this.bottomBlock != null) {
-            Size2D size = this.bottomBlock.arrange(g2, c1);
-            w[1] = size.width;
-            h[1] = size.height;
-        }
-        RectangleConstraint c2 = new RectangleConstraint(0.0,
-                new Range(0.0, width), LengthConstraintType.RANGE,
-                0.0, null, LengthConstraintType.NONE);
-        if (this.leftBlock != null) {
-            Size2D size = this.leftBlock.arrange(g2, c2);
-            w[2] = size.width;
-            h[2] = size.height;
-        }
-        if (this.rightBlock != null) {
-            double maxW = Math.max(width - w[2], 0.0);
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(Math.min(w[2], maxW), maxW),
-                    LengthConstraintType.RANGE, 0.0, null,
-                    LengthConstraintType.NONE);
-            Size2D size = this.rightBlock.arrange(g2, c3);
-            w[3] = size.width;
-            h[3] = size.height;
-        }
-
-        h[2] = Math.max(h[2], h[3]);
-        h[3] = h[2];
-
-        if (this.centerBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(width - w[2]
-                    - w[3], null, LengthConstraintType.FIXED, 0.0, null,
-                    LengthConstraintType.NONE);
-            Size2D size = this.centerBlock.arrange(g2, c4);
-            w[4] = size.width;
-            h[4] = size.height;
-        }
-        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));
-        return arrange(container, g2, new RectangleConstraint(width, height));
-    }
+
 
     /**
      * Performs an arrangement with range constraints on both the vertical
@@ -334,81 +195,7 @@
      *
      * @return The container size.
      */
-    protected Size2D arrangeRR(BlockContainer container,
-                               Range widthRange, Range heightRange,
-                               Graphics2D g2) {
-        double[] w = new double[5];
-        double[] h = new double[5];
-        if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(widthRange,
-                    heightRange);
-            Size2D size = this.topBlock.arrange(g2, c1);
-            w[0] = size.width;
-            h[0] = size.height;
-        }
-        if (this.bottomBlock != null) {
-            Range heightRange2 = Range.shift(heightRange, -h[0], false);
-            RectangleConstraint c2 = new RectangleConstraint(widthRange,
-                    heightRange2);
-            Size2D size = this.bottomBlock.arrange(g2, c2);
-            w[1] = size.width;
-            h[1] = size.height;
-        }
-        Range heightRange3 = Range.shift(heightRange, -(h[0] + h[1]));
-        if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(widthRange,
-                    heightRange3);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
-            h[2] = size.height;
-        }
-        Range widthRange2 = Range.shift(widthRange, -w[2], false);
-        if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(widthRange2,
-                    heightRange3);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
-            h[3] = size.height;
-        }
-
-        h[2] = Math.max(h[2], h[3]);
-        h[3] = h[2];
-        Range widthRange3 = Range.shift(widthRange, -(w[2] + w[3]), false);
-        if (this.centerBlock != null) {
-            RectangleConstraint c5 = new RectangleConstraint(widthRange3,
-                    heightRange3);
-            // TODO:  the width and height ranges should be reduced by the
-            // height required for the top and bottom, and the width required
-            // by the left and right
-            Size2D size = this.centerBlock.arrange(g2, c5);
-            w[4] = size.width;
-            h[4] = size.height;
-        }
-        double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));
-        double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));
-        if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width,
-                    h[0]));
-        }
-        if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,
-                    height - h[1], width, h[1]));
-        }
-        if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
-        }
-        if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3],
-                    h[0], w[3], h[3]));
-        }
-
-        if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0],
-                    width - w[2] - w[3], height - h[0] - h[1]));
-        }
-        return new Size2D(width, height);
-    }
+
 
     /**
      * Arranges the items within a container.
@@ -419,84 +206,11 @@
      *
      * @return The container size after the arrangement.
      */
-    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
-                               RectangleConstraint constraint) {
-        double[] w = new double[5];
-        double[] h = new double[5];
-        w[0] = constraint.getWidth();
-        if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
-            Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
-        }
-        w[1] = w[0];
-        if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
-            Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
-        }
-        h[2] = constraint.getHeight() - h[1] - h[0];
-        if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
-        }
-        h[3] = h[2];
-        if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
-        }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
-        if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
-        }
-
-        if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
-        }
-        if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
-        }
-        if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
-        }
-        if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
-        }
-        if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
-        }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
-    }
 
     /**
      * Clears the layout.
      */
-    public void clear() {
-        this.centerBlock = null;
-        this.topBlock = null;
-        this.bottomBlock = null;
-        this.leftBlock = null;
-        this.rightBlock = null;
+                    this.rightBlock = null;                     if (h == (org.jfree.chart.block.LengthConstraintType.FIXED)) {                         contentSize = arrangeFF(container, g2, constraint);}else                         if (h == (org.jfree.chart.block.LengthConstraintType.RANGE)) {                             contentSize = arrangeFR(container, g2, constraint);}}}else                 if (w == (org.jfree.chart.block.LengthConstraintType.RANGE)) {                     if (h == (org.jfree.chart.block.LengthConstraintType.NONE)) {                         throw new java.lang.RuntimeException("Not implemented.");}else                         if (h == (org.jfree.chart.block.LengthConstraintType.FIXED)) {                             throw new java.lang.RuntimeException("Not implemented.");}else                             if (h == (org.jfree.chart.block.LengthConstraintType.RANGE)) {                                 contentSize = arrangeRR(container, constraint.getWidthRange(), constraint.getHeightRange(), g2);}}         return new org.jfree.chart.util.Size2D(container.calculateTotalWidth(contentSize.getWidth()), container.calculateTotalHeight(contentSize.getHeight()));}     protected org.jfree.chart.util.Size2D arrangeNN(org.jfree.chart.block.BlockContainer container, java.awt.Graphics2D g2) {         double[] w = new double[5];         double[] h = new double[5];         if ((this.topBlock) != null) {             org.jfree.chart.util.Size2D size = this.topBlock.arrange(g2, org.jfree.chart.block.RectangleConstraint.NONE);             w[0] = size.width;             h[0] = size.height;}         if ((this.bottomBlock) != null) {             org.jfree.chart.util.Size2D size = this.bottomBlock.arrange(g2, org.jfree.chart.block.RectangleConstraint.NONE);             w[1] = size.width;             h[1] = size.height;}         if ((this.leftBlock) != null) {             org.jfree.chart.util.Size2D size = this.leftBlock.arrange(g2, org.jfree.chart.block.RectangleConstraint.NONE);             w[2] = size.width;             h[2] = size.height;}         if ((this.rightBlock) != null) {             org.jfree.chart.util.Size2D size = this.rightBlock.arrange(g2, org.jfree.chart.block.RectangleConstraint.NONE);             w[3] = size.width;             h[3] = size.height;}         h[2] = java.lang.Math.max(h[2], h[3]);         h[3] = h[2];         if ((this.centerBlock) != null) {             org.jfree.chart.util.Size2D size = this.centerBlock.arrange(g2, org.jfree.chart.block.RectangleConstraint.NONE);             w[4] = size.width;             h[4] = size.height;}         double width = java.lang.Math.max(w[0], java.lang.Math.max(w[1], (((w[2]) + (w[4])) + (w[3]))));         double centerHeight = java.lang.Math.max(h[2], java.lang.Math.max(h[3], h[4]));         double height = ((h[0]) + (h[1])) + centerHeight;         if ((this.topBlock) != null) {             this.topBlock.setBounds(new java.awt.geom.Rectangle2D.Double(0.0, 0.0, width, h[0]));}         if ((this.bottomBlock) != null) {             this.bottomBlock.setBounds(new java.awt.geom.Rectangle2D.Double(0.0, (height - (h[1])), width, h[1]));}         if ((this.leftBlock) != null) {             this.leftBlock.setBounds(new java.awt.geom.Rectangle2D.Double(0.0, h[0], w[2], centerHeight));}         if ((this.rightBlock) != null) {             this.rightBlock.setBounds(new java.awt.geom.Rectangle2D.Double((width - (w[3])), h[0], w[3], centerHeight));}         if ((this.centerBlock) != null) {             this.centerBlock.setBounds(new java.awt.geom.Rectangle2D.Double(w[2], h[0], ((width - (w[2])) - (w[3])), centerHeight));}         return new org.jfree.chart.util.Size2D(width, height);}     protected org.jfree.chart.util.Size2D arrangeFR(org.jfree.chart.block.BlockContainer container, java.awt.Graphics2D g2, org.jfree.chart.block.RectangleConstraint constraint) {         org.jfree.chart.util.Size2D size1 = arrangeFN(container, g2, constraint.getWidth());         if (constraint.getHeightRange().contains(size1.getHeight())) {             return size1;}else {             double h = constraint.getHeightRange().constrain(size1.getHeight());             org.jfree.chart.block.RectangleConstraint c2 = constraint.toFixedHeight(h);             return arrange(container, g2, c2);}}     protected org.jfree.chart.util.Size2D arrangeFN(org.jfree.chart.block.BlockContainer container, java.awt.Graphics2D g2, double width) {         double[] w = new double[5];         double[] h = new double[5];         org.jfree.chart.block.RectangleConstraint c1 = new org.jfree.chart.block.RectangleConstraint(width, null, org.jfree.chart.block.LengthConstraintType.FIXED, 0.0, null, org.jfree.chart.block.LengthConstraintType.NONE);         if ((this.topBlock) != null) {             org.jfree.chart.util.Size2D size = this.topBlock.arrange(g2, c1);             w[0] = size.width;             h[0] = size.height;}         if ((this.bottomBlock) != null) {             org.jfree.chart.util.Size2D size = this.bottomBlock.arrange(g2, c1);             w[1] = size.width;             h[1] = size.height;}         org.jfree.chart.block.RectangleConstraint c2 = new org.jfree.chart.block.RectangleConstraint(0.0, new org.jfree.data.Range(0.0, width), org.jfree.chart.block.LengthConstraintType.RANGE, 0.0, null, org.jfree.chart.block.LengthConstraintType.NONE);         if ((this.leftBlock) != null) {             org.jfree.chart.util.Size2D size = this.leftBlock.arrange(g2, c2);             w[2] = size.width;             h[2] = size.height;}         if ((this.rightBlock) != null) {             double maxW = java.lang.Math.max((width - (w[2])), 0.0);             org.jfree.chart.block.RectangleConstraint c3 = new org.jfree.chart.block.RectangleConstraint(0.0, new org.jfree.data.Range(java.lang.Math.min(w[2], maxW), maxW), org.jfree.chart.block.LengthConstraintType.RANGE, 0.0, null, org.jfree.chart.block.LengthConstraintType.NONE);             org.jfree.chart.util.Size2D size = this.rightBlock.arrange(g2, c3);             w[3] = size.width;             h[3] = size.height;}         h[2] = java.lang.Math.max(h[2], h[3]);         h[3] = h[2];         if ((this.centerBlock) != null) {             org.jfree.chart.block.RectangleConstraint c4 = new org.jfree.chart.block.RectangleConstraint(((width - (w[2])) - (w[3])), null, org.jfree.chart.block.LengthConstraintType.FIXED, 0.0, null, org.jfree.chart.block.LengthConstraintType.NONE);             org.jfree.chart.util.Size2D size = this.centerBlock.arrange(g2, c4);             w[4] = size.width;             h[4] = size.height;}         double height = ((h[0]) + (h[1])) + (java.lang.Math.max(h[2], java.lang.Math.max(h[3], h[4])));         return arrange(container, g2, new org.jfree.chart.block.RectangleConstraint(width, height));}     protected org.jfree.chart.util.Size2D arrangeRR(org.jfree.chart.block.BlockContainer container, org.jfree.data.Range widthRange, org.jfree.data.Range heightRange, java.awt.Graphics2D g2) {         double[] w = new double[5];         double[] h = new double[5];         if ((this.topBlock) != null) {             org.jfree.chart.block.RectangleConstraint c1 = new org.jfree.chart.block.RectangleConstraint(widthRange, heightRange);             org.jfree.chart.util.Size2D size = this.topBlock.arrange(g2, c1);             w[0] = size.width;             h[0] = size.height;}         if ((this.bottomBlock) != null) {             org.jfree.data.Range heightRange2 = org.jfree.data.Range.shift(heightRange, (-(h[0])), false);             org.jfree.chart.block.RectangleConstraint c2 = new org.jfree.chart.block.RectangleConstraint(widthRange, heightRange2);             org.jfree.chart.util.Size2D size = this.bottomBlock.arrange(g2, c2);             w[1] = size.width;             h[1] = size.height;}         org.jfree.data.Range heightRange3 = org.jfree.data.Range.shift(heightRange, (-((h[0]) + (h[1]))));         if ((this.leftBlock) != null) {             org.jfree.chart.block.RectangleConstraint c3 = new org.jfree.chart.block.RectangleConstraint(widthRange, heightRange3);             org.jfree.chart.util.Size2D size = this.leftBlock.arrange(g2, c3);             w[2] = size.width;             h[2] = size.height;}         org.jfree.data.Range widthRange2 = org.jfree.data.Range.shift(widthRange, (-(w[2])), false);         if ((this.rightBlock) != null) {             org.jfree.chart.block.RectangleConstraint c4 = new org.jfree.chart.block.RectangleConstraint(widthRange2, heightRange3);             org.jfree.chart.util.Size2D size = this.rightBlock.arrange(g2, c4);             w[3] = size.width;             h[3] = size.height;}         h[2] = java.lang.Math.max(h[2], h[3]);         h[3] = h[2];         org.jfree.data.Range widthRange3 = org.jfree.data.Range.shift(widthRange, (-((w[2]) + (w[3]))), false);         if ((this.centerBlock) != null) {             org.jfree.chart.block.RectangleConstraint c5 = new org.jfree.chart.block.RectangleConstraint(widthRange3, heightRange3);             org.jfree.chart.util.Size2D size = this.centerBlock.arrange(g2, c5);             w[4] = size.width;             h[4] = size.height;}         double width = java.lang.Math.max(w[0], java.lang.Math.max(w[1], (((w[2]) + (w[4])) + (w[3]))));         double height = ((h[0]) + (h[1])) + (java.lang.Math.max(h[2], java.lang.Math.max(h[3], h[4])));         if ((this.topBlock) != null) {             this.topBlock.setBounds(new java.awt.geom.Rectangle2D.Double(0.0, 0.0, width, h[0]));}         if ((this.bottomBlock) != null) {             this.bottomBlock.setBounds(new java.awt.geom.Rectangle2D.Double(0.0, (height - (h[1])), width, h[1]));}         if ((this.leftBlock) != null) {             this.leftBlock.setBounds(new java.awt.geom.Rectangle2D.Double(0.0, h[0], w[2], h[2]));}         if ((this.rightBlock) != null) {             this.rightBlock.setBounds(new java.awt.geom.Rectangle2D.Double((width - (w[3])), h[0], w[3], h[3]));}         if ((this.centerBlock) != null) {             this.centerBlock.setBounds(new java.awt.geom.Rectangle2D.Double(w[2], h[0], ((width - (w[2])) - (w[3])), ((height - (h[0])) - (h[1]))));}         return new org.jfree.chart.util.Size2D(width, height);}     protected org.jfree.chart.util.Size2D arrangeFF(org.jfree.chart.block.BlockContainer container, java.awt.Graphics2D g2, org.jfree.chart.block.RectangleConstraint constraint) {         double[] w = new double[5];         double[] h = new double[5];         w[0] = constraint.getWidth();         if ((this.topBlock) != null) {             org.jfree.chart.block.RectangleConstraint c1 = new org.jfree.chart.block.RectangleConstraint(w[0], null, org.jfree.chart.block.LengthConstraintType.FIXED, 0.0, new org.jfree.data.Range(0.0, constraint.getHeight()), org.jfree.chart.block.LengthConstraintType.RANGE);             org.jfree.chart.util.Size2D size = this.topBlock.arrange(g2, c1);             h[0] = size.height;}         w[1] = w[0];         if ((this.bottomBlock) != null) {             org.jfree.chart.block.RectangleConstraint c2 = new org.jfree.chart.block.RectangleConstraint(w[0], null, org.jfree.chart.block.LengthConstraintType.FIXED, 0.0, new org.jfree.data.Range(0.0, ((constraint.getHeight()) - (h[0]))), org.jfree.chart.block.LengthConstraintType.RANGE);             org.jfree.chart.util.Size2D size = this.bottomBlock.arrange(g2, c2);             h[1] = size.height;}         h[2] = ((constraint.getHeight()) - (h[1])) - (h[0]);         if ((this.leftBlock) != null) {             org.jfree.chart.block.RectangleConstraint c3 = new org.jfree.chart.block.RectangleConstraint(0.0, new org.jfree.data.Range(0.0, constraint.getWidth()), org.jfree.chart.block.LengthConstraintType.RANGE, h[2], null, org.jfree.chart.block.LengthConstraintType.FIXED);             org.jfree.chart.util.Size2D size = this.leftBlock.arrange(g2, c3);             w[2] = size.width;}         h[3] = h[2];         if ((this.rightBlock) != null) {             org.jfree.chart.block.RectangleConstraint c4 = new org.jfree.chart.block.RectangleConstraint(0.0, new org.jfree.data.Range(0.0, ((constraint.getWidth()) - (w[2]))), org.jfree.chart.block.LengthConstraintType.RANGE, h[2], null, org.jfree.chart.block.LengthConstraintType.FIXED);             org.jfree.chart.util.Size2D size = this.rightBlock.arrange(g2, c4);             w[3] = size.width;}         h[4] = h[2];         w[4] = ((constraint.getWidth()) - (w[3])) - (w[2]);         org.jfree.chart.block.RectangleConstraint c5 = new org.jfree.chart.block.RectangleConstraint(w[4], h[4]);         if ((this.centerBlock) != null) {             this.centerBlock.arrange(g2, c5);}         if ((this.topBlock) != null) {             this.topBlock.setBounds(new java.awt.geom.Rectangle2D.Double(0.0, 0.0, w[0], h[0]));}         if ((this.bottomBlock) != null) {             this.bottomBlock.setBounds(new java.awt.geom.Rectangle2D.Double(0.0, ((h[0]) + (h[2])), w[1], h[1]));}         if ((this.leftBlock) != null) {             this.leftBlock.setBounds(new java.awt.geom.Rectangle2D.Double(0.0, h[0], w[2], h[2]));}         if ((this.rightBlock) != null) {             this.rightBlock.setBounds(new java.awt.geom.Rectangle2D.Double(((w[2]) + (w[4])), h[0], w[3], h[3]));}         if ((this.centerBlock) != null) {             this.centerBlock.setBounds(new java.awt.geom.Rectangle2D.Double(w[2], h[0], w[4], h[4]));}         return new org.jfree.chart.util.Size2D(constraint.getWidth(), constraint.getHeight());}     public void clear() {         this.centerBlock = null;         this.topBlock = null;         this.bottomBlock = null;         this.leftBlock = null;         this.rightBlock = null;
     }
 
     /**

