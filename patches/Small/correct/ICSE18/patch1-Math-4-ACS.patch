diff -w -u -r Math4b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java Math4b_Patch195/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java
--- Math4b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java	2017-05-09 06:17:42.000000000 +0800
+++ Math4b_Patch195/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java	2017-05-09 06:21:23.000000000 +0800
@@ -112,6 +112,7 @@
         // compute the intersection on infinite line
         Vector3D v1D = line.intersection(subLine.line);
 
+if (v1D == null){return null;}
         // check location of point with respect to first sub-line
         Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));
 
diff -w -u -r Math4b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java Math4b_Patch195/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java
--- Math4b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	2017-05-09 06:17:42.000000000 +0800
+++ Math4b_Patch195/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java	2017-05-09 06:21:23.000000000 +0800
@@ -115,7 +115,7 @@
 
         // compute the intersection on infinite line
         Vector2D v2D = line1.intersection(line2);
-
+ 	if (v2D == null){return null;}
         // check location of point with respect to first sub-line
         Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 
