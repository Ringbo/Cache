diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java
index 722d225..0d1e95a 100644
--- a/src/com/google/javascript/jscomp/CheckSideEffects.java
+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java
@@ -98,7 +98,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
-    if (n.isExprResult() || n.isBlock()) {
+    if (n.isExprResult()) {
       return;
     }
 
@@ -110,7 +110,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (!isResultUsed &&
+    if (parent.getType() == Token.COMMA) {
+      if (isResultUsed) {
+        return;
+      }
+      if (n == parent.getLastChild()) {
+        for (Node an : parent.getAncestors()) {
+          int ancestorType = an.getType();
+          if (ancestorType == Token.COMMA) continue;
+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
+          else break;
+        }
+      }
+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+        return;
+      }
+    }
+    if (
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
