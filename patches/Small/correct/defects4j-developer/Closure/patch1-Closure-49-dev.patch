diff --git a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java
index 0fcb778..627271f 100644
--- a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java
+++ b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java
@@ -88,6 +88,14 @@ class MakeDeclaredNamesUnique
       renamer = nameStack.peek().forChildScope();
     }
 
+    if (declarationRoot.getType() == Token.FUNCTION) {
+      for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {
+        String name = c.getString();
+        renamer.addDeclaredName(name);
+      }
+      Node functionBody = declarationRoot.getLastChild();
+      findDeclaredNames(functionBody, null, renamer);
+    }  else 
     if (declarationRoot.getType() != Token.FUNCTION) {
       // Add the block declarations
       findDeclaredNames(declarationRoot, null, renamer);
@@ -119,22 +127,11 @@ class MakeDeclaredNamesUnique
             renamer.addDeclaredName(name);
           }
 
-          nameStack.push(renamer);
-        }
-        break;
 
-      case Token.LP: {
-          Renamer renamer = nameStack.peek().forChildScope();
 
           // Add the function parameters
-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-            String name = c.getString();
-            renamer.addDeclaredName(name);
-          }
 
           // Add the function body declarations
-          Node functionBody = n.getNext();
-          findDeclaredNames(functionBody, null, renamer);
 
           nameStack.push(renamer);
         }
@@ -173,16 +170,13 @@ class MakeDeclaredNamesUnique
 
       case Token.FUNCTION:
         // Remove the function body scope
-        nameStack.pop();
         // Remove function recursive name (if any).
         nameStack.pop();
         break;
 
-      case Token.LP:
         // Note: The parameters and function body variables live in the
         // same scope, we introduce the scope when in the "shouldTraverse"
         // visit of LP, but remove it when when we exit the function above.
-        break;
 
       case Token.CATCH:
         // Remove catch except name from the stack of names.
