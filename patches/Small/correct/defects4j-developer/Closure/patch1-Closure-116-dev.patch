diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java
index accf4c5..c3fc14b 100644
--- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -694,15 +694,6 @@ class FunctionInjector {
 
     Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;  // empty function case
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(
-            stmt.getFirstChild(), compiler);
-      }
-    }
 
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
@@ -729,9 +720,6 @@ class FunctionInjector {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
 
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
